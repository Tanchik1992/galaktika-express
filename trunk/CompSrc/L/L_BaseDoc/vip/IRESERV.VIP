//******************************************************************************
//                                                      (c) корпорация Галактика
// Галактика 7.12 - Логистика
// Отчет о резерве по ДО
//******************************************************************************

#include xlReport.vih

#doc
Отчет о резерве по ДО
#end
Interface iReserv 'Резерв по ДО' (, hcm_sell_ProsmRezDok, ) EscClose, Cyan;
  Show at (0, 0, 115, 20);

Create view

Var
//------------------------------------------------------------------------------
  pBaseDoc
, pNRec
, CurGroup
, cBaseVal
                : comp;
//------------------------------------------------------------------------------
  CurCode
                : word;
//------------------------------------------------------------------------------
  cRep
, MainTree
                : longint;
//------------------------------------------------------------------------------
  LenGr
                : byte;
//------------------------------------------------------------------------------
  KatMCGr
                : integer;
//------------------------------------------------------------------------------
  RepDate
                : Date;
//------------------------------------------------------------------------------
  sXLSFileName
, sXLTFileName
, ID
                : string;
//------------------------------------------------------------------------------
As select
//------------------------------------------------------------------------------
  if ( TempDescr.isLeaf <> 1
     , ''
     , LPad(DoubleToStr(TempDescr.Sum[2], '\2p[|-]3666`666`666.88'), 15)
     )
    ( FieldName = TempAveragePrice )
//------------------------------------------------------------------------------
, if ( TempDescr.isLeaf <> 1
     , ''
     , LPad(DoubleToStr(SpStep.Price, '\2p[|-]3666`666`666.88'), 15)
     )
    ( FieldName = TempMCPrice )
//------------------------------------------------------------------------------
, if ( TempDescr.isLeaf <> 1
     , ''
     , if (LongInt(SpStep.SrokRes) <> 0, DateToStr(SpStep.SrokRes, 'DD/MM/YYYY'), '')
     )
    ( FieldName = TempSrokRes )
//------------------------------------------------------------------------------
, if ( UserDeskRep.ResComp[1] <> 0
     , GroupMCFilter.Name
     , if (UserDeskRep.ResWord[31] > 1, 'множественный выбор', '')
     )
    ( FieldName = fGrMC )
//------------------------------------------------------------------------------
, if ( UserDeskRep.ResComp[2] <> 0
     , KatMCFilter.Name
     , if (UserDeskRep.ResWord[32] > 1, 'множественный выбор', '')
     )
    ( FieldName = fMC )
//------------------------------------------------------------------------------
, if ( UserDeskRep.ResComp[3] <> 0
     , KatPodrFilter.Name
     , if (UserDeskRep.ResWord[33] > 1, 'множественный выбор', '')
     )
    ( FieldName = fSklad )
//------------------------------------------------------------------------------
, if ( UserDeskRep.ResComp[4] <> 0
     , KatMolFilter.Name
     , if (UserDeskRep.ResWord[34] > 1, 'множественный выбор', '')
     )
    ( FieldName = fMOL )
//------------------------------------------------------------------------------
, if ( UserDeskRep.ResComp[5] <> 0
     , KatPartyFilter.Name
     , if (UserDeskRep.ResWord[35] > 1, 'множественный выбор', '')
     )
    ( FieldName = fParty )
//------------------------------------------------------------------------------
, if ( UserDeskRep.ResComp[6] <> 0
     , KatOrgFilter.Name
     , if (UserDeskRep.ResWord[36] > 1, 'множественный выбор', '')
     )
    ( FieldName = fKontr )
//------------------------------------------------------------------------------
, if ( UserDeskRep.ResComp[7] <> 0
     , sGetTuneEx('User.Descr', UserOfficeFilial(UserDeskRep.ResComp[7]), UserDeskRep.ResComp[7])
     , if (UserDeskRep.ResWord[37] > 1, 'множественный выбор', '')
     )
    ( FieldName = fDescr )
//------------------------------------------------------------------------------
, if ( UserDeskRep.ResComp[8] <> 0
     , GrDescrFilter.DesGr
     , if (UserDeskRep.ResWord[38] > 1, 'множественный выбор', '')
     )
    ( FieldName = fDesGr )
//------------------------------------------------------------------------------
, if ( UserDeskRep.ResComp[9] <> 0
     , f_sNumDate(BaseDocFilter.NoDoc, BaseDocFilter.dDoc)
     , if (UserDeskRep.ResWord[39] > 1, 'множественный выбор', '')
     )
    ( FieldName = fDO )
//------------------------------------------------------------------------------

, *
from
  BaseDoc
, BaseDoc BaseDocFilter
, BaseDoc BaseDocInT
, DoRes
, DoRes DoResInT
, GrDescr GrDescrFilter
, GrDescr GrDescrInT
, GroupMC
, GroupMC GroupMCFilter
, KatEd
, KatMC
, KatMC KatMCFilter
, KatMC KatMCGr
, KatMC KatMCInT
, KatMol
, KatMol KatMolFilter
, KatOrg
, KatOrg KatOrgFilter
, KatOtpEd
, KatParty
, KatParty KatPartyFilter
, KatPodr
, KatPodr KatPodrFilter
, PickRep
, RepGrLst
, RepGrOne
, RepGroup
, RepGrSrt
, SpStep
, SpStep SpStepInT
, StepDoc
, StepDoc StepDocFilter
, StepDoc StepDocInT
, TekMC
, TempDescr
, TempDescr TempDescrFoot
, TempIer (TempIer06)
, Tobot
, Tobot Tobot2
, UserDeskRep
, X$Users

Where
((
  // Настройка отчета
       pNRec                   == UserDeskRep.NRec

  AND  Double(0)               << SpStepInT.Reserv
  AND  SpStepInT.NRec          == DoResInT.cSpStep
  AND  SpStepInT.cStepDoc      == StepDocInT.NRec
  AND  StepDocInT.cBaseDoc     == BaseDocInT.NRec
  AND  SpStepInT.cMCUsl        == KatMCInT.NRec
  AND  BaseDocInT.DesGr        == GrDescrInT.DesGr
       // Группировки
  AND  UserDeskRep.ResComp[21] == RepGrLst.NRec
  AND  RepGrLst.NRec           == RepGrOne.cRepGrLst
  AND  RepGrOne.cRec           == RepGroup.NRec
  AND  RepGrOne.ResComp[1]     == RepGrSrt.NRec
       // Фильтрация
  AND  UserDeskRep.ResComp[1]  == GroupMCFilter.NRec
  AND  UserDeskRep.ResComp[2]  == KatMCFilter.NRec
  AND  UserDeskRep.ResComp[3]  == KatPodrFilter.NRec
  AND  UserDeskRep.ResComp[4]  == KatMolFilter.NRec
  AND  UserDeskRep.ResComp[5]  == KatPartyFilter.NRec
  AND  UserDeskRep.ResComp[6]  == KatOrgFilter.NRec
  AND  UserDeskRep.ResComp[8]  == GrDescrFilter.NRec
  AND  UserDeskRep.ResComp[9]  == StepDocFilter.NRec
  AND  StepDocFilter.cBaseDoc  == BaseDocFilter.NRec
       // Дерево отчета
  AND  CurCode                 == Tobot.Code
  AND  CurCode                 == TempDescr.Code
  AND  CurGroup                == TempDescr.cGroup
  AND  TempDescr.NRec          == TempIer.cGroup
  AND  TempDescr.cRec          == Tobot2.NRec
  AND  Tobot2.mspDoc           == DoRes.NRec
  AND  DoRes.cSpStep           == SpStep.NRec
  AND  SpStep.cMCUsl           == KatMC.NRec
  AND  SpStep.cStepDoc         == StepDoc.NRec
  AND  StepDoc.cBaseDoc        == BaseDoc.NRec
  AND  BaseDoc.cOrg            == KatOrg.NRec
  AND  SpStep.cOtpEd           == KatOtpEd.NRec
  AND  DoRes.cPodr             == KatPodr.NRec
  AND  DoRes.cMol              == KatMol.NRec
  AND  DoRes.cParty            == KatParty.NRec
  AND  KatMC.cGroupMC          == GroupMC.NRec
       // Для получения информации по МЦ-группировке
  AND  TempIer.cKatRec         == KatMCGr.NRec
  AND  KatMCGr.cEd             == KatEd.NRec
  AND  KatMCGr.NRec            == TekMC.cMC
))
;

//******************************************************************************

Parameters
  pBaseDoc      // Ссылка на ДО:
;               //      = 0 - общий отчет,
                //      else - отчет по конкретному ДО,
                //   вызывается из интерфейса VSchet по пункту контекстного меню

//******************************************************************************

form frmReserv('iReservC.out', 'iReserv_Common') with NoVisual;
form frmSpecReserv('iReservS.out', 'iReserv_Spec') with NoVisual;

//******************************************************************************

var
  mGrNomer  : array [10] of word;    // Номер группировки в списке
  mTable    : array [10] of word;    // coTable
  mParam    : array [10] of longint; // Параметры
  mPrefix   : array [10] of string;  // Префикс уровня
  mGrSort   : array [10] of word;    // Сортировка группировки
  mLevelNum : array [10] of word;    // Количество раскрываемых вверх уровней иерархии

  aGroup    : array [0..10] of comp; // Печать сумм по группировкам
  pxlrepsetup : xlrepsetup;
  pXL         : XLSRepBuilder;       // Объект для формирования Excel-отчета

//******************************************************************************
// Проверка фильтров

Function IsFilter(NomFilt: word; aCompFilt: comp; aWordFilt: word; aTest: Comp): boolean;
{
  IsFilter := FALSE;
  if ((UserDeskRep.ResWord[1] AND NomFilt) = NomFilt)
    {
      // Фильтр по незаданным партиям
      if ((NomFilt = 16) AND (aCompFilt = Comp(0)) AND (aWordFilt = 0))
        {
          if (aCompFilt = aTest)
            IsFilter := TRUE;

          Exit;
        }


      if (aCompFilt <> Comp(0))
        { // Единичный фильтр
          if (aCompFilt <> aTest)
            Exit;
        }
      else
        { // множественный фильтр
          if (GetFirst FastFirstRow PickRep
                       where ((UserName         == PickRep.OwnName      AND
                               UserDeskRep.NRec == PickRep.cUserDeskRep AND
                               aWordFilt        == PickRep.wList        AND
                               aTest            == PickRep.cRec )) <> tsOk)
            Exit;
        }
    }

  IsFilter := TRUE;
}

//******************************************************************************
// Фильтр по дескриптору

Function IsFilterDescr(NomFilt: word; aCompFilt: comp; aWordFilt: word;
                       aDescr: String): boolean;
{
  IsFilterDescr := FALSE;
  if ((UserDeskRep.ResWord[1] AND NomFilt) = NomFilt)
    if (GetFirst FastFirstRow X$Users where
         (aDescr = sGetTuneEx('User.Descr', UserOfficeFilial(X$Users.Atl_NRec), X$Users.Atl_NRec))) <> tsOk
      Exit;
    else
      {
        // Единичный фильтр
        if (aCompFilt <> Comp(0))
          {
            if (aCompFilt <> X$Users.Atl_NRec)
              Exit;
          }
        // множественный фильтр
        else
          if (GetFirst FastFirstRow PickRep
                       where ((UserName         == PickRep.OwnName      AND
                               UserDeskRep.NRec == PickRep.cUserDeskRep AND
                               aWordFilt        == PickRep.wList        AND
                               X$Users.Atl_NRec == PickRep.cRec )) <> tsOk)
            Exit;
      }

  IsFilterDescr := TRUE;
}

//******************************************************************************

Function Fill_Tobot: boolean;
var
  IsDOFilter: boolean;
  i          : byte;
{
  Fill_Tobot := TRUE;

  if (Delete Safe Tobot <> tsOk)
    {
      Fill_Tobot := FALSE;
      Message('Ошибка удаления в таблице Tobot', Error);
      Exit;
    }

  ResetBounds(#TempDescr);

  While (GetFirst TempDescr where((CurCode == TempDescr.Code)) = tsOk) do
    {
      if (Delete Safe NoVisual TempIer <> tsOk)
        {
          Fill_Tobot := FALSE;
          Message('Ошибка удаления в таблице TempIer', Error);
          Exit;
        }

      if (Delete Current TempDescr <> tsOk)
        {
          Fill_Tobot := FALSE;
          Message('Ошибка удаления в таблице TempDescr', Error);
          Exit;
        }
    }

  SetBounds(#TempDescr);

  StartNewVisual(vtNumericVisual, vfTimer + vfBreak + vfConfirm, 'Отбор документов для отчета', 1);

  // Если установлен фильтр по ДО, то все остальные фильтры не проверяются
  IsDOFilter := ((UserDeskRep.ResWord[1] AND 256) = 256);

  _LOOP SpStepInT
  {
      if (NOT NextVisual)
      {
          StopVisual('', 0);
          Fill_Tobot := FALSE;
          Message('Формирование отчета прервано пользователем.', OkButton);
          Exit;
      }

      // Фильтр по дате
      if (SpStepInT.dDoc > RepDate)
        Continue;

      // Отчет только по товарам
      if (SpStepInT.prMC <> 1)
        Continue;

      // Только просроченные резервы
      if (UserDeskRep.ResWord[2] = 1)
        if (SpStepInT.SrokRes >= RepDate)
          Continue;

      if (IsDOFilter)
        {
          // Фильтр по ДО
          if (NOT IsFilter(256, UserDeskRep.ResComp[9], UserDeskRep.ResWord[39], StepDocInT.NRec))
            Continue;
        }
      else
        {
          // Фильтр по группе МЦ
          if (NOT IsFilter(1, UserDeskRep.ResComp[1], UserDeskRep.ResWord[31], KatMCInT.cGroupMC))
            Continue;

          // Фильтр по МЦ
          if (NOT IsFilter(2, UserDeskRep.ResComp[2], UserDeskRep.ResWord[32], KatMCInT.NRec))
            Continue;

          // Фильтр по контрагенту
          if (NOT IsFilter(32, UserDeskRep.ResComp[6], UserDeskRep.ResWord[36], BaseDocInT.cOrg))
            Continue;

          // Фильтр по дескриптору
          if (NOT IsFilterDescr(64, UserDeskRep.ResComp[7], UserDeskRep.ResWord[37],
                                BaseDocInT.Descr))
            Continue;

          // Фильтр по группе дескрипторов
          if (NOT IsFilter(128, UserDeskRep.ResComp[8], UserDeskRep.ResWord[38],
                           if(BaseDocInT.DesGr <> '', GrDescrInT.NRec, Comp(0))))
            Continue;
        }

      _LOOP DoResInT
        {
          if (NOT IsDOFilter)
            {
              // Фильтр по складу
              if (NOT IsFilter(4, UserDeskRep.ResComp[3], UserDeskRep.ResWord[33], DoResInT.cPodr))
                Continue;

              // Фильтр по МОЛ
              if (NOT IsFilter(8, UserDeskRep.ResComp[4], UserDeskRep.ResWord[34], DoResInT.cMol))
                Continue;

              // Фильтр по партии
              if (NOT IsFilter(16, UserDeskRep.ResComp[5], UserDeskRep.ResWord[35], DoResInT.cParty))
                Continue;
            }

          ClearBuffer(#Tobot);
          Tobot.Code      := CurCode;
          Tobot.IsLeaf    := 1;
          Tobot.mspDoc    := DoResInT.NRec;
          Tobot.NameGroup := BaseDocInT.NoDoc +
                             if (LongInt(BaseDocInT.dDoc) <> 0,
                                 ' от ' + DateToStr(BaseDocInT.dDoc, 'DD/MM/YYYY'), '');
          // Группировки

          For (i := 1; i <= LenGr; i := i + 1)
            case mGrNomer[i] of
              1: Tobot.Group[i] := KatMCInT.cGroupMC; // Группа МЦ
              2: Tobot.Group[i] := KatMCInT.NRec;     // Матценность
              3: Tobot.Group[i] := DoResInT.cPodr;    // Склад
              4: Tobot.Group[i] := DoResInT.cMol;     // МОЛ
              5: Tobot.Group[i] := DoResInT.cParty;   // Партия
              6: Tobot.Group[i] := BaseDocInT.cOrg;   // Контрагент
              7: Tobot.Group[i] := BaseDocInT.NRec;   // Документ-основание
            end;

          // Количество и средняя цена
          Tobot.Sum[1] := DoResInT.Kol;
          StepMCInfo(SpStepInT.cMCUsl, cBaseVal, DoResInT.cPodr, DoResInT.cMol, DoResInT.cParty);
          Tobot.Sum[2] := AveragePrice;
          Tobot.Sum[3] := SpStepInT.KolSkl; // Выводится только в лист Gal_TblSheet excel-шаблона

          // Сортировка
          Tobot.SortName := DateToStr(BaseDocInT.dDoc, 'YYYYMMDD') + BaseDocInT.NoDoc;

          if (Insert current Tobot <> tsOk)
            {
              StopVisual('', 0);
              Fill_Tobot := FALSE;
              Message('Ошибка добавления в таблицу Tobot. Обратитесь к администратору системы.', Error);
              Exit;
            }

        } // _LOOP DoResInT
  } // _LOOP SpStepInT

  StopVisual('', 0);
}

//******************************************************************************
// Процедуры печати в тектовом формате
// Вставка пробелов в зависимости от порядка группировки
Function PrintSpace(aI: Byte): string;
{
  var spStr: string;  spStr := '.';

  var i: byte; For (i := 1; i <= aI; i := i + 1)
    spStr := spStr + ' ';

  PrintSpace := spStr;
}

//******************************************************************************
// Вывод итогов
// В массиве aGroup - ссылки на уровни группировок
// Печатаем итоги для уровней от Level1 до Level2
Procedure PrintFooter(Level1, Level2: Byte);
{
  var i: byte;
  For (i := Level2; i >= Level1; i := i - 1)
    {
      if (GetFirst FastFirstRow TempDescrFoot where((aGroup[i] == TempDescrFoot.NRec)) <> tsOk)
        Exit;

      frmReserv.PutEventById(feDoLoop, fciReserv_Common_Itog_Grouping);
      frmReserv.Write(PrintSpace(i) + 'Итого по ' + TempDescrFoot.Name);
      frmReserv.Write(TempDescrFoot.Sum[1]);
    }
}

//******************************************************************************

Procedure PrintInText(aRepType: Byte);
var
  FirstLevel, CurLevel, NextLevel, i: byte;
{
  StartNewVisual(vtNumericVisual, vfTimer+vfBreak+vfConfirm, 'Подготовка отчета к печати', 1);

  For(i := 0; i <= 10; i := i + 1)
    aGroup[i] := Comp(0);

  TreePushPos(MainTree);

  // Печать всего отчета
  if (aRepType = 1)
    TreeGetFirstEx(MainTree);

  FirstLevel := TreeLevel(MainTree);
  CurLevel   := FirstLevel;

  frmReserv.Write(if (UserDeskRep.ResWord[2] = 0, 'Резервы', 'Просроченные резервы') +
                  ' по ДО на ' + DateToStr(RepDate, 'DD/MM/YYYY'));
  do
    {
      if (NOT NextVisual)
        {
          StopVisual('', 0);
          Message('Формирование отчета прервано пользователем.', OkButton);
          frmReserv.AbortForm;
          TreePopPos(MainTree);
          RescanPanel(#TempDescr);
          Exit;
        }

      CurLevel := TreeLevel(MainTree);

      // Группировка
      if (TempDescr.isLeaf <> 1)
        {
          // Сохраняем ссылки на уровни группировок, для которых после нужно будет печатать итог
          aGroup[CurLevel] := TempDescr.NRec;
          // Печать группировки
          frmReserv.PutEventById(feDoLoop, fciReserv_Common_Grouping);
          frmReserv.Write(PrintSpace(CurLevel) + TempDescr.Name +
                          if(CurLevel = KatMCGr, ' (' + KatEd.Name + ')', ''));
        }
      // Лист
      else
        {
          frmReserv.PutEventById(feDoLoop, fciReserv_Common_Do_LOOP);
          frmReserv.Write(DoRes.NRec);
          frmReserv.Write(SpStep.NRec);
          frmReserv.Write(BaseDoc.NRec);
          frmReserv.Write(BaseDoc.dDoc);
          frmReserv.Write(BaseDoc.NoDoc);
          frmReserv.Write(KatOrg.Name);
          frmReserv.Write(KatOtpEd.Name);
          frmReserv.Write(KatPodr.Name);
          if (IsValid(#KatMol))
            frmReserv.Write(KatMol.Name);
          else
            frmReserv.Write('(без МОЛ)');
          if (IsValid(#KatParty))
            frmReserv.Write(KatParty.Name);
          else
            frmReserv.Write('(без партии)');
          frmReserv.Write(TempDescr.Sum[1]);
          frmReserv.Write(TempDescr.Sum[2]);
          frmReserv.Write(SpStep.Price);
          frmReserv.Write(if (LongInt(SpStep.SrokRes) <> 0,
                            DateToStr(SpStep.SrokRes, 'DD/MM/YYYY'),
                            ''));
        }

      if (TreeGetNextEx(MainTree))
        {
          // Переход на следующую ветку - печать итогов по предыдущей
          NextLevel := TreeLevel(MainTree);
          if (NOT TreeIsTerminal(MainTree))
          if (NextLevel < CurLevel)
            PrintFooter(if(NextLevel < FirstLevel, FirstLevel, NextLevel), CurLevel - 1);
          // Если отчет по текущей ветке (Alt+P), то запрещаем переходить на следующую
          if ((aRepType = 2) AND (NextLevel <= FirstLevel))
            Break;
        }
      else
        {
          // конец дерева - печать итогов по последней ветке
          PrintFooter(FirstLevel, CurLevel - 1);
          Break;
        }

    } // do
  While TRUE;

  StopVisual('', 0);

  if (NOT frmReserv.Error)
    frmReserv.ShowFile('');
  else
    frmReserv.AbortForm;

  TreePopPos(MainTree);
  RescanPanel(#TempDescr);
}

//******************************************************************************
// Печать специфического отчета с процентным соотношение резерва по группам МЦ и МЦ
// Вывод итогов
// В массиве aGroup - ссылка на уровень группы МЦ
Procedure PrintFooterSpec(aGr: comp; aNameGr: string; GrReserve, GrKolAkt: Double);
{
  if (GetFirst FastFirstRow TempDescrFoot where((aGr == TempDescrFoot.NRec)) <> tsOk)
    Exit;

  frmSpecReserv.PutEventById(feDoLoop, fciReserv_Spec_Itog_Grouping);
  frmSpecReserv.Write(aNameGr);
  frmSpecReserv.Write(TempDescrFoot.Sum[1]);
  frmSpecReserv.Write(GrReserve);
  frmSpecReserv.Write(GrKolAkt);
  frmSpecReserv.Write(GrReserve / GrKolAkt * 100);
}

//******************************************************************************
#include TekOstMC.vpp // текущий остаток в оперконтуре

//******************************************************************************

Procedure PrintInTextSpec;
var
  TotalReserve, TotalKolAkt, aRes, aReserve, aKolAkt: double;
  CurLevel, Position: byte;
  aGr                : comp;
  aNameGr            : string;
{
  StartNewVisual(vtNumericVisual, vfTimer+vfBreak+vfConfirm, 'Подготовка отчета к печати', 1);

  TreePushPos(MainTree);
  TreeGetFirstEx(MainTree);
  CurLevel := TreeLevel(MainTree);
  aRes := TempDescr.Sum[1]; // Итог по всему отчету

  frmSpecReserv.Write(if ( UserDeskRep.ResWord[2] = 0
                         , 'Резервы'
                         , 'Просроченные резервы'
                         ) + ' по ДО на ' + DateToStr(RepDate, 'DD/MM/YYYY'));
  do
    {
      if (NOT NextVisual)
        {
          StopVisual('', 0);
          Message('Формирование отчета прервано пользователем.', OkButton);
          frmSpecReserv.AbortForm;
          TreePopPos(MainTree);
          RescanPanel(#TempDescr);
          Exit;
        }

      CurLevel := TreeLevel(MainTree);
      // Группировка
      if (TempDescr.isLeaf <> 1)
        {
          case CurLevel of
          //------------------------------------------------------------------------------
            1: // Группа МЦ
            {
              // Сохраняем ссылки на уровни группировок, для которых после нужно будет печатать итог
              aGr      := TempDescr.NRec;
              Position := Pos(': ', TempDescr.Name);
              aNameGr  := Trim(SubStr(TempDescr.Name, Position + 1, Length(TempDescr.Name) - Position));
              frmSpecReserv.PutEventById(feDoLoop, fciReserv_Spec_Grouping);
              frmSpecReserv.Write(aNameGr);
              TotalReserve := 0;
              TotalKolAkt  := 0;
            }
          //------------------------------------------------------------------------------
            2: // МЦ
            {
              frmSpecReserv.PutEventById(feDoLoop, fciReserv_Spec_Do_LOOP);
              frmSpecReserv.Write(KatMCGr.NRec);
              Position := Pos(': ', TempDescr.Name);
              frmSpecReserv.Write(SubStr(TempDescr.Name, Position + 1,
                                         Length(TempDescr.Name) - Position));
              frmSpecReserv.Write(KatEd.Name);
              frmSpecReserv.Write(TempDescr.Sum[1]);
              if (IsValid(#TekMC))
                {
                  aReserve := TekMC.Reserve;
                  aKolAkt  := TekOstMC(TekMC.cMC)/*TekMC.KolAkt*/;
                }
              else
                {
                  aReserve := 0;
                  aKolAkt  := 0;
                }

              frmSpecReserv.Write(aReserve);
              frmSpecReserv.Write(aKolAkt);
              frmSpecReserv.Write(aReserve / aKolAkt * 100);
              TotalReserve := TotalReserve + aReserve;
              TotalKolAkt  := TotalKolAkt + aKolAkt;
            }
          end;
        }

      if (TreeGetNextEx(MainTree))
        {
          // Переход на следующую группу МЦ - печать итогов по предыдущей
          CurLevel := TreeLevel(MainTree);
          if (NOT TreeIsTerminal(MainTree))
          if (CurLevel = 1)
            PrintFooterSpec(aGr, aNameGr, TotalReserve, TotalKolAkt);
        }
      else
        {
          // конец дерева - печать итогов по последней ветке
          PrintFooterSpec(aGr, aNameGr, TotalReserve, TotalKolAkt);
          frmSpecReserv.PutEventById(feTrue, fciReserv_Itog_Rep);
          frmSpecReserv.Write(aRes);  // Итог по отчету
          Break;
        }

    } // do
  While TRUE;

  StopVisual('', 0);
  TreePopPos(MainTree);
  RescanPanel(#TempDescr);

  if (NOT frmSpecReserv.Error)
    frmSpecReserv.ShowFile('');
  else
    frmSpecReserv.AbortForm;
}

//******************************************************************************
// Процедура печати в Excel-формате

Procedure RunRep(isCreateXLT: boolean; aRepType: Byte);
var
  DateChanged                    : boolean;
  FirstLevel, NextLevel          : byte;
{
  ID := 'L_BaseDoc\iReserv';

  if (not ReadMyDsk(sXLTFileName, ID, DateChanged))
    set sXLTFileName := TranslatePath('%ClientStartPath%') + 'XLS\' + ID + '.xlt';

  if (Trim(sXLTFileName) = '')
    sXLTFileName := TranslatePath('%StartPath%XLS\' + ID + '.xlt');

  if not pxlrepsetup.checkParam(0, ID, sXLTFileName)
   {
     Runinterface('XlRepSetup', 1, ID, sXLTFileName);
     ReadMyDsk(sXLTFileName, ID, true);
   }

  if (NOT isCreateXLT)
    {
      TreePushPos(MainTree);

      // Ctrl+P - печать всего отчета
      if (aRepType = 1)
        TreeGetFirstEx(MainTree);

      FirstLevel := TreeLevel(MainTree);
    }

  if (NOT isCreateXLT)
    {
      StartNewVisual(vtRotateVisual, vfTimer+vfConfirm, 'Создание отчета по шаблону', 1);
      sXLSFileName := pXL.CreateReport(sXLTFileName, TRUE);
    }
  else
    {
      StartNewVisual(vtRotateVisual, vfTimer+vfConfirm, 'Создание шаблона отчета', 1);
      sXLSFileName := pXL.CreateXLT(sXLTFileName, TRUE);
    }

  iNextVisual('Инициализация переменных Excel-БД');
  // Инициализация переменных Excel-БД (DBVar Constructor)
  pXL.CreateVar(sXLSFileName);
  pXL.SetStringVar('Заголовок_Отчета',
                   if (UserDeskRep.ResWord[2] = 0, 'Резервы', 'Просроченные резервы') +
                   ' по ДО на ' + DateToStr(RepDate, 'DD/MM/YYYY'));
  // Выгрузка информации о фильтрах и переменных отчета
  pXL.SetDateVar  ('Дата_Отчета', Cur_Date);
  if ((UserDeskRep.ResWord[1] AND 1) = 1)
    pXL.SetStringVar('Фильтр_Группа_МЦ', fGrMC);

  if ((UserDeskRep.ResWord[1] AND 2) = 2)
    pXL.SetStringVar('Фильтр_МЦ', fMC);

  if ((UserDeskRep.ResWord[1] AND 4) = 4)
    pXL.SetStringVar('Фильтр_Склад', fSklad);

  if ((UserDeskRep.ResWord[1] AND 8) = 8)
    pXL.SetStringVar('Фильтр_МОЛ', fMOL);

  if ((UserDeskRep.ResWord[1] AND 16) = 16)
    pXL.SetStringVar('Фильтр_Партия', fParty);

  if ((UserDeskRep.ResWord[1] AND 32) = 32)
    pXL.SetStringVar('Фильтр_Контрагент', fKontr);

  if ((UserDeskRep.ResWord[1] AND 64) = 64)
    pXL.SetStringVar('Фильтр_Дескриптор', fDescr);

  if ((UserDeskRep.ResWord[1] AND 128) = 128)
    pXL.SetStringVar('Фильтр_Группа_дескрипторов', fDesGr);

  if ((UserDeskRep.ResWord[1] AND 256) = 256)
    pXL.SetStringVar('Фильтр_ДО', fDO);

  // Все необходимые пост-действия по "публикации" переменных (DBVar Destructor)
  pXL.PublishVar;

  iNextVisual('Определение таблицы отчета');
  // Определение таблицы отчета (DBTbl Constructor)
  pXL.CreateTbls(sXLSFileName);
  pXL.CreateTbl('iReserv');
  // Объявление полей таблицы
  pXL.CreateTblFld('ДО_Дата');
  pXL.CreateTblFld('ДО_Номер');
  pXL.CreateTblFld('Контрагент');
  pXL.CreateTblFld('Группа_МЦ');
  pXL.CreateTblFld('МЦ');
  pXL.CreateTblFld('Единица_измерения');
  pXL.CreateTblFld('Склад');
  pXL.CreateTblFld('МОЛ');
  pXL.CreateTblFld('Партия');
  pXL.CreateTblFld('Количество');
  pXL.CreateTblFld('Кол_спецификации');
  pXL.CreateTblFld('Средняя_цена');
  pXL.CreateTblFld('Цена_МЦ');
  pXL.CreateTblFld('Окончание_резерва');
  StopVisual('', 0);

  // Выгрузка полей таблицы
  if (NOT isCreateXLT)
    {
      StartNewVisual(vtNumericVisual, vfTimer+vfBreak+vfConfirm, 'Выгрузка данных', 1);
      do
        {
          if (NOT NextVisual)
            {
              StopVisual('', 0);
              Message('Формирование отчета прервано пользователем.', OkButton);
              pXL.DisConnectExcel;
              TreePopPos(MainTree);
              RescanPanel(#TempDescr);
              Exit;
            }

          // Лист
          if (TempDescr.isLeaf = 1)
            {
              pXL.ClearTblBuffer;
              pXL.SetTblDateFldValue  ('ДО_Дата'          , BaseDoc.dDoc);
              pXL.SetTblStringFldValue('ДО_Номер'         , '№ ' + BaseDoc.NoDoc);
              pXL.SetTblStringFldValue('Контрагент'       , KatOrg.Name);
              pXL.SetTblStringFldValue('Группа_МЦ'        , if (IsValid(#GroupMC), GroupMC.Name, ''));
              pXL.SetTblStringFldValue('МЦ'               , KatMC.Name);
              pXL.SetTblStringFldValue('Единица_измерения', KatOtpEd.Name);
              pXL.SetTblStringFldValue('Склад'            , KatPodr.Name);
              pXL.SetTblStringFldValue('МОЛ'              , if (IsValid(#KatMol), KatMol.Name, '(без МОЛ)'));
              pXL.SetTblStringFldValue('Партия'           , if (IsValid(#KatParty), KatParty.Name, '(без партии)'));
              pXL.SetTblNumberFldValue('Количество'       , TempDescr.Sum[1]);
              pXL.SetTblNumberFldValue('Кол_спецификации' , TempDescr.Sum[3]);
              pXL.SetTblNumberFldValue('Средняя_цена'     , TempDescr.Sum[2]);
              pXL.SetTblNumberFldValue('Цена_МЦ'          , SpStep.Price);
              pXL.SetTblDateFldValue  ('Окончание_резерва', SpStep.SrokRes);
              pXL.InsTblRow;
            }

          if (TreeGetNextEx(MainTree))
            {
              // Если отчет по текущей ветке (Alt+P), то запрещаем переходить на следующую
              NextLevel := TreeLevel(MainTree);
              if ((aRepType = 2) AND (NextLevel <= FirstLevel))
                Break;
            }
          else
            Break;

        }
      While TRUE;
      StopVisual('', 0);
    }

  StartNewVisual(vtRotateVisual, vfTimer+vfConfirm, 'Публикация данных в Excel', 1);
  // Все необходимые пост-действия по "публикации" таблицы (DBTbl Destructor)
  pXL.PublishTbl('iReserv');
  iNextVisual('Формирование отчета по заданному шаблону');
  pXL.LoadReport(sXLSFileName);
  pXL.DisConnectExcel;
  StopVisual('', 0);

  if (NOT isCreateXLT)
    {
      TreePopPos(MainTree);
      RescanPanel(#TempDescr);
    }

  SaveMyDsk(sXLTFileName, 'iReserv_sXLTFileName');
}

//******************************************************************************
// Удаление настройки, которая была создана для отчета по конкретному ДО

Procedure DeleteCurrUserDeskRep;
{
  if (pBaseDoc <> 0)
    Delete current UserDeskRep;
}

//******************************************************************************

Panel pReservDO;
  Table TempDescr;

Tree trTmpTree('Ctrl+P - Печать всего отчета, Alt+P - Печать с текущего уровня', , sci1EscTree);

Fields
//------------------------------------------------------------------------------
  TempDescr.Name
                #3'Документ'     ('Номер и дата ДО', , )
                : [35], Protect;
//------------------------------------------------------------------------------
  KatMC.Name
                #3'МЦ'           ('МЦ', , )
                : [15], Protect, NoDel;
//------------------------------------------------------------------------------
  KatOrg.Name
                #3'Контрагент'   ('Контрагент', , )
                : [15], Protect, NoDel;
//------------------------------------------------------------------------------
  KatOtpEd.Name
                #3'ЕдИзм'        ('Единица измерения', , )
                :  [5], Protect, NoDel;
//------------------------------------------------------------------------------
  TempDescr.Sum[1]
                #3'Количество'   ('Количество', , )
                : [15], [prSignsInKol], Protect;
//------------------------------------------------------------------------------
  TempAveragePrice
                #3'Средняя цена' ('Средняя цена', , )
                : [15], Protect, Right;
//------------------------------------------------------------------------------
  TempMCPrice
                #3'Цена МЦ'     ('Цена МЦ по спецификации ДО', , )
                : [15], Protect, Right;
//------------------------------------------------------------------------------
  TempSrokRes
                #3'Окончание'    ('Срок окончания действия резерва', , )
                : [10], Protect;
//------------------------------------------------------------------------------
end;  // Tree

//******************************************************************************

HandleEvent

cmTreeTop:
  CurGroup := 0;

cmTreeUp:
  CurGroup := TempDescr.cGroup;

cmTreeDown:
  CurGroup := TempDescr.NRec;

cmTreeNodeType:
  if (TempDescr.isLeaf = 1)
    TreeSetNodeType(trTmpTree, 2);
end;  // HandleEvent
end;  // Panel

//******************************************************************************

HandleEvent

cmInit:
  {
    var nParam: longint;
    var i: byte;

    if (wGetTune('Reserv.PrSchSklad') <> 2)
      {
        ShowTune('Данный отчет формируется при резервировании МЦ по складскому разрезу!', 'Reserv.PrSchSklad');
        Abort;
        Exit;
      }

    pNRec    := Comp(0);
    CurCode  := cgReport_90;
    MainTree := trTmpTree;
    cBaseVal := coGetTune('BaseCurrency');

    if (pBaseDoc = 0)
      {
        if (RunInterface(iReservSetup, pNRec) <> cmDefault)
          {
            Abort;
            Exit;
          }
      }
    // Отчет по конкретному ДО (pBaseDoc)
    else
      {
        ResetBounds(#BaseDoc);
        ResetBounds(#StepDoc);
        ResetBounds(#UserDeskRep);

        if (GetFirst BaseDoc where((pBaseDoc == BaseDoc.NRec)) <> tsOk)
          {
            Abort;
            Exit;
          }

        if (GetFirst StepDoc where((BaseDoc.NRec == StepDoc.cBaseDoc)) <> tsOk)
          {
            Abort;
            Exit;
          }

        ClearBuffer(#UserDeskRep);
        UserDeskRep.OwnName := UserName;
        UserDeskRep.NRep    := CurCode;
        UserDeskRep.dRep    := Cur_Date;
        UserDeskRep.RepName := 'Отчет по ДО ' + f_sNumDate(BaseDoc.NoDoc, BaseDoc.dDoc);
        UserDeskRep.ResDate[1] := BaseDoc.dDoc;
        UserDeskRep.ResWord[1] := 256; // Фильтр по ДО
        UserDeskRep.ResComp[9] := StepDoc.NRec;
        Insert current UserDeskRep;

        Set pNRec := UserDeskRep.NRec;

        SetBounds(#UserDeskRep);
        SetBounds(#StepDoc);
        SetBounds(#BaseDoc);
      }

    if (pNRec = Comp(0))
      {
        Abort;
        Exit;
      }

    RepDate := if(UserDeskRep.ResWord[3] = 1, Cur_Date, UserDeskRep.ResDate[1]);
    LenGr   := 0;  // Количество уровней группировки
    KatMCGr := -1; // Группировка по МЦ, для вывода при печати единицы измерения

    if (GetFirst RepGrLst = tsOk)
      _LOOP RepGrOne
        {
          if (LenGr > 10)
            Break;

          nParam := 0;
          if (RepGrOne.ResWord[1] = 0)
            nParam := nParam OR tsNoExpand;

          LenGr            := LenGr + 1;
          mGrNomer[LenGr]  := RepGroup.Nomer;
          mTable[LenGr]    := RepGroup.wTable;
          mParam[LenGr]    := nParam;
          mPrefix[LenGr]   := RepGrOne.ResName[1];
          mGrSort[LenGr]   := RepGrSrt.Nomer;
          mLevelNum[LenGr] := RepGrOne.ResWord[2];
          if (RepGroup.wTable = coKatMC)
            KatMCGr := LenGr;
        }

    InitMCInfo(RepDate);

    if (NOT Fill_Tobot)
      {
        DoneMCInfo;
        DeleteCurrUserDeskRep;
        Abort;
        Exit;
      }

    if (GetFirst Tobot <> tsOk)
      {
        DoneMCInfo;
        DeleteCurrUserDeskRep;
        Message('Отчет не содержит ни одного документа');
        Abort;
        Exit;
      }

    cRep := InitTreeBuilder(#Tobot);
    if (cRep <> 0)
      {
        SetTempIndex(cRep, Byte(3));

        For (i := 1; i <= LenGr; i := i + 1)
          TuneLevel(cRep           // Ссылка на дерево
                   , i             // Номер уровня
                   , mTable[i]     // Код таблицы
                   , mParam[i]     // Параметры
                   , mPrefix[i]    // Префикс
                   , 1             // Код иерархии
                   , mGrSort[i]    // Сортировка
                   , mLevelNum[i]  // Кол-во раскрываемых уровней
                   );

        SetReportStyles(cRep, rsNodeReport, UserDeskRep.RepName);

        if (NOT BuildTunedTree(cRep, CurCode))
          {
            DoneMCInfo;
            DeleteCurrUserDeskRep;
            Abort;
            Exit;
          }
      }
    else
      {
        DoneMCInfo;
        DeleteCurrUserDeskRep;
        Message('Ошибка иерархического построителя.', Error);
        Abort;
        Exit;
      }

    DoneMCInfo;
  }

cmPrintDoc:
  RunRep(FALSE, 1);

cmPlansNo:
  RunRep(FALSE, 2);

cmValue1:
  PrintInText(1);

cmValue2:
  PrintInText(2);

cmValue3:
  PrintInTextSpec;

cmValue14:
{
  ID := 'L_BaseDoc\iReserv';

  if (not ReadMyDsk(sXLTFileName, ID, True))
    set sXLTFileName := TranslatePath('%ClientStartPath%') + 'XLS\' + ID + '.xlt';

  Runinterface('XlRepSetup', 1, ID, sXLTFileName);
  ReadMyDsk(sXLTFileName, ID, true);
}

cmHotKeys:
  // Если гр-ка по группе МЦ и МЦ, то возможность просмотра отчета с процентным соотношением
  if ((mTable[1] = coGroupMC) AND (mTable[2] = coKatMC))
    PutHotCommand(RunMenu('mnuPrintReportResevrDOPlus'));
  else
    PutHotCommand(RunMenu('mnuPrintReportResevrDO'));

cmDone:
  DeleteCurrUserDeskRep;

end;  // HandleEvent
End. // Interface

//******************************************************************************
//******************************************************************************
//******************************************************************************

// Контектсное меню
#doc
Локальное меню главного окна интерфейса <link Interface L_BaseDoc::iReserv>L_BaseDoc::iReserv - Резерв по ДО</link>
#end
mnuPrintReportResevrDO Menu
{
  = 'Печать отчетов в формате Excel', 'Печать отчетов в формате Excel', , scMenuCtx;
  {
    - 'По всему дереву', cmPrintDoc, 'Распечатать отчет по всем уровням иерархии', , 'Ctrl+P', kbCtrlP;
    - 'По ветке',        cmPlansNo,  'Распечатать отчет для текущего уровня иерархии', , 'Alt+P', kbAltP;

  }
  = 'Печать отчетов текстовом формате', 'Печать отчетов текстовом формате', , scMenuCtx;
  {
    - 'По всему дереву', cmValue1, 'Распечатать отчет по всем уровням иерархии', , , ;
    - 'По ветке',        cmValue2, 'Распечатать отчет для текущего уровня иерархии', , , ;
  }
  - 'Настройка Excel шаблона', cmValue14, 'Настройка Excel шаблона', , , ;
}
//******************************************************************************

mnuPrintReportResevrDOPlus Menu
{
  = 'Печать отчетов в формате Excel', 'Печать отчетов в формате Excel', , scMenuCtx;
  {
    - 'По всему дереву', cmPrintDoc, 'Распечатать отчет по всем уровням иерархии', , 'Ctrl+P', kbCtrlP;
    - 'По ветке',        cmPlansNo,  'Распечатать отчет для текущего уровня иерархии', , 'Alt+P', kbAltP;

  }
  = 'Печать отчетов текстовом формате', 'Печать отчетов текстовом формате', , scMenuCtx;
  {
    - 'По всему дереву', cmValue1, 'Распечатать отчет по всем уровням иерархии', , , ;
    - 'По ветке',        cmValue2, 'Распечатать отчет для текущего уровня иерархии', , , ;
    - 'В процентном соотношении', cmValue3,
      'Распечатать отчет с процентным соотношение резерва по группам МЦ и МЦ', , , ;
  }
  - 'Настройка Excel шаблона', cmValue14, 'Настройка Excel шаблона', , , ;
}

//******************************************************************************
