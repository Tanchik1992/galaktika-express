//******************************************************************************
//                                                      (c) корпорация Галактика
// Галактика 7.12 - Логистика
//
//******************************************************************************

//******************************************************************************
#include tgFpVal.vih
#include xlReport.Vih  //Excel
#include oEdIzm.vih
//******************************************************************************

Interface iRepSAkt 'Отчет по состоянию актов о приемке материалов' ( , hcBCTO_Inter_AktPriemki, )EscClose, Cyan;
  Show at (,,100,20);

Const
  CurCode = 115;
end;
//******************************************************************************
Var pxlrepsetup : xlrepsetup;
//******************************************************************************

Create View
Var
  cNastr
, CurGroup  : comp;

  NumPick
, Len1
, Len2
, Len3      : Word;

  cRep      : LongInt;

  ID
, sXLSFileName
, sXLTFileName : string;

  pXL       : XLSRepBuilder;      // Excel

As select
  *
from
  KatSopr
, SpSopr
, TempDescr
, TempDescr TempDescr2
, UserDeskRep
, TempIer
, Tobot
, Tobot Tobot2
, RepGrLst
, SpecZatr
, RepGrOne
, RepGroup
, RepGrSrt
, RepGrSrt RepGrSrt2
, KatMC
, KatMC KatMC2
, Dogovor
, PickRep
, SoprHoz
where
((
      cNastr                  == UserDeskRep.NRec
  AND KatSopr.NRec            == SpSopr.cSopr
  AND word(1)                 == SpSopr.PrMC
  AND SpSopr.cMcUsl           == KatMC.NRec
  AND KatSopr.VidSopr         == SoprHoz.TipDoc
  AND KatSopr.NRec            == SoprHoz.cSoprDoc
  AND SoprHoz.TipDoc          == Oborot.TiDk
  AND SoprHoz.cSoprDoc        == Oborot.cSoprDoc

  AND TempDescr.NRec          == TempIer.cGroup
  AND TempDescr.cRecKat       == Tobot2.NRec
  AND Tobot2.Cut[6]           == KatMC2.NRec

  AND UserDeskRep.ResComp[40] == RepGrLst.NRec
  AND RepGrLst.NRec           == RepGrOne.cRepGrLst
  AND RepGrOne.cRec           == RepGroup.NRec
  AND RepGrOne.cRec           == RepGrSrt.NRec         // сорт просто
  AND RepGrOne.ResComp[1]     == RepGrSrt2.NRec        // сорт.в группе
  AND CurCode                 == Tobot.Code
))

bounds byDate =
        word(115)              ==  KatSopr.VidSopr
    AND UserDeskRep.ResDate[1] <<= KatSopr.dSopr
    AND UserDeskRep.ResDate[2] >>= KatSopr.dSopr

bounds byTree =
        CurCode      == TempDescr.Code
    AND CurGroup     == TempDescr.cGroup
;

Var
   //'Группировка договоров
   mLevel    : Array [10] of Word;
   mTable    : Array [10] of Word;
   mPrefix   : Array [10] of String;
   mHierar   : Array [10] of Word;
   mKol      : Array [10] of Word;
   mGrupSort : Array [10] of Word;
   mPrint    : Array [10] of Word;
   mSpec     : Array [10] of Word;


//************************************************************************

Panel p1

Tree trTmpTree('',,sci1EscTree);
  Show at (,,,);
  Table TempDescr;
Fields
  TempDescr.Name   #3'Аналитика' ('',,) : [30], Protect;
  TempDescr.Sum[1] #3'Сумма',
                   #3'оприходования'    : [16.2,'\2p[|-]366`666`666`666.88'], Protect, LessNull;
  TempDescr.Sum[2] #3'Закрыто',
                   #3'накладными'       : [16.2,'\2p[|-]366`666`666`666.88'], Protect, LessNull;
  TempDescr.Sum[3] #3'Не закрыто',
                   #3'накладными'       : [16.2,'\2p[|-]366`666`666`666.88'], Protect, LessNull;
  TempDescr.Sum[4] #3'Сумма',
                   #3'проводок'         : [16.2,'\2p[|-]366`666`666`666.88'], Protect, LessNull;
End;
end;

Procedure PrintDocuments;
var
  i      : word;
  Otstup : string;
{
#ifdef Gal8_1
  ID := 'L_SoprDoc\OtchAkt';
#else
  ID := 'oper\OtchAkt';
#end

  if (UserDeskRep.ResName[5] = '')
    {
      if (not ReadMyDsk(sXLTFileName,ID,true))
#ifdef Atl51
        set sXLTFileName := TranslatePath('%ClientStartPath%') + 'XLS\' + ID + '.xlt';
#else
        Set sXLTFileName := StartPathName + 'XLS\' + ID + '.xlt';
#endif
    }
  else
    set sXLTFileName := UserDeskRep.ResName[5];

  if not pxlrepsetup.checkParam(0,ID,sXLTFileName)
    runinterface('xlrepsetup',1,ID,sXLTFileName);

  StartNewVisual(vtRotateVisual, vfTimer, Chr(3) + 'Формирование отчета...', 1);

!  Set sXLSFileName := pXL.CreateXLT(sXLTFileName, True);
  Set sXLSFileName := pXL.CreateReport(sXLTFileName, True);

  pXL.CreateVar(sXLSFileName);
  pXL.SetStringVar('CFH', CommonFormHeader);
  pXL.SetStringVar('CurDate', DateToStr(Cur_Date, 'DD/MM/YYYY'));
  pXL.SetStringVar('bDate'  , DateToStr(UserDeskRep.ResDate[1], 'DD/MM/YYYY'));
  pXL.SetStringVar('eDate'  , DateToStr(UserDeskRep.ResDate[2], 'DD/MM/YYYY'));
  pXL.PublishVar;  // Excel

  pXL.CreateTbls(sXLSFileName);
  pXL.CreateTbl('Akt');
  pXL.CreateTblFld('Level');
  pXL.CreateTblFld('Analit');
  pXL.CreateTblFld('PID');
  pXL.CreateTblFld('SummaO');
  pXL.CreateTblFld('SummaNF');
  pXL.CreateTblFld('SummaF');
  pXL.CreateTblFld('SummaP');

  TreePushPos(trTmpTree);

  if (TreeGetFirstEx(trTmpTree))
    do
      {
        Otstup := '';

        for (i := 1; i <= TempDescr.Level; i := i + 1)
          Otstup := Otstup + '    ';

        pXL.ClearTblBuffer;
        pXL.SetTblStringFldValue('Level'  , String(TreeLevel(trTmpTree)));
        pXL.SetTblStringFldValue('Analit' , Otstup + TempDescr.Name);
        pXL.SetTblStringFldValue('PID'    , if(TempDescr.isLeaf = 1, if(isValid(#KatMC2), KatMC2.BarKod, ''), ''));
        pXL.SetTblNumberFldValue('SummaO' , TempDescr.Sum[1]);
        pXL.SetTblNumberFldValue('SummaNF', TempDescr.Sum[3]);
        pXL.SetTblNumberFldValue('SummaF' , TempDescr.Sum[2]);
        pXL.SetTblNumberFldValue('SummaP' , TempDescr.Sum[4]);
        pXL.InsTblRow;
      }
    while TreeGetNextEx(trTmpTree) AND NextVisual

  TreePopPos(trTmpTree);

  pXL.PublishTbl('Akt');
  pXL.LoadReport(sXLSFileName);

  StopVisual('', 0);

  pXL.DisConnectExcel;

  ReScanPanel(#TempDescr);
  ReReadrecord(#TempDescr);
}

TableEvent Table TempDescr
cmTreeTop      : CurGroup := 0;
cmTreeUp       : CurGroup := TempDescr.cGroup;
cmTreeDown     : CurGroup := TempDescr.NRec;
cmTreeNodeType :   if ( TempDescr.IsLeaf = 1 )
    TreeSetNodeType(trTmpTree, ntfText);
end;

//************************************************************************
//
Function SumSpAkt : double;
{
  SumSpAkt := SpSopr.KolFact * SpSopr.Price + if (KatSopr.VhodNal = 1, 0, SpSopr.SumNDS);
}

//************************************************************************
//
Function SumZakr : double;
var
  Kol0, NDS0 : double;
{
  Kol0 := 0;
  NDS0 := SpSopr.SumNDS / SpSopr.KolFact;

  _LOOP SpecZatr where ((SpSopr.NRec == SpecZatr.cUKS))
    if (SpecZatr.coTable = 0)
      Kol0 := Kol0 + double(SpecZatr.cSpec) / fEdIzm.GetKoefOtpEd(SpSopr.cOtpEd);

  SumZakr := 0.000001 * Kol0 * (SpSopr.Price + if (KatSopr.VhodNal = 1, 0, NDS0));
}
//************************************************************************
//
Function GetOborot : double;
{
  GetOborot := 0;

  _LOOP Oborot
    if ((Oborot.TblOs[1] = cgKau_KatMC AND Oborot.KauOs[1] = SpSopr.cMcUsl)
     OR (Oborot.TblOs[2] = cgKau_KatMC AND Oborot.KauOs[2] = SpSopr.cMcUsl)
     OR (Oborot.TblOs[3] = cgKau_KatMC AND Oborot.KauOs[3] = SpSopr.cMcUsl)
     OR (Oborot.TblOs[4] = cgKau_KatMC AND Oborot.KauOs[4] = SpSopr.cMcUsl)
     OR (Oborot.TblOs[5] = cgKau_KatMC AND Oborot.KauOs[5] = SpSopr.cMcUsl)
     OR (Oborot.TblOs[6] = cgKau_KatMC AND Oborot.KauOs[6] = SpSopr.cMcUsl)
     OR (Oborot.TblKs[1] = cgKau_KatMC AND Oborot.KauKs[1] = SpSopr.cMcUsl)
     OR (Oborot.TblKs[2] = cgKau_KatMC AND Oborot.KauKs[2] = SpSopr.cMcUsl)
     OR (Oborot.TblKs[3] = cgKau_KatMC AND Oborot.KauKs[3] = SpSopr.cMcUsl)
     OR (Oborot.TblKs[4] = cgKau_KatMC AND Oborot.KauKs[4] = SpSopr.cMcUsl)
     OR (Oborot.TblKs[5] = cgKau_KatMC AND Oborot.KauKs[5] = SpSopr.cMcUsl)
     OR (Oborot.TblKs[6] = cgKau_KatMC AND Oborot.KauKs[6] = SpSopr.cMcUsl))
      GetOborot := GetOborot + Oborot.SumOb;
}
//************************************************************************
//
Function ChkFilter : boolean;
{
  ChkFilter := FALSE;

  // фильтр по контрагенту
  if ((UserDeskRep.ResWord[3] and 1) = 1)
    {
      // единичный фильтр
      if (UserDeskRep.ResComp[7] <> Comp(0))
        {
          if (UserDeskRep.ResComp[7] <> KatSopr.cOrgBase )
            Exit;
        }
      // множественный фильтр
      else
        {
          if (GetFirst PickRep where ((UserName                == PickRep.OwnName      and
                                       UserDeskRep.NRec        == PickRep.cUserDeskRep and
                                       UserDeskRep.ResWord[17] == PickRep.wList        and
                                       KatSopr.cOrgBase        == PickRep.cRec )) <> tsOk)
            Exit;
        }
    }

  // фильтр по мол
  if ((UserDeskRep.ResWord[3] and 8) = 8)
    {
      // единичный фильтр
      if (UserDeskRep.ResComp[5] <> Comp(0))
        {
          if (UserDeskRep.ResComp[5] <> KatSopr.cMolTo )
            Exit;
        }
      // множественный фильтр
      else
        {
          if (GetFirst PickRep where ((UserName                == PickRep.OwnName      and
                                       UserDeskRep.NRec        == PickRep.cUserDeskRep and
                                       UserDeskRep.ResWord[15] == PickRep.wList        and
                                       KatSopr.cMolTo          == PickRep.cRec )) <> tsOk)
            Exit;
        }
    }

  // фильтр по складу
  if ((UserDeskRep.ResWord[3] and 4) = 4)
    {
      // единичный фильтр
      if (UserDeskRep.ResComp[6] <> Comp(0))
        {
          if (UserDeskRep.ResComp[6] <> KatSopr.cPodrTo )
            Exit;
        }
      // множественный фильтр
      else
        {
          if (GetFirst PickRep where ((UserName                == PickRep.OwnName      and
                                       UserDeskRep.NRec        == PickRep.cUserDeskRep and
                                       UserDeskRep.ResWord[16] == PickRep.wList        and
                                       KatSopr.cPodrTo         == PickRep.cRec )) <> tsOk)
            Exit;
        }
    }

  // Фильтр по договорам
  if ((UserDeskRep.ResWord[3] and 2) = 2)
    if (UserDeskRep.ResComp[8] <> Comp(0))
      {
        if (GetFirst Dogovor where ((UserDeskRep.ResComp[8] == Dogovor.NRec)) = tsOk )
          if (Dogovor.TiDk = word(400))
            {
              if (UserDeskRep.ResComp[8] <> KatSopr.cDogovor )
                Exit;
            }
          else
            if (UserDeskRep.ResComp[8] <> KatSopr.cAppDogovor )
              Exit;
      }
    else
      {
        var cDogS : comp; cDogS := comp(0);

        cDogS := if (KatSopr.cAppDogovor <> comp(0), KatSopr.cAppDogovor,
                   if (KatSopr.cDogovor <> comp(0), KatSopr.cDogovor, comp(0)));

        if (cDogS = comp(0))
          Exit;

        if (GetFirst PickRep where ((UserName                == PickRep.OwnName      and
                                     UserDeskRep.NRec        == PickRep.cUserDeskRep and
                                     UserDeskRep.ResWord[18] == PickRep.wList        and
                                     cDogS                   == PickRep.cRec )) <> tsOk)
          Exit;
      }

  ChkFilter := TRUE;
}

//************************************************************************
// Выгрузка в Tobot
//
Function FillTobot : Boolean;
var i : longint;
{
  FillTobot := True;

  if ( Delete Safe Tobot <> tsOk )
    {
      FillTobot := False
      Message(''#3'Ошибка удаления в таблице Tobot. Обратитесь к администратору системы.', Error);
      Exit;
    }

  ResetBounds(#TempDescr);
  ResetBounds(#TempIer);

  if ( Delete TempDescr Where (( CurCode == TempDescr.Code )) <> tsOk )
    {
      FillTobot := False;
      Message(''#3'Ошибка удаления в таблице TempDescr. Обратитесь к администратору системы.', Error);
      Exit;
    }

  if ( Delete TempIer Where (( CurCode == TempIer.Code )) <> tsOk )
    {
      FillTobot := False;
      Message(''#3'Ошибка удаления в таблице TempIer. Обратитесь к администратору системы.', Error);
      Exit;
    }

  SetBounds(#TempDescr);
  SetBounds(#TempIer);

  StartNewVisual(vtNumericVisual, vfTimer+vfBreak+vfConfirm, ''#3'Отбор документов для отчета', 1);
  oValFunc.InitVal;

  _LOOP KatSopr
    if (ChkFilter)
      _LOOP SpSopr
        {
          ClearBuffer(#Tobot);
          Tobot.IsLeaf := 1;
          Tobot.mspDoc := SpSopr.NRec;

          Tobot.NameGroup := KatMC.Name;
          //'Группировка договоров
          For( i:=1; i<Len1; i:=i+1 )
            {
              Case mLevel[i] of
                1 : Tobot.Group[i] := KatSopr.cOrgBase;
                2 : Tobot.Group[i] := if (KatSopr.cAppDogovor <> comp(0), KatSopr.cAppDogovor, KatSopr.cDogovor);
                3 : Tobot.Group[i] := KatSopr.cPodrTo;
                4 : Tobot.Group[i] := KatSopr.cMolTo;
                5 : Tobot.Group[i] := KatSopr.NRec;
                6 : Tobot.Group[i] := SpSopr.cMcUsl;
              End;
            }
          Tobot.Group[Len1] := SpSopr.NRec;

          Tobot.Cut[1] := KatSopr.cOrgBase;
          Tobot.Cut[2] := KatSopr.cDogovor;
          Tobot.Cut[3] := KatSopr.cPodrTo;
          Tobot.Cut[4] := KatSopr.cMolTo;
          Tobot.Cut[5] := KatSopr.NRec;
          Tobot.Cut[6] := SpSopr.cMcUsl;

          Tobot.Sum[1] := SumSpAkt;
          Tobot.Sum[2] := SumZakr;
          Tobot.Sum[3] := Tobot.Sum[1] - Tobot.Sum[2];
          Tobot.Sum[4] := GetOborot;

          if (
               ( ABS(Tobot.Sum[1]) < 0.0000001 )
              AND
               ( ABS(Tobot.Sum[2]) < 0.0000001 )
              AND
               ( ABS(Tobot.Sum[3]) < 0.0000001 )
              AND
               ( ABS(Tobot.Sum[4]) < 0.0000001 )
             )
            Continue;

          if (insert current Tobot <> tsOk)
            {
              oValFunc.DoneVal;
              FillTobot := False;
              StopVisual('',0);
              Message(''#3'Ошибка добавления в таблицу Tobot. Обратитесь к администратору системы.', Error);
              Exit;
            }

          if ( Not NextVisual )
            {
              FillTobot := False;
              Break;
            }
        }

  oValFunc.DoneVal;
  StopVisual('',0);
}
//************************************************************************

Function MakeTree : boolean;
{
  MakeTree := FALSE;
  CurGroup := 0;

  Var i : Word;

  Len1  := 0;  // реальное число уровней группировки
  Len2  := 0;  // реальное число уровней сортировки
  Len3  := 0;  // реальное число уровней сортировки

  var bGMC : boolean; bGMC := FALSE;

  // Группировка
  if (GetFirst RepGrLst = tsOk)
    for (i:=GetFirst RepGrOne; ((i=tsOk)and(Len1<6)); i:=GetNext RepGrOne)
      {
        Len1            := Len1 + 1;
        mLevel[Len1]    := RepGroup.Nomer;
        mTable[Len1]    := RepGroup.wTable;
        mPrefix[Len1]   := RepGrOne.ResName[1];
        mHierar[Len1]   := RepGrOne.ResWord[1];
        mKol[Len1]      := RepGrOne.ResWord[2];
        mGrupSort[Len1] := RepGrSrt2.Nomer;
        mPrint[Len1]    := RepGrOne.ResWord[3];

        if (RepGroup.wTable = coKatMC)
          bGMC := TRUE;
      }

  if (NOT bGMC)
    {
        Len1            := Len1 + 1;
        mLevel[Len1]    := 6;
        mTable[Len1]    := coKatMC;
        mGrupSort[Len1] := 0;
    }

  Len1 := Len1 + 1;

  if (FillTobot)
    {
      if (GetFirst Tobot <> tsOk)
        {
          Message(''#3'Отчет не содержит ни одного документа');
          Abort;
          Exit;
        }
      else
        MakeTree := TRUE;

      cRep := InitTreeBuilder(#Tobot);

      if (cRep <> 0)
        {
          SetTempIndex(cRep, Byte(3));

          var nParam : LongInt;

          for (i:=1; i<Len1; i:=i+1)
            {
              nParam := 0;

              if (mHierar[i] = 0)
                nParam := nParam or tsNoExpand;

              if (mPrefix[i] = '')
                nParam := nParam or tsNoPrefix;

              if (i = Len1 - 1)
                TuneStructName( cRep, i, 1);

              TuneLevel(cRep, i, mTable[i], nParam, mPrefix[i], 1, mGrupSort[i], mKol[i]);
            }

          if (not BuildTunedTree(cRep, CurCode))
            {
              Abort;
              Exit;
            }

          ResetBounds(#TempDescr);

          delete TempDescr where ((  CurCode == TempDescr.Code
                                     and word(1) == TempDescr.IsLeaf ));

          // проход для установления значков
          _loop TempDescr where (( CurCode == TempDescr.Code ))
            {
              if ( GetFirst FastFirstRow TempDescr2 where ((  CurCode        == TempDescr2.Code
                                                          and TempDescr.nRec == TempDescr2.cGroup )) = tsOk )
                TempDescr.IsLeaf := 0;
              else
                TempDescr.IsLeaf := 1;

              Update current TempDescr;
            }

          SetBounds(#TempDescr);
          RescanPanel(#TempDescr);
        }
      else
        {
          Message(''#3'Ошибка иерархического построителя.', Error);
          MakeTree := FALSE;
          Abort;
          Exit;
        }
    }
  else
    {
      MakeTree := FALSE;
      Abort;
      Exit;
    }

}

HandleEvent
cmInit:
  {
    cNastr := comp(0);
    CurGroup := 0;

    if NOT BoundActive(tbbyTree)
      AddBounds(tbbyTree)

    if NOT BoundActive(tbbyDate)
      AddBounds(tbbyDate)

    if (RunInterface('iNastRep', cgReport_4115, cNastr) <> cmCancel)
      {
        if GetFirst UserDeskRep <> tsOk
          {
            Abort;
            Exit;
          }

        if NOT MakeTree
          {
            Abort;
            Exit;
          }
      }
    else
      {
        Abort;
        Exit;
      }
  }

cmPrintDoc:
  Printdocuments;

cmHotKeys:
  PutHotCommand(RunMenu('mnuRepAkt'));

End; // HandleEvent
end.

//***************************************************************************
mnuRepAkt Menu
{
- 'Печать отчета', cmPrintDoc, 'Печать отчета', , 'Сtrl+P', kbCtrlP, sci1Esc;
}
