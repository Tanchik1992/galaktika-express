/*
 ╔═══════════════════════════════════════════════════════════════════════════╗
 ║ Назначение    : Фильтры по документу                                      ║
 ║ Параметры     : TypeSopr - вид документа                                  ║
 ║                 pFlt     - фильтр                                         ║
 ╚═══════════════════════════════════════════════════════════════════════════╝
*/

#include rundsel.vih

//******************************************************************************

#doc
Назначение:
  Фильтры сопроводительных документов

Параметры:
  TypeSopr - вид документа
  pFlt     - фильтр
#end

//******************************************************************************

Interface FltInDoc 'Установить/Снять фильтр' (,hcLok_Filtr_Doc,) DoAccept, EscClose, Gray;
 Show at (27,6,95,31);
#include SoprType.vpp
Create View
Var
  TypeSopr
, Filter
, DocDirect
, wSort
, WhatDate
, sStatus
, w1                : word;

  pFlt: TFilterInDoc;

  pRunDocSelections : RunDocSelObj;

  sDescr            : string[20];

  sDesgr            : string[4];

  bFilterNakl : boolean;

  sTypeDoc : string[10];

  lScreen           : longint;

  BegDate
, EndDate           : date;

As select
  Dogovor.NoDoc
, AppDogovor.NoDoc
, CalPlan.NoDoc
, BaseDoc.NoDoc
, KatOrg.Name
, KatStroy.Name

from
  Dogovor
, CalPlan
, Dogovor AppDogovor
, BaseDoc
, KatOrg
, KatOrg KatOrgT
, KatNazna
, KatPayment
, FPCO
, KatStroy

where
((
       pFlt.cDog         ==  Dogovor.NRec
  AND  pFlt.cAppDog      ==  AppDogovor.NRec
  AND  pFlt.CCalPlan     ==  CalPlan.NRec
  AND  pFlt.cDO          ==  StepDoc.NRec
  AND  pFlt.cNazna       ==  KatNazna.NRec
  AND  StepDoc.cBaseDoc  ==  BaseDoc.NRec
  AND  pFlt.cOrgBase     ==  KatOrg.NRec
  AND  pFlt.cGruzTo      ==  KatOrgT.NRec
  AND  pFlt.cPayment     ==  KatPayment.NRec
  AND  pFlt.cOtvPodr     ==  FPCO.NRec
  AND  pFlt.cUks         ==  KatStroy.NRec
))
;

Parameters
 TypeSopr,
 pFlt
;


#include FltInFun.vpp

//******************************************************************************
Screen scrFInterval('', hcD_GetInterval, sci13Esc);
  Show at (, , , 5);

bevel b01 {1, 0, 68, 5, bsLowered, bsFrame};
Fields
  WhatDate ('По какой дате задавать фильтр'   ) : NoProtect;
  BegDate  ('Введите начальную дату интервала') : NoProtect;
  EndDate  ('Введите конечную дату интервала' ) : NoProtect;
<<
  `Фильтр по датам:`
    [.] По дате создания  `  Период: `с`.@@@@@@@@@@ `по`.@@@@@@@@@@
    [.] По дате исполнения`

>>
end;

//******************************************************************************
Screen scrFInterval1('', hcD_GetInterval, sci13Esc);
  Show at (, , , 5);
bevel b01 {1, 0, 68, 5, bsLowered, bsFrame};
Fields
  WhatDate ('По какой дате задавать фильтр'   ) : NoProtect;
  BegDate  ('Введите начальную дату интервала') : NoProtect;
  EndDate  ('Введите конечную дату интервала' ) : NoProtect;
<<
  `Фильтр по датам:`
    [.] По дате создания`  Период: `с`.@@@@@@@@@@  `по`.@@@@@@@@@@
    [.] По дате списания`

>>
end;

//******************************************************************************

Screen scrFInterval2('', hcD_GetInterval, sci13Esc);
  Show at (, , , 5);
bevel b01 {1, 0, 68, 5, bsLowered, bsFrame};
Fields
  WhatDate ('По какой дате задавать фильтр'   ) : NoProtect;
  BegDate  ('Введите начальную дату интервала') : NoProtect;
  EndDate  ('Введите конечную дату интервала' ) : NoProtect;
<<
  `Фильтр по датам:`
    [.] По дате создания     ` Период: `с`.@@@@@@@@@ `по`.@@@@@@@@@
    [.] По дате оприходования`

>>
end;

//******************************************************************************

Screen scrFInterval_ForKSUsl('', hcD_GetInterval, sci13Esc);
  Show at (, , , 5);
bevel b01 {1, 0, 68, 5, bsLowered, bsFrame};
Fields
  WhatDate ('По какой дате задавать фильтр'   ) : NoProtect;
  BegDate  ('Введите начальную дату интервала') : NoProtect;
  EndDate  ('Введите конечную дату интервала' ) : NoProtect;
  w1('Запретить вывод в панель накладных привязанных к накладной на прием ГП') : NoProtect;
<<
  `Фильтр по:`
    [.] Дате создания`   Период: `с`.@@@@@@@@@@  `по`.@@@@@@@@@@

    [.] Не показывать акты, сформированные по вышестоящим документам `
>>
end;

//******************************************************************************

Screen scrFiltr('',,sci13Esc);
  Show at (, 6, , );
bevel b02 {1, 0, 68, 17, bsLowered, bsFrame};
  Fields
   Filter ('Установленные фильтры',,) : NoProtect;

   BaseDoc.NoDoc   ('Установленные фильтры по документу-основанию'      ,,) : Protect;
   Dogovor.NoDoc   ('Установленные фильтры по договору (есть Сtrl+F3)'  ,,) : Protect;
   AppDogovor.NoDoc('Установленные фильтры по соглашению (есть Сtrl+F3)',,) : Protect;
   CalPlan.NoDoc   ('Установленные фильтры по ПКП (есть Сtrl+F3)'       ,,) : Protect;
   KatOrg.Name     ('Установленные фильтры по контрагенту'              ,,) : Protect;
   sDescr          ('Установленные фильтры по дескриптору'              ,,) : Protect;
   sDesgr          ('Установленные фильтры по группе дескрипторов'      ,,) : Protect;
   KatNazna.Name   ('Установленные фильтры по каталогу назначений'      ,,) : Protect;
   KatOrgT.Name    ('Установленные фильтры по грузополучателю'          ,,) : Protect;
   KatPayment.Name ('Установленные фильтры по форме расчета'            ,,) : Protect;
   sStatus         ('Установленные фильтры по статусу'                  ,,) :
                                                 [LIST  0  'Оформляемый',
                                                        1  'Исполняемый',
                                                        2  'Приостановленный',
                                                        3  'Отмененный',
                                                        4  'Закрытый'], Protect;
   FPCO.Name       ('Установленные фильтры по центру ответственности'   ,,) : Protect;
   KatStroy.Name   ('Установленные фильтры по объекту строительства'    ,,) : Protect;

   wSort  ('Сортировки',,) : NoProtect;

  Buttons
  cmOK,Default,,'Ввод - принять выбор',,sci1Esc;
  cmValueCancel,,,'Снять фильтры',,sci1Esc;
  cmCancel,,,'Отмена',,sci1Esc;
<<
   `Дополнительные фильтры по:`
    [.] ДО                   ` .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
    [.] Договору             ` .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
    [.] Соглашению           ` .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
    [.] ПКП                  ` .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
    [.] Контрагенту          ` .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
    [.] Дескриптору          ` .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
    [.] Группе дескр.        ` .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
    [.] Назначению           ` .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
    [.] Грузополучатель      ` .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
    [.] Форма расчета        ` .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
    [.] Статусу              ` .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
    [.] Центр ответственности` .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
    [.] Объект строительства ` .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

    [.] Сортировать по дате создания`

 <.Установить фильтр.>  <.  Снять фильтр   .>  <.     Отмена      .>
>>
End; // Screen

//маска фильтра
Procedure CheckMask;
{
  if (Filter AND 1) = 1
    SetFieldOption   (#BaseDoc.NoDoc, ofSelectable)
  else
    ClearFieldOption (#BaseDoc.NoDoc, ofSelectable);

  if (Filter AND 2) = 2
    SetFieldOption(#Dogovor.NoDoc,ofSelectable)
  else
    ClearFieldOption(#Dogovor.NoDoc,ofSelectable);

  if (Filter AND 4) = 4
    SetFieldOption   (#AppDogovor.NoDoc, ofSelectable)
  else
    ClearFieldOption (#AppDogovor.NoDoc, ofSelectable);

  if (Filter AND 8) = 8
    SetFieldOption   (#CalPlan.NoDoc, ofSelectable)
  else
    ClearFieldOption (#CalPlan.NoDoc, ofSelectable);

  if (Filter AND 16) = 16
    SetFieldOption   (#KatOrg.Name, ofSelectable)
  else
    ClearFieldOption (#KatOrg.Name, ofSelectable);

  if (Filter AND 32) = 32
    SetFieldOption   (#sDescr, ofSelectable)
  else
    ClearFieldOption (#sDescr, ofSelectable);

  if (Filter AND 64) = 64
    SetFieldOption   (#sDesgr, ofSelectable)
  else
    ClearFieldOption (#sDesgr, ofSelectable);

  if (Filter AND 128) = 128
  {
    ClusterDisabledField(#wSort, 1);
    SetFieldOption   (#KatNazna.Name, ofSelectable)
  }
  else
  {
    ClusterDisabledField(#wSort, 0);
    ClearFieldOption (#KatNazna.Name, ofSelectable);
  }

  if (Filter AND 256) = 256
    SetFieldOption   (#KatOrgT.Name, ofSelectable)
  else
    ClearFieldOption (#KatOrgT.Name, ofSelectable);

  if (Filter AND 512) = 512
    SetFieldOption   (#KatPayment.Name, ofSelectable)
  else
    ClearFieldOption (#KatPayment.Name, ofSelectable);

  if (Filter AND 1024) = 1024
    SetFieldOption   (#sStatus, ofSelectable)
  else
    ClearFieldOption (#sStatus, ofSelectable);

  if (Filter AND 2048) = 2048
    SetFieldOption   (#FPCO.Name, ofSelectable)
  else
    ClearFieldOption (#FPCO.Name, ofSelectable);

  if (Filter AND 4096) = 4096
    SetFieldOption   (#KatStroy.Name, ofSelectable)
  else
    ClearFieldOption (#KatStroy.Name, ofSelectable);


  set Filter := Filter;
}

Procedure CheckMaskD;
{

  if (WhatDate = 0)
    {
      ClusterDisabledField(#WhatDate, 0);
      ClearFieldOption (#BegDate, ofSelectable);
      ClearFieldOption (#EndDate, ofSelectable);
      ClusterDisabledField(#wSort, 0);
    }
  else
    if ( (lScreen <> scrFInterval)
      OR (lScreen <> scrFInterval_ForKSUsl) )
      {
        if (WhatDate AND 1) = 1
          {
            ClusterDisabledField(#WhatDate, 2);
            ClusterDisabledField(#wSort, 0);
          }
        if (WhatDate AND 2) = 2
          {
            wSort := 0;
            ClusterDisabledField(#WhatDate, 1);
            ClusterDisabledField(#wSort, 1);
          }
        SetFieldOption (#BegDate, ofSelectable);
        SetFieldOption (#EndDate, ofSelectable);
      }

  set WhatDate := WhatDate;
}

//направление движения МЦ(услуг)
function GetSoprDirect: word;
{
  GetSoprDirect := 0;
  case TypeSopr of
    110,114,101,102,103,111,105,106,108, 1411:
       GetSoprDirect := 2; // Продажа МЦ и услуг
    229, 210, 201,202,203,211,205,206,1421:
       GetSoprDirect := 1; // Прием МЦ и услуг
  end; // case
}

Procedure ReDrawDog;
{
  set pFlt.cDO      := pFlt.cDO;
  set pFlt.cDog     := pFlt.cDog;
  set pFlt.cAppDog  := pFlt.cAppDog;
  set pFlt.cCalPlan := pFlt.cCalPlan;
  set pFlt.cOrgBase := pFlt.cOrgBase;
  set pFlt.cNazna   := pFlt.cNazna;
  set pFlt.bDate    := pFlt.bDate;
  set pFlt.eDate    := pFlt.eDate;
  set pFlt.WD       := pFlt.WD;
  set pFlt.w1       := pFlt.w1;
  set pFlt.cGruzTo  := pFlt.cGruzTo;
  set pFlt.cPayment := pFlt.cPayment;
  set pFlt.cOtvPodr := pFlt.cOtvPodr;
  set pFlt.cUks     := pFlt.cUks;
  set sDescr    := sDescr;
  set sDesgr    := sDesgr;
  set sStatus       := sStatus;
}

Procedure ReadDSK;
{
  if NOT ReadMyDSK(sTypeDoc, 'Filter_Tip_Doc', TRUE)
    sTypeDoc := '';

  if NOT ReadMyDSK(bFilterNakl, 'Filter_Nakl_bFilterNakl_' + sTypeDoc, TRUE)
    bFilterNakl := FALSE;

  if NOT ReadMyDsk(pFlt.Filter, 'Filter_Nakl_Filter_' + sTypeDoc, TRUE)
    Filter := 0;

  if NOT  ReadMyDsk(pFlt.cDO, 'Filter_Nakl_BaseDoc_' + sTypeDoc, TRUE)
    pFlt.cDO := 0;

  if NOT ReadMyDsk(pFlt.cDog, 'Filter_Nakl_Dogovor_' + sTypeDoc, TRUE)
    pFlt.cDog := 0;

  if NOT ReadMyDsk(pFlt.cAppDog, 'Filter_Nakl_AppDogovor_' + sTypeDoc, TRUE)
    pFlt.cAppDog := 0;

  if NOT ReadMyDsk(pFlt.CCalPlan, 'Filter_Nakl_CalPlan_' + sTypeDoc, TRUE)
    pFlt.CCalPlan := 0;

  if NOT ReadMyDsk(pFlt.cOrgBase, 'Filter_Nakl_OrgBase_' + sTypeDoc, TRUE)
    pFlt.cOrgBase := 0;

  if NOT ReadMyDsk(pFlt.cNazna, 'Filter_Nakl_Nazna_' + sTypeDoc, TRUE)
    pFlt.cNazna := 0;

  if NOT ReadMyDsk(pFlt.Descr, 'Filter_Nakl_sDescr_' + sTypeDoc, TRUE)
    pFlt.Descr := sGetTune('User.Descr');

  if NOT ReadMyDsk(pFlt.Desgr, 'Filter_Nakl_sDesgr_' + sTypeDoc, TRUE)
    pFlt.Desgr := sGetTune('User.DesGr');

  if NOT ReadMyDsk(pFlt.wSort, 'Filter_Nakl_wSort_' + sTypeDoc, TRUE)
    wSort := 0;

  if NOT ReadMyDsk(pFlt.bDate, 'aBegDate_' + sTypeDoc, TRUE)
    pFlt.bDate := ZeroDate;

  if NOT ReadMyDsk(pFlt.eDate, 'aEndDate_' + sTypeDoc, TRUE)
    pFlt.eDate := ZeroDate;

  if NOT ReadMyDsk(pFlt.WD, 'Filter_What_Date_' + sTypeDoc, TRUE)
    pFlt.WD := 0;

  if NOT ReadMyDsk(pFlt.W1, 'Filter_w1_' + sTypeDoc, TRUE)
    pFlt.w1 := 0;

  if NOT ReadMyDsk(pFlt.cGruzTo, 'Filter_Nakl_cGruzTo_' + sTypeDoc, TRUE)
    pFlt.cGruzTo := comp(0);

  if NOT ReadMyDsk(pFlt.cPayment, 'Filter_Nakl_cPayment_' + sTypeDoc, TRUE)
    pFlt.cPayment := comp(0);

  if NOT ReadMyDsk(pFlt.Status, 'Filter_Nakl_Status_' + sTypeDoc, TRUE)
    sStatus := word(0);

  if NOT ReadMyDsk(pFlt.cOtvPodr, 'Filter_Nakl_cOtvPodr_' + sTypeDoc, TRUE)
    pFlt.cOtvPodr := comp(0);

  if NOT ReadMyDsk(pFlt.cUks, 'Filter_Nakl_cUks_' + sTypeDoc, TRUE)
    pFlt.cUks := comp(0);
}

Procedure SaveDSK;
{
  SaveMyDSK(bFilterNakl  , 'Filter_Nakl_bFilterNakl_' + sTypeDoc);

  if (bFilterNakl)
    SaveMyDsk(pFlt.Filter  , 'Filter_Nakl_Filter_'      + sTypeDoc);
  else
    SaveMyDsk(0  , 'Filter_Nakl_Filter_'      + sTypeDoc);

  SaveMyDsk(pFlt.cDO     , 'Filter_Nakl_BaseDoc_'     + sTypeDoc);
  SaveMyDsk(pFlt.cDog    , 'Filter_Nakl_Dogovor_'     + sTypeDoc);
  SaveMyDsk(pFlt.cAppDog , 'Filter_Nakl_AppDogovor_'  + sTypeDoc);
  SaveMyDsk(pFlt.cCalPlan, 'Filter_Nakl_CalPlan_'     + sTypeDoc);
  SaveMyDsk(pFlt.cOrgBase, 'Filter_Nakl_OrgBase_'     + sTypeDoc);
  SaveMyDsk(pFlt.cNazna  , 'Filter_Nakl_Nazna_'       + sTypeDoc);
  SaveMyDsk(pFlt.bDate   , 'aBegDate_'                + sTypeDoc);
  SaveMyDsk(pFlt.eDate   , 'aEndDate_'                + sTypeDoc);
  SaveMyDsk(pFlt.WD      , 'Filter_What_Date_'        + sTypeDoc);
  SaveMyDsk(pFlt.W1      , 'Filter_w1_'               + sTypeDoc);
  SaveMyDsk(sDescr       , 'Filter_Nakl_sDescr_'      + sTypeDoc);
  SaveMyDsk(sDesgr       , 'Filter_Nakl_sDesgr_'      + sTypeDoc);
  SaveMyDsk(wSort        , 'Filter_Nakl_wSort_'       + sTypeDoc);
  SaveMyDsk(pFlt.cGruzTo , 'Filter_Nakl_cGruzTo_'     + sTypeDoc);
  SaveMyDsk(pFlt.cPayment, 'Filter_Nakl_cPayment_'    + sTypeDoc);
  SaveMyDsk(sStatus      , 'Filter_Nakl_Status_'      + sTypeDoc);
  SaveMyDsk(pFlt.cOtvPodr, 'Filter_Nakl_cOtvPodr_'    + sTypeDoc);
  SaveMyDsk(pFlt.cUks    , 'Filter_Nakl_cUks_'    + sTypeDoc);
}

Handleevent
cmInit:
{
  case TypeSopr of
     201  //Накладная на отпуск МЦ
   , 202  //Накладная на отпуск МЦ консигнатору
   , 203  //Накладная на возврат МЦ консигнанту
   , 210  //Акт передачи оборудования в монтаж
   , 229  //Акт передачи материалов на строительство
   , 1421: //УЛХ. Накладная на отпуск лесопродукции
       lScreen := scrFInterval1;
   //--------------------------------------------
     101  //Накладная на прием МЦ
   , 102  //Накладная на возврат МЦ от консигнатора
   , 103  //Накладная на прием МЦ от консигнанта
   , 108  //Накладная на прием молочного сырья
   , 1411: //УЛХ Дневник приемки работ
       lScreen := scrFInterval2;
   //--------------------------------------------
     504  //акт на списание из производства
   , 508: //Акт на оказание услуг между подразделениями в производстве
       lScreen := scrFInterval_ForKSUsl;
     502  //Накладная на приход готовой продукции
   , 505: //Межцеховая накладная
       lScreen := scrFInterval;
   else
     lScreen := scrFInterval;
  end;

  if (TypeSopr <> 110)
    ClusterDisabledField(#Filter, 4096);

  SetFormat(lScreen);

  ReadDSK;

  Filter    := pFlt.Filter;
  sDescr    := pFlt.Descr;
  sDesgr    := pFlt.Desgr;
  wSort     := pFlt.wSort;
  BegDate   := pFlt.bDate;
  EndDate   := pFlt.eDate;
  WhatDate  := pFlt.WD;
  w1        := pFlt.w1;
  DocDirect := GetSoprDirect;
  sStatus   := pFlt.Status;


  CheckMask;
  CheckMaskD;

  ReDrawDog;

  ReScanPanel(lScreen);
}

cmPick:
{
   case CurField of
    #Dogovor.Nodoc,
    #AppDogovor.Nodoc,
    #CalPlan.NoDoc:
    {
      if NullVipRef(pRunDocSelections)
        if not(LoadVipRef(pRunDocSelections, 'RunDocSelections'))
        {
          Message(''#3'Не удалось загрузить библиотеку RunDocSelObj', Error);
          Exit;
        }

      if (pRunDocSelections.F3(
                      pFlt.cDog,
                      pFlt.cAppDog,
                      pFlt.cCalPlan,
                      if(CurField = #CalPlan.NoDoc, 4, 1),
                      word(2+4),  //     _wMaska     : word  // 0FFFFh - все документы, иначе битовая маска РАЗРЕШЕННЫХ статусов документов
                                  // разрешен выбор только из исполняемых
                                  // или приостановленных договоров
                      DocDirect ) <> cmCancel)
      {
         ReDrawDog;
      }
    }

    #BaseDoc.NoDoc:
    {
     if RunInterface(GetDBase,TRUE, DocDirect, word(0),comp(0),pFlt.cDO,
                   comp(0),double(0)) <> cmCancel
       ReDrawDog;
    }

    #KatOrg.Name:
    {
     if (RunInterface(GetKatOr,pFlt.cOrgBase,comp(0),FALSE,comp(0),comp(0)) <> cmCancel)
       ReDrawDog;
    }

    #KatOrgT.Name:
    {
     if (RunInterface(GetKatOr,pFlt.cGruzTo,comp(0),FALSE,comp(0),comp(0)) <> cmCancel)
       ReDrawDog;
    }

    #KatNazna.Name:
    {
     if (RunInterface(GetSomKatNazna, FALSE, pFlt.cNazna) <> cmCancel)
       ReDrawDog;
    }

    #sDescr:
    {
      var wIsVisible: word;

      wIsVisible := word(12345);
      if (RunInterface(GetDescr, sDescr, sDesgr, wIsVisible) <> cmCancel)
        ReDrawDog;
    }

    #sDesgr:
    {
      if (RunInterface(GetGrDescr, sDesgr, FALSE, FALSE, comp(0)) <> cmCancel)
        ReDrawDog;
    }

    #KatPayment.Name :
    {
      if RunInterface('GetPayment', pFlt.cPayment) <> cmDefault
        ReDrawDog;
    }

    #FPCO.Name:
    {
      if RunInterface('GetCO', word(cgiPick), comp(0), comp(0), pFlt.cOtvPodr) <> cmCancel
        ReDrawDog;
    }

    #KatStroy.Name:
    {
      if RunInterface('KatStroy', 0, TRUE, pFlt.cUKS, FALSE, FALSE, FALSE) <> cmCancel
        ReDrawDog;
    }


  end;
}

cmRestoreDoc:
{
 case CurField of
   #Dogovor.Nodoc,
   #AppDogovor.Nodoc,
   #CalPlan.NoDoc:
   {
     if NullVipRef(pRunDocSelections)
       if not(LoadVipRef(pRunDocSelections, 'RunDocSelections'))
       {
         Message(''#3'Не удалось загрузить библиотеку RunDocSelObj', Error);
         Exit;
       }
     SaveMyDsk(word(2+4),'GetDAK_Status'  ); // разрешен выбор только из исполняемых или приостановленных
     SaveMyDsk(byte(1+2),'GetDAK_Status_e'); // К договорам и соглашениям

     if (pRunDocSelections.Ctrl_F3(
                    pFlt.cDog,
                    pFlt.cAppDog,
                    pFlt.cCalPlan,
                    longint(vcGetDog_Status), // по умолчанию (=0) фильтр только по исполняемым
                    if(CurField = #CalPlan.NoDoc, 4, 1) // откуда вызвали:
                                                        // 1 - договора
                                                        // 2 - соглашение
                                                        // 4 - календарный план
                       ) <> cmCancel)
     {
       ReDrawDog;
     }
   }
  end;
}

cmCheckField:
  case CurField of
   #Filter: CheckMask;
   #WhatDate: CheckMaskD;
   #BegDate:
    if (BegDate > EndDate)
      {
        if ( CurField = #BegDate )
          set EndDate := BegDate;
      }
  end;

cmDelOnProtect:
{
 case CurField of
   #BaseDoc.NoDoc   : pFlt.cDO      := 0;
   #Dogovor.NoDoc   : pFlt.cDog     := 0;
   #AppDogovor.NoDoc: pFlt.cAppDog  := 0;
   #CalPlan.NoDoc   : pFlt.cCalPlan := 0;
   #KatOrg.Name     : pFlt.cOrgBase := 0;
   #KatOrgT.Name    : pFlt.cGruzTo  := 0;
   #KatNazna.Name   : pFlt.cNazna   := 0;
   #KatPayment.Name : pFlt.cPayment := 0;
   #FPCO.Name       : pFlt.cOtvPodr := 0;
   #KatStroy.Name   : pFlt.cUks     := 0;
   #sDescr      : sDescr    := '';
   #sDesgr      : sDesgr    := '';
   #sStatus         : sStatus       := 0;
 end;
 ReDrawDog;
}
cmOk:
{
  if (BegDate > EndDate)
    {
      Message('Начальная дата фильтра больше конечной!' ,Information);

      Abort;
      Exit;
    }

  pFlt.Filter  := Filter;
  pFlt.Descr   := sDescr;
  pFlt.Desgr   := sDesgr;
  pFlt.Status  := sStatus;
  pFlt.wSort   := wSort;
  pFlt.bDate   := BegDate;
  pFlt.eDate   := EndDate;
  pFlt.WD      := WhatDate;
  pFlt.w1      := w1;
  bFilterNakl  := TRUE;

  SaveDSK;
  PutCommand(cmDefault);
}

cmValueCancel:
{
  pFlt.WD     := 0;
  WhatDate    := 0;
  bFilterNakl := FALSE;
  SaveDSK;

  pFlt.Filter := 0;
  pFlt.wSort  := 0;

  PutCommand(cmDefault);
}

End; // HandleEvent interface

End. // interface