//********************************************************************************
//                                                        (c) корпорация Галактика
// Галактика 7.12 - _
// _
//********************************************************************************

!╔═══════════════════════════════════════════════════════════════════════════╗
!║ Назначение    : функции для работы с вн.классификацией, вн.атрибутами      ║
!╚═══════════════════════════════════════════════════════════════════════════╝

// в интерфейсе нужно подключить #include ExtAttrClass.vih
// но лучше напрямую пользоваться функциями объектного интерфейса

// поиск  классификации по названию
Function FindClass(coTable: word;str: string): boolean;
var piExClass: iExtClass;
{
  FindClass := FALSE;
  if  piExClass.GetClassCode(coTable, str) = 0
    Exit;
  FindClass := TRUE;
}

//формирует классификацию для таблицы coTable по названию
Function MakeClass(coTable: word;str: string): boolean;
var piExClass: iExtClass;
{
  MakeClass := FALSE;
  if piExClass.CreateClass(coTable, str, 0) > 0
    MakeClass := TRUE;
}

!поиск внешнего атрибута по названию
Function FindAttr(coTable: word;str: string): boolean;
var piExAttr: iExtAttr;
{
  FindAttr := FALSE;
  IF piExAttr.AttrId(coTable, str) = 0
    Exit;
  FindAttr := TRUE;
}

!создание внешнего атрибута по его названию
Function MakeAttr(coTable: word;str: string;AttrType: word): boolean;
var piExAttr: iExtAttr;
{
  MakeAttr := FALSE;
  if FindAttr(coTable, str)
    Exit;
  piExAttr.CreateAttr(coTable, str, AttrType);
  MakeAttr := TRUE;
}

!выводит внешнюю классификацию таблици по названию классификации
Function WriteClass(coTable: word;nRecTable: comp;str: string): string;
var
  piExClass  : iExtClass;
  _ClassCode: word;
{
  WriteClass := '';
  _ClassCode := piExClass.GetClassCode(coTable, str);
  WriteClass := piExClass.GetSegName (_ClassCode, NRecTable);
}

!выводит внешний атрибут таблицы по названию атрибута
Function WriteAttr(coTable: word;nRecTable: comp;str: string): string;
var piExAttr: iExtAttr;
{
  WriteAttr := piExAttr.sGetAttr(coTable, NRecTable, str);
}

Function WriteAttrDouble(coTable: word;nRecTable: comp;str: string): double;
var piExAttr: iExtAttr;
{
  WriteAttrDouble := piExAttr.doGetAttr(coTable, NRecTable, str);
}
