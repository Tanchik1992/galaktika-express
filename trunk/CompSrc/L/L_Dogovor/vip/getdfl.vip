//********************************************************************************
//                                                        (c) корпорация Галактика
// Галактика 5.73 - логистика
// УралСеверГаз-2. Выбор документа для связывания
//
//********************************************************************************

Table struct TmpCP "Таблица в памяти кал.планов"
(
  cCalPlan: comp ""
, dInput  : date ""
)
With index
(
  TmpCP01 = cCalPlan
, TmpCP02 = dInput
);

#doc
Выбор документа для связывания в схеме связей
#end
Interface GetDocForLinks doAccept, EscClose, Cyan;
  Show at (, 3,, 20);

Create view

Var
  p1
, p2
, pTiDk2
, bdVD
, ksVS
            : word;

  pBaseDoc
, c1
            : comp;

  s_SimvRub
            : string;

As select

  if (KatSopr.cVal = 0, KatSopr.Summa, KatSopr.SumVal)
                                                   ( FieldName = KSSum )

, if (KatSopr.cVal = 0,
    if (s_SimvRub <> '', s_SimvRub, 'руб.'), KSKlVal.SimVolV)
                                                   ( FieldName = KSValut )

, if (BaseDoc.cVal = 0,
    if (s_SimvRub <> '', s_SimvRub, 'руб.'), BDKlVal.SimVolV)
                                                   ( FieldName = BDValut )

, if (Dogovor.cVal = 0,
    if (s_SimvRub <> '', s_SimvRub, 'руб.'), dogKlVal.SimVolV)
                                                   ( FieldName = dogValut )

, if (CalPlan.cVal = 0,
    if (s_SimvRub <> '', s_SimvRub, 'руб.'), CPKlVal.SimVolV)
                                                   ( FieldName = CPValut )

, if (CalPlan.DirectMC = 0, 'нет',
    if (CalPlan.DirectMC = 1, '1->2',
      if (CalPlan.DirectMC = 2, '2->1',
        if (CalPlan.DirectMC = 100, '', '!НЕК'))))
                                                   ( FieldName = CalPlanDirectMC_s )

, if (CalPlan.DirectPlat = 0, 'нет',
    if (CalPlan.DirectPlat = 1, '2->1',
      if (CalPlan.DirectPlat = 2, '1->2',
        if (CalPlan.DirectPlat = 100, '', '!НЕК'))))
                                                   ( FieldName = CalPlanDirectPlat_s )

, if (CalPlan.DirectMC   = 0, '-', DoubleToStr(CalPlan.SummaSpec,'\2p[|-]36`666`666`666.88'))
                                                   ( FieldName = SummaOtgr )

, if (CalPlan.DirectPlat = 0, '-', DoubleToStr(CalPlan.Summa,'\2p[|-]36`666`666`666.88'))
                                                   ( FieldName = SummaPlat )

, *

From
  dogovor
, CalPlan
, BaseDoc
, KatSopr
, TmpCP(TmpCP02)
, KlVal KSKlVal
, KlVal BDKlVal
, KlVal dogKlVal
, KlVal CpKlVal
, KatNotes KSNotes
, KatNotes BDNotes
, KatNotes dogNotes
, KatNotes CPNotes
, KatOrg KSKatOrg
, KatOrg BDKatOrg
, KatOrg dogKatOrg

Where
((
    KatSopr.cVal  == KSKlVal.nRec
and BaseDoc.cVal  == BDKlVal.nRec
and dogovor.cVal  == dogKlVal.nRec
and KatSopr.cNote == KSNotes.nRec
and BaseDoc.cNote == BDNotes.nRec
and dogovor.cNote == dogNotes.nRec
and CalPlan.cNote == CPNotes.nRec
and KatSopr.cOrg  == KSKatOrg.nRec
and BaseDoc.cOrg  == BDKatOrg.nRec
and dogovor.cOrg  == dogKatOrg.nRec
))

Condition dog1 =
  (c1 <> dogovor.cDogovor) and (0 <> dogovor.cDogovor)

Bounds dog2 =
  c1 == dogovor.cDogovor Ordered By dogovor.dDoc

Condition cp1 =
  c1 <> CalPlan.cDogovor

Bounds cp2 =
  c1 == CalPlan.cDogovor Ordered By CalPlan.dInput

Bounds cp3 =
  TmpCP.cCalPlan == CalPlan.nRec

Bounds bdVid =
  bdVD == BaseDoc.VidDoc  Ordered By BaseDoc.dDoc

Condition bd11 =
  c1 <> BaseDoc.cDogovor

Bounds bd12 =
  bdVD == BaseDoc.VidDoc and
  c1   == BaseDoc.cDogovor Ordered By BaseDoc.dDoc

Condition bd21 =
  c1 <> BaseDoc.cAppDogovor

Bounds bd22 =
  bdVD == BaseDoc.VidDoc and
  c1   == BaseDoc.cAppDogovor Ordered By BaseDoc.dDoc

Condition bd31 =
  c1 <> BaseDoc.cCalPlan

Bounds bd32 =
  bdVD == BaseDoc.VidDoc and
  c1   == BaseDoc.cCalPlan Ordered By BaseDoc.dDoc

Bounds ksVid =
  ksVS == KatSopr.VidSopr Ordered By KatSopr.dSopr

Condition ks11 =
  c1 <> KatSopr.cDogovor

Bounds ks12 =
  ksVS == KatSopr.VidSopr and
  c1   == KatSopr.cDogovor Ordered By KatSopr.dSopr

Condition ks21 =
  c1 <> KatSopr.cAppDogovor

Bounds ks22 =
  ksVS == KatSopr.VidSopr and
  c1   == KatSopr.cAppDogovor Ordered By KatSopr.dSopr

Condition ks31 =
  c1 <> KatSopr.cCalPlan

Bounds ks32 =
  ksVS == KatSopr.VidSopr and
  c1   == KatSopr.cCalPlan Ordered By KatSopr.dSopr

Condition ks41 =
  c1 <> KatSopr.cStepDoc

Bounds ks42 =
  ksVS == KatSopr.VidSopr and
  c1   == KatSopr.cStepDoc Ordered By KatSopr.dSopr
;

//********************************************************************************

Parameters
  pBaseDoc  //возвращаемый параметр - NRec документа
, pTiDk2    //возвращаемый параметр - TiDk документа
, p1        //определяет из чего выбирать 1-из соглашений
            //                            2-из кал.планов
            //                            3-из ДО по договорам
            //                            4-из ДО по соглашениям
            //                            5-из ДО по кал.планам
            //                            6-из накладных по договорам
            //                            7-из накладных по соглашениям
            //                            8-из накладных по кал.планам
            //                            9-из накладных по ДО
, p2        //определяет фильтр по равенству или не равенству по c1
, c1        //nRec документа, по которому накладывается фильтр
;

//********************************************************************************

TabbedSheet BOTTOM tshMain

Browse brAppDogovor 'Соглашения' ('Выберите соглашение и нажмите ВВОД',, sci1EnEsc);
  Table dogovor

Fields

  dogovor.dDoc         'Дата' ('Дата заключения')
                       : [10,'DD/MM/YYYY'], Protect;

  dogovor.Descr        'Дескр.' ('Дескриптор(идентификатор) пользователя')
                       : [5],  Protect;

  dogovor.NoDoc        'Номер' ('Внутренний номер')
                       : [8],  Protect;

  dogNotes.Name        'Статус' ('Статус документа')
                       : [9], Protect;

  dogKatOrg.Name       'Контрагент' ('Наименование контрагента')
                       : [22], Protect;

  dogovor.Summa        'Сумма' ('Общая (планируемая) сумма')
                       : [17, '\2p[|-]36`666`666`666`666.88'], Protect;

  dogValut             'Валюта'('Денежная единица')
                       : [6],  Protect;

end;

//********************************************************************************

Browse brCalPlan 'Пункты КП' ('Выберите пункт КП и нажмите ВВОД',, sci1EnEsc);
  Table CalPlan

Fields

  CalPlan.dInput       'Дата' ('Дата заключения')
                       : [10,'DD/MM/YYYY'], Protect;

  CalPlan.Descr        'Дескр.' ('Дескриптор(идентификатор) пользователя')
                       : [5], Protect;

  CalPlan.NoDoc        'Номер' ('Номер пункта плана')
                       : [8], Protect;

  CPNotes.Name         'Статус' ('Статус пункта плана')
                       : [9], Protect;

  CalPlanDirectMC_s    'Отгр.'('Направление отгрузок/оказания услуг')
                       : [4], Protect;

  SummaOtgr            'Сумма отгрузок' ('Сумма отгрузок по пункту плана')
                       : [17, '\2p[|-]36`666`666`666`666.88'], Protect;

  CalPlanDirectPlat_s  'Плат.' ('Направление платежей')
                       : [4], Protect;

  SummaPlat            'Сумма платежей' ('Сумма платежей по пункту плана')
                       : [17, '\2p[|-]36`666`666`666`666.88'], Protect;

  CPValut              'Валюта' ('Денежная единица')
                       : [6], Protect;

end;

//********************************************************************************

Browse brBaseDocSell 'ДО на продажу' ('Выберите ДО и нажмите ВВОД',, sci1EnEsc);
  Table BaseDoc

Fields

  BaseDoc.dDoc         'Дата' ('Дата формирования док.-основания')
                       : [10, 'DD/MM/YYYY'], Protect;

  BaseDoc.Descr        'Дескр.' ('Дескриптор(идентификатор) пользователя')
                       : [5], Protect;

  BaseDoc.NoDoc        'Номер' ('Номер документа-основания')
                       : [8], Protect;

  BDNotes.Name         'Статус' ('Статус документа-основания')
                       : [9], Protect;

  BDKatOrg.Name        'Контрагент' ('Наименование контрагента')
                       : [22], Protect;

  BaseDoc.Total        'Сумма' ('Сумма по документу-основанию')
                       : [17, '\2p[|-]36`666`666`666`666.88'], [brForVPrice], Protect;

  BDValut              'Валюта' ('Денежная единица')
                       : [6], Protect;

  BaseDoc.Name         'Примечание' ('Наименование документа-основания')
                       : [19], Protect;

end;

//********************************************************************************

Browse brBaseDocBy 'ДО на закупку' ('Выберите ДО и нажмите ВВОД',, sci1EnEsc);
  Table BaseDoc

Fields

  BaseDoc.dDoc         'Дата' ('Дата формирования док.-основания')
                       : [10, 'DD/MM/YYYY'], Protect;

  BaseDoc.Descr        'Дескр.' ('Дескриптор(идентификатор) пользователя')
                       : [5], Protect;

  BaseDoc.NoDoc        'Номер' ('Номер документа-основания')
                       : [8], Protect;

  BDNotes.Name         'Статус' ('Статус документа-основания')
                       : [9], Protect;

  BDKatOrg.Name        'Контрагент' ('Наименование контрагента')
                       : [22], Protect;

  BaseDoc.Total        'Сумма' ('Сумма по документу-основанию')
                       : [17, '\2p[|-]36`666`666`666`666.88'], [brForVPrice], Protect;

  BDValut              'Валюта' ('Денежная единица')
                       : [6], Protect;

  BaseDoc.Name         'Примечание' ('Наименование документа-основания')
                       : [19], Protect;

end;

//********************************************************************************

Browse brKatSoprSell 'Накладные на отпуск' ('Выберите накладную и нажмите ВВОД',,sci1EnEsc);
  Table KatSopr

Fields

  KatSopr.dSopr        'Дата' ('Дата формирования накладной')
                       : [10, 'DD/MM/YYYY'], Protect;

  KatSopr.Descr        'Дескр.' ('Дескриптор(идентификатор) пользователя')
                       : [5],  Protect;

  KatSopr.NSopr        'Номер' ('Номер накладной')
                       : [8],  Protect;

  KSNotes.Name         'Статус' ('Статус накладной')
                       : [10], Protect;

  KSKatOrg.Name        'Контрагент' ('Наименование контрагента')
                       : [22], Protect;

  KSSum                'Сумма' ('Сумма по накладной')
                       : [17, '\2p[|-]36`666`666`666`666.88'], [brForSopr_Price], Protect;

  KSValut              'Валюта' ('Денежная единица')
                       : [6],  Protect;

  KAtSopr.Name         'Примечание' ('Наименование накладной')
                       : [19], Protect;

end;

//********************************************************************************

Browse brKatSoprBy 'Приходные накладные' ('Выберите накладную и нажмите ВВОД',,sci1EnEsc);
  Table KatSopr

Fields

  KatSopr.dSopr        'Дата' ('Дата формирования накладной')
                       : [10, 'DD/MM/YYYY'], Protect;

  KatSopr.Descr        'Дескр.' ('Дескриптор(идентификатор) пользователя')
                       : [5], Protect;

  KatSopr.NSopr        'Номер' ('Номер накладной')
                       : [8], Protect;

  KSNotes.Name         'Статус' ('Статус накладной')
                       : [9], Protect;

  KSKatOrg.Name        'Контрагент' ('Наименование контрагента')
                       : [22], Protect;

  KSSum                'Сумма' ('Сумма по накладной')
                       : [17, '\2p[|-]36`666`666`666`666.88'], [brForSopr_Price], Protect;

  KSValut              'Валюта' ('Денежная единица')
                       : [6], Protect;

  KatSopr.Name         'Примечание' ('Наименование накладной')
                       : [19], Protect;

end;
end;

//********************************************************************************

Procedure ChangeVisibleSheet(_BrowseNo : longint; _BrowseNo2 : longint);
{
  SetTabbedSheetVisible(brAppDogovor, false);
  SetTabbedSheetVisible(brCalPlan, false);
  SetTabbedSheetVisible(brBaseDocSell, false);
  SetTabbedSheetVisible(brBaseDocBy, false);
  SetTabbedSheetVisible(brKatSoprSell, false);
  SetTabbedSheetVisible(brKatSoprBy, false);

  SetTabbedSheetVisible(_BrowseNo, true);

  if ( _BrowseNo2 <> 0 )
    SetTabbedSheetVisible(_BrowseNo2, true);
}

Function BaseDocExist : boolean;
{
  BaseDocExist := false;

  if ( GetFirst BaseDoc <> tsOk )
    {
      set bdVD := 101;
      SetFormat(brBaseDocBy);

      SetFormatEnabled (brBaseDocSell, false);

      if ( GetFirst BaseDoc <> tsOk )
        {
          Message('Отсутствуют документы-основания для выбора!', Information);
          Exit;
        }
    }
  else
    {
      set bdVD := 101;
      SetFormatEnabled (brBaseDocBy, GetFirst BaseDoc = tsOk);
      set bdVD := 201;
    }

  BaseDocExist := true;
}

Function KatSoprExist : boolean;
{
  KatSoprExist := false

  if ( GetFirst KatSopr <> tsOk )
    {
      set ksVS := 101;
      SetFormat(brKatSoprBy);
      SetFormatEnabled (brKatSoprSell, false);

      if ( GetFirst KatSopr <> tsOk )
        {
          Message('Отсутствуют накладные для выбора!', Information);
          Exit;
        }
    }
  else
    {
      set ksVS := 101;
      SetFormatEnabled (brKatSoprBy, GetFirst KatSopr = tsOk);
      set ksVS := 201;
    }

  KatSoprExist := true;
}

Procedure InitTmpCP;
{
  delete all TmpCP;

  if ( GetFirst CalPlan = tsOk )
    do
      Insert TmpCP set cCalPlan := CalPlan.nRec
                     , dInput   := CalPlan.dInput;
    while ( GetNext CalPlan = tsOk );

  if ( GetFirst dogovor where (( c1 == dogovor.cDogovor )) = tsOk )
    do
      if ( GetFirst CalPlan where (( dogovor.nRec == CalPlan.cDogovor )) = tsOk )
        do
          if ( p2 = 0  )
            {
              Insert TmpCP set cCalPlan := CalPlan.nRec
                             , dInput   := CalPlan.dInput;
            }
          else
            delete NoVisual TmpCP where (( CalPlan.nRec == TmpCP.cCalPlan ));
        while ( GetNext CalPlan where (( dogovor.nRec == CalpLan.cDogovor )) = tsOk );
    while ( GetNext dogovor where (( c1 == dogovor.cDogovor )) = tsOk );
}

HandleEvent

cmInit:
{
  s_SimvRub := sGetTune('NDE.SimvRub');

  bdVD := 201;
  ksVS := 201;

  case p1 of

    1 :
      {
        if ( p2 = 1 )
          PushConditionForLeave(tcdog1, #Dogovor)
        else
          PushBounds(tbdog2);

        if ( GetFirst dogovor <> tsOk )
          {
            Message('Отсутствуют соглашения для выбора!', Information);
            Abort;
            Exit;
          }

        SetFormat(brAppDogovor);
        ChangeVisibleSheet(brAppDogovor, 0);
        SetTitle('Выбор соглашения');
      }

    2 :
      {
        if ( p2 = 1 )
          {
            PushConditionForLeave(tccp1, #CalPlan);

            GetFirst dogovor where (( c1 == dogovor.nRec ));

            if ( dogovor.cDogovor = 0 )
              {
                InitTmpCP;

                PopConditionForLeave(tccp1, #CalPlan);

                if ( GetFirst TmpCP <> tsOk )
                  {
                    Message('Отсутствуют пункты кал. плана для выбора!', Information);
                    Abort;
                    Exit;
                  }

                PushBounds(tbcp3);
                SetScreenTable(brCalPlan, tnTmpCP);
              }
            else
              if ( GetFirst CalPlan <> tsOk )
                {
                  Message('Отсутствуют пункты кал. плана для выбора!', Information);
                  Abort;
                  Exit;
                }
          }
        else
          {
            PushBounds(tbcp2);
            GetFirst dogovor where (( c1 == dogovor.nRec ));

            if ( dogovor.cDogovor = 0 )
              {
                InitTmpCP;
                PopBounds(tbcp2);

                if ( GetFirst TmpCP <> tsOk )
                  {
                    Message('Отсутствуют пункты кал. плана для выбора!', Information);
                    Abort;
                    Exit;
                  }

                PushBounds(tbcp3);
                SetScreenTable(brCalPlan, tnTmpCP);
              }
            else
              if ( GetFirst CalPlan <> tsOk )
                {
                  Message('Отсутствуют пункты кал. плана для выбора!', Information);
                  Abort;
                  Exit;
                }
          }

        SetFormat(brCalPlan);
        ChangeVisibleSheet(brCalPlan, 0);
        SetTitle('Выбор пункта календарного плана');
      }

    3 :
      {
        if ( p2 <> 1 )
          PushBounds(tbbd12);
        else
          {
            PushBounds(tbbdVid);
            PushConditionForLeave(tcbd11, #BaseDoc);
          }

        SetFormat(brBaseDocSell);
        ChangeVisibleSheet(brBaseDocSell, brBaseDocBy);

        if ( not BaseDocExist )
          {
            Abort;
            Exit;
          }

        SetTitle('Выбор документа-основания');
      }

    4 :
      {
        if ( p2 <> 1 )
          PushBounds(tbbd22);
        else
          {
            PushBounds(tbbdVid);
            PushConditionForLeave(tcbd21, #BaseDoc);
          }

        SetFormat(brBaseDocSell);
        ChangeVisibleSheet(brBaseDocSell, brBaseDocBy);

        if ( not BaseDocExist )
          {
            Abort;
            Exit;
          }

        SetTitle('Выбор документа-основания');
      }

    5 :
      {
        if ( p2 <> 1 )
          PushBounds(tbbd32);
        else
          {
            PushBounds(tbbdVid);
            PushConditionForLeave(tcbd31, #BaseDoc);
          }

        SetFormat(brBaseDocSell);
        ChangeVisibleSheet(brBaseDocSell, brBaseDocBy);

        if ( not BaseDocExist )
          {
            Abort;
            Exit;
          }

        SetTitle('Выбор документа-основания');
      }

    6 :
      {
        if ( p2 <> 1 )
          PushBounds(tbks12);
        else
          {
            PushBounds(tbksVid);
            PushConditionForLeave(tcks11, #KatSopr);
          }

        SetFormat(brKatSoprSell);
        ChangeVisibleSheet(brKatSoprSell, brKatSoprBy);

        if ( not KatSoprExist )
          {
            Abort;
            Exit;
          }

        SetTitle('Выбор накладной');
      }

    7 :
      {
        if ( p2 <> 1 )
          PushBounds(tbks22);
        else
          {
            PushBounds(tbksVid);
            PushConditionForLeave(tcks21, #KatSopr);
          }

        SetFormat(brKatSoprSell);
        ChangeVisibleSheet(brKatSoprSell, brKatSoprBy);

        if ( not KatSoprExist )
          {
            Abort;
            Exit;
          }

        SetTitle('Выбор накладной');
      }

    8 :
      {
        if ( p2 <> 1 )
          PushBounds(tbks32);
        else
          {
            PushBounds(tbksVid);
            PushConditionForLeave(tcks31, #KatSopr);
          }

        SetFormat(brKatSoprSell);

        ChangeVisibleSheet(brKatSoprSell, brKatSoprBy);

        if ( not KatSoprExist )
          {
            Abort;
            Exit;
          }

        SetTitle('Выбор накладной');
      }

    9 :
      {
        if ( p2 <> 1 )
          PushBounds(tbks42);
        else
          {
            PushBounds(tbksVid);
            PushConditionForLeave(tcks41, #KatSopr);
          }

        SetFormat(brKatSoprSell);
        ChangeVisibleSheet(brKatSoprSell, brKatSoprBy);

        if ( not KatSoprExist )
          {
            Abort;
            Exit;
          }

        SetTitle('Выбор накладной');
      }

  end;

  RereadRecord;
}

cmDefault :
  case CurTabInWindow(longint(-1)) of

    brAppDogovor  : {pBaseDoc := dogovor.nRec; pTiDk2 := word(401)};
    brCalPlan     : {pBaseDoc := CalPlan.nRec; pTiDk2 := word(403)};
    brBaseDocSell : {pBaseDoc := BaseDoc.nRec; pTiDk2 := word(51)};
    brBaseDocBy   : {pBaseDoc := BaseDoc.nRec; pTiDk2 := word(41)};
    brKatSoprSell : {pBaseDoc := KatSopr.nRec; pTiDk2 := word(201)};
    brKatSoprBy   : {pBaseDoc := KatSopr.nRec; pTiDk2 := word(101)};

  end;

cmChangeTabbedSheetFormat :
  Case Target of

    brBaseDocSell : {set bdVD := 201; RescanPanel(#BaseDoc);}
    brBaseDocBy   : {set bdVD := 101; RescanPanel(#BaseDoc);}
    brKatSoprSell : {set ksVS := 201; RescanPanel(#KatSopr);}
    brKatSoprBy   : {set ksVS := 101; RescanPanel(#KatSopr);}

  end;

end;
End.
