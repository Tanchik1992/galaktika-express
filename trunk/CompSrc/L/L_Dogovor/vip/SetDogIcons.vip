/*
 ╔═══════════════════════════════════════════════════════════════════════════╗
 ║ Проект        : ГАЛАКТИКА                                                 ║
 ║ Назначение    : Нстройка иконок договора, соглашения, ПКП                 ║
 ╚═══════════════════════════════════════════════════════════════════════════╝
*/

#include ExtAttr.vih

#doc
Интерфейс назначения иконок статусов договоров
#end
Interface SetDogIcons '' EscClose;
  Show at (,, 70, 10);

table struct tmpNotes
(
  nRec     : comp
, Name     : string
, IconName : string
);

Create View
Var
  pVidDoc
, wStatus   : word;

  cKatNotes : comp;

  oExtAtr   : iExtAttr;

  sLeaf
, sOpened
, sClosed
, sStatName : string;

From
  tmpNotes
;

Parameters
  pVidDoc
, cKatNotes
, wStatus
, sStatName
;

Browse brKatNotes (,,sci13Esc);
  Table tmpNotes;
Fields
  tmpNotes.IconName : Image;
  tmpNotes.Name     #3'Наименование' (,,sci1Esc) : [20], protect;
  tmpNotes.IconName #3'Иконка'                   : [40], protect;

end;

#define SHOW_NOTES_ICONS
#include DogIcons.vpp

HandleEvent // Interface

cmInit:
{
  case pVidDoc of
  400: SetTitle('Иконки договора в статусе "' + sStatName + '"');
  401: SetTitle('Иконки соглашения в статусе "' + sStatName + '"');
  403: SetTitle('Иконки календарного плана в статусе "' + sStatName + '"');
  end;

  sLeaf   := 'Иконка. Лист';
  sOpened := 'Иконка. Папка закрыта';
  sClosed := 'Иконка. Папка открыта';

  oExtAtr.CreateAttr(coKatNotes, sLeaf  , word(0));
  oExtAtr.CreateAttr(coKatNotes, sOpened, word(0));
  oExtAtr.CreateAttr(coKatNotes, sClosed, word(0));

  InitDocIconsArray;

  Delete all tmpNotes;

  ClearBuffer(#tmpNotes);
  tmpNotes.nRec     := 1;
  tmpNotes.Name     := 'Лист';
  tmpNotes.IconName := GetDocTreeIconEx(pVidDoc, wStatus, ntfText, cKatNotes);
  Insert Current tmpNotes;

  ClearBuffer(#tmpNotes);
  tmpNotes.nRec     := 2;
  tmpNotes.Name     := 'Папка закрыта';
  tmpNotes.IconName := GetDocTreeIconEx(pVidDoc, wStatus, ntfClose, cKatNotes);
  Insert Current tmpNotes;

  ClearBuffer(#tmpNotes);
  tmpNotes.nRec     := 3;
  tmpNotes.Name     := 'Папка открыта';
  tmpNotes.IconName := GetDocTreeIconEx(pVidDoc, wStatus, ntfOpen, cKatNotes);
  Insert Current tmpNotes;
}

cmPick:
{
  if ( RunInterface('GetIcon', tmpNotes.IconName) <> cmCancel )
    {
      case tmpNotes.nRec of
        1 : oExtAtr.sSetAttr(coKatNotes, cKatNotes, sLeaf  , tmpNotes.IconName);
        2 : oExtAtr.sSetAttr(coKatNotes, cKatNotes, sClosed, tmpNotes.IconName);
        3 : oExtAtr.sSetAttr(coKatNotes, cKatNotes, sOpened, tmpNotes.IconName);
      end;

      Update Current tmpNotes;

      RereadRecord(#tmpNotes);
    }
}

cmDelOnProtect:
{
  var Str : String;

  case tmpNotes.nRec of
    1 :
      {
        Str := GetDocTreeIcon(pVidDoc, wStatus, ntfText );
        oExtAtr.sSetAttr(coKatNotes, cKatNotes, sLeaf  , '');
      }
    2 :
      {
        Str := GetDocTreeIcon(pVidDoc, wStatus, ntfClose);
        oExtAtr.sSetAttr(coKatNotes, cKatNotes, sClosed, '');
      }
    3 :
      {
        Str := GetDocTreeIcon(pVidDoc, wStatus, ntfOpen );
        oExtAtr.sSetAttr(coKatNotes, cKatNotes, sOpened, '');
      }
  end;

  tmpNotes.IconName := Str;
  Update Current tmpNotes;
  RereadRecord(#tmpNotes);
}

end;
end.
