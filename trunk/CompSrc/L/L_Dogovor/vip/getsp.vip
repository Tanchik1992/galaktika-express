//********************************************************************************
//                                                        (c) корпорация Галактика
// Галактика 5.85 - логистика
// Выбор спецификации из договора-соглашения-календарного плана
//********************************************************************************

#include DOfuns.vih

#doc
Интерфейс выбора спецификации из договора-соглашения-календарного плана для сохранения в буфере обмена спецификациями
#end
Interface GetSpecToCopy 'Выберите спецификацию и нажмите ENTER' (, hcdgPosSelect,) DoAccept, EscClose, Cyan;
  Show at (, 3,, 20);

#include DOfuns.var

Create view

Var
  s_SimvRub : string;

  pTiDk     : word;

  pDoc      : comp;

  Marker
, MarkerInd : longint;

As select
  if(SpStep.PrMC = 1, 'Т',
    if(SpStep.PrMC = 2, 'У',
      if(SpStep.PrMC = 3 , '%',
        if(SpStep.PrMC = 4 , 'С',
          if(SpStep.PrMC = 5 , 'В',
            if(SpStep.PrMC = 6 , 'О',
              if(SpStep.PrMC = 7 , 'Ск', // Скидка в ДО на продажу
                  '')))))))
    ( FieldName = BDPrMCUsl )

, if(SpSopr.PrMC = 1, 'Т',
    if(SpSopr.PrMC = 2, 'У',
      if(SpSopr.PrMC = 3, '%',
        if(SpSopr.PrMC = 4, 'С',
          if(SpSopr.PrMC = 5, 'В',
            if(SpSopr.PrMC = 6, 'О', ''))))))
    ( FieldName = KSPrMCUsl )

, if(SpDocs.PrMC = 1, 'Т',
    if(SpDocs.PrMC = 2, 'У',
      if(SpDocs.PrMC = 3, 'УП',
         if(SpDocs.PrMC = 4, 'ДС',
           if(SpDocs.PrMC = 5, 'ГП', '')))))
    ( FieldName = DogPrMCUsl )

, if(SpDocs.PrMC = 1, DogGrMC.Name,
    if(SpDocs.PrMC = 2, DogGrUsl.Name,
      if(SpDocs.PrMC = 3, DogGrUsl.Name,
        if(SpDocs.PrMC = 4, DogGrMC.Name,
          if(SpDocs.PrMC = 5, DogGrMC.Name, '')))))
    ( FieldName = DogGrMCUsl )

, if(SpStep.PrMC = 1, BDKatMC.BarKod, BDKatUsl.Kod )
    ( FieldName = BDNomenkl )

, if(SpStep.PrMC = 1, BDKatMC.Name, BDKatUsl.Name)
    ( FieldName = BDNamTovar )

, if(SpSopr.PrMC = 1, KSKatMC.BarKod, KSKatUsl.Kod)
    ( FieldName = KSNomenkl )

, if(SpSopr.PrMC = 1, KSKatMC.Name, KSKatUsl.Name)
    ( FieldName = KSNamTovar )

, if(((SpDocs.PrMC = 1) or (SpDocs.PrMC = 4) or (SpDocs.PrMC = 5)), DogKatMC.BarKod, DogKatUsl.Kod)
    ( FieldName = DogNomenkl )

, if(((SpDocs.PrMC = 1) or (SpDocs.PrMC = 4) or (SpDocs.PrMC = 5)), DogKatMC.Name,   DogKatUsl.Name)
    ( FieldName = DogNamTovar )

, if(SpStep.PrMC = 3, SpStep.Summa, oDOfuns.DoRound(BaseDoc.cVal, BaseDoc.VidDoc, SpStep.Kol*SpStep.Price))
    ( FieldName = BDSummaTov )

, if(SpSopr.PrMC = 3, 0, if(KatSopr.cVal = 0, SpSopr.Price, SpSopr.VPrice))
    ( FieldName = KSPrV )

, if(SpSopr.PrMC = 3, if(KatSopr.cVal = 0, SpSopr.Price, SpSopr.VPrice), KSPrV * SpSopr.KolFact)
    ( FieldName = KSSumPrice )

, if(KatSopr.cVal = 0, if(s_SimvRub <> '', s_SimvRub, 'НДЕ'), KSKlVal.SimVolV)
    ( FieldName = KSValut )

, if(BaseDoc.cVal = 0, if(s_SimvRub <> '', s_SimvRub, 'НДЕ'), BDKlVal.SimVolV)
    ( FieldName = BDValut )

, if(SpDocs.cVal = 0, if(s_SimvRub <> '', s_SimvRub, 'НДЕ'), DogKlVal.SimVolV)
    ( FieldName = DogValut )

, *

From
  StepDoc
, SpStep
, KatSopr
, SpSopr
, SpDocs
, SpDocs   SpDocs439
, BaseDoc
, KatMC    BDKatMC
, KatMC    KSKatMC
, KatMC    DogKatMC
, KatUsl   BDKatUsl
, KatUsl   KSKatUsl
, KatUsl   DogKatUsl
, KatOtpEd BDOtpEd
, KatOtpEd KSOtpEd
, KatOtpEd DogOtpEd
, GroupMC  BDGrMC
, GroupMC  KSGrMC
, GroupMC  DogGrMC
, GroupUsl BDGrUsl
, GroupUsl KSGrUsl
, GroupUsl DogGrUsl
, KlVal    KSKlVal
, KlVal    BDKlVal
, KlVal    DogKlVal

Where
((
    pDoc            == StepDoc.cBaseDoc
and pDoc            == BaseDoc.nRec
and StepDoc.nRec    == SpStep.cStepDoc
and SpStep.cMCUSL   == BDKatMC.nRec
and SpStep.cMCUSL   == BDKatUsl.nRec
and SpStep.cOtpEd   == BDOtpEd.nRec

and pDoc            == SpSopr.cSopr
and SpSopr.cMCUSL   == KSKatMC.nRec
and SpSopr.cMCUSL   == KSKatUsl.nRec
and SpSopr.cOtpEd   == KSOtpEd.nRec

and KatSopr.cValut  == KSKlVal.nRec
and BaseDoc.cVal    == BDKlVal.nRec
and SpDocs.cVal     == DogKlVal.nRec

and pTiDk           == SpDocs.TiDk
and pDoc            == SpDocs.cDoc
and SpDocs.cMCUSL   == DogKatMC.nRec
and SpDocs.cMCUSL   == DogKatUsl.nRec
and SpDocs.cOtpEd   == DogOtpEd.nRec
and SpDocs.cGrMCUsl == DogGrMC.nRec
and SpDocs.cGrMCUsl == DogGrUsl.nRec
and word(439)       == SpDocs439.TiDk
and SpDocs.nRec     == SpDocs439.cDoc
))
;
Parameters
  pDoc
, pTiDk
;

Function CurSpNrec : comp;
{
  case pTiDk of
    41, 51:
      CurSpNrec := SpStep.nRec;
    111, 211, 101, 201:
      CurSpNrec := SpSopr.nRec;
    400, 401, 403:
      CurSpNrec := SpDocs.nRec;
  end;
}

Function Marked : boolean;
{
  Marked := SearchMarker(Marker, CurSpNrec, MarkerInd);
}

Procedure AfterMark;
{
  case pTiDk of
    // ДО
    41, 51:
      if ( GetNext SpStep = tsOk )
        CallToNeighBours(cmPosDown, #SpStep);
    // сопроводительные документы
    111, 211, 101, 201:
      if ( GetNext SpSopr = tsOk )
        CallToNeighBours(cmPosDown, #SpSopr);
    // договоры, соглашения, ПКП
    400, 401, 403:
      if ( GetNext SpDocs = tsOk )
        CallToNeighBours(cmPosDown, #SpDocs);
  end;
}

Procedure DoSelectAll;
{
  case pTiDk of
    // ДО
    41, 51:
      {
        PushPos(#SpStep);
        _LOOP SpStep
            {
              InsertMarker(Marker, SpStep.nRec);
              NextVisual;
            }
        PopPos(#SpStep);
      }
    // сопроводительные документы
    111, 211, 101, 201:
      {
        PushPos(#SpSopr);
        _LOOP SpSopr
            {
              InsertMarker(Marker, SpSopr.nRec);
              NextVisual;
            }
        PopPos(#SpSopr);
      }
    // договоры, соглашения, ПКП
    400, 401, 403:
      {
        PushPos(#SpDocs);
        _LOOP SpDocs
            {
              InsertMarker(Marker, SpDocs.nRec);
              NextVisual;
            }
        PopPos(#SpDocs);
      }
  end;
}

Browse brSpBaseDoc (,, sci1EnIns);
  Table SpStep;
Fields { Font = { Color = if(Marked, ColorMark, 0) } };
//------------------------------------------------------------------------------
  if(Marked, '√', '')
                #3'√' : [1], Skip, Centered;
//------------------------------------------------------------------------------
  BDPrMCUsl     #3'*'
                ('МЦ/Услуга')
                :  [2], Skip, Centered;
//------------------------------------------------------------------------------
  BDNamTovar    #3'Наименование'
                ('Наименование МЦ/услуги')
                : [16], Protect;
//------------------------------------------------------------------------------
  BDNomenkl     #3'Ном.номер'
                ('Номенклатурный номер')
                : [13], Protect;
//------------------------------------------------------------------------------
  BDOtpEd.Name  #3'ЕдИзм'
                ('Наименование отпускной единицы')
                :  [5], Protect, Centered;
//------------------------------------------------------------------------------
  SpStep.KolSkl #3'Количество'
                ('Количество')
                : [10], [prSignsInKol], Protect;
//------------------------------------------------------------------------------
  SpStep.Price  #3'Цена за единицу'
                ('Цена за единицу')
                : [12], [brForPrice], Protect;
//------------------------------------------------------------------------------
  BDValut       #3'Валюта'
                ('Символ валюты')
                :  [7], Protect, Centered;
//------------------------------------------------------------------------------
  BDSummaTov    #3'Стоимость'
                ('Стоимость')
                : [16], [brForSumma], Protect;
//------------------------------------------------------------------------------
end;

//******************************************************************************

Browse brSpKatSopr (,, sci1EnIns);
  Table SpSopr;
Fields { Font = { Color = if(Marked, ColorMark, 0) } };
//------------------------------------------------------------------------------
  if(Marked, '√', '')
                 #3'√'
                 : [1], Skip, Centered;
//------------------------------------------------------------------------------
  KSPrMCUsl      #3'*'
                ('МЦ/Услуга')
                :  [1], Skip, Centered;
//------------------------------------------------------------------------------
  KSNamTovar     #3'Наименование'
                ('Наименование МЦ/услуги')
                : [16], Protect;
//------------------------------------------------------------------------------
  KSNomenkl      #3'Ном.номер'
                ('Номенклатурный номер')
                : [13], Protect;
//------------------------------------------------------------------------------
  KSOtpEd.Name   #3'ЕдИзм'
                ('Наименование отпускной единицы')
                : [5], Protect, Centered;
//------------------------------------------------------------------------------
  SpSopr.KolFact #3'Количество'
                ('Количество')
                : [10], [prSignsInKol], Protect;
//------------------------------------------------------------------------------
  KSPrV          #3'Цена'
                ('Цена за единицу')
                : [12], [brForPrice], Protect;
//------------------------------------------------------------------------------
  KSValut        #3'Валюта'
                ('Символ валюты')
                :  [7], Protect, Centered;
//------------------------------------------------------------------------------
  KSSumPrice     #3'Стоимость'
                ('Стоимость')
                : [16], [brForSumma], Protect;
//------------------------------------------------------------------------------
end;

//******************************************************************************

Panel pSpDocs;
  Table SpDocs;

Tree 2 brSpDog (,, sci1EnIns);
Fields { Font = { Color = if(Marked, ColorMark, 0) } };
//------------------------------------------------------------------------------
  if(Marked, '√', '')
                #3'√'
                : [1], Skip, Centered;
//------------------------------------------------------------------------------
  DogPrMCUsl    #3'*'
                ('МЦ/Услуга')
                :  [1], Skip, Centered;
//------------------------------------------------------------------------------
  DogGrMCUsl    #3'Группа'
                ('Группа МЦ/услуги')
                : [16], Protect;
//------------------------------------------------------------------------------
  DogNamTovar   #3'Наименование'
                ('Наименование МЦ/услуги')
                : [16], Protect;
//------------------------------------------------------------------------------
  DogNomenkl    #3'Ном.номер'
                ('Номенклатурный номер')
                : [13], Protect;
//------------------------------------------------------------------------------
  DogOtpEd.Name #3'ЕдИзм'
                ('Наименование отпускной единицы')
                :  [5], Protect, Centered;
//------------------------------------------------------------------------------
  SpDocs.Kol    #3'Количество'
                ('Количество')
                : [10], [prSignsInKol], Protect;
//------------------------------------------------------------------------------
  SpDocs.Price  #3'Цена'
                ('Цена')
                : [12], [brForPrice], Protect;
//------------------------------------------------------------------------------
  DogValut      #3'Валюта'
                ('Символ валюты')
                : [7], Protect, Centered;
//------------------------------------------------------------------------------
  SpDocs.Summa  #3'Сумма'
                ('Сумма')
                : [16], [brForSumma], Protect;
//------------------------------------------------------------------------------
end;

//******************************************************************************

HandleEvent

cmTreeNodeType:
  TreeSetNodeType(brSpDog, 2, if(RecordExists SpDocs439 = tsOk,
                                 #ifdef ComponentVersion
                                 'L_DOGOVOR::' +
                                 #end
                                 'bmpGsSpDocsZamen', ''));

end;

end; // Panel

//******************************************************************************

HandleEvent

cmInit:
  {
    Marker := InitMarker('SpecToCopy', 8, 100, 10);
    ClearMarker(Marker);
    case pTiDk of
      41, 51:
        {
          SetFormat(brSpBaseDoc);
          if ( GetFirst SpStep <> tsOK )
            {
              message('Спецификация документа пуста.');
              Abort;
              Exit;
            }
        }
      111, 211, 101, 201:
        {
          SetFormat(brSpKatSopr);
          if ( GetFirst SpSopr <> tsOK )
            {
              message('Спецификация документа пуста.');
              Abort;
              Exit;
            }
        }
      400, 401, 403:
        {
          SetFormat(brSpDog);
          if ( GetFirst SpDocs <> tsOK )
            {
              message('Спецификация документа пуста.');
              Abort;
              Exit;
            }
        }
    else
      {
        message('Неправильный тип документа: должен быть 41, 51, 101, 111, 201, 211, 400, 401, 403!')
        Abort;
        Exit;
      }
    end;
    s_SimvRub := sGetTune('NDE.SimvRub');
    RereadRecord;
  }

cmDone:
  DoneMarker(Marker, '');

cmDefault:
  {
    if ( GetMarkerCount(Marker) = 0 )
      ProcessCommand(cmMarkUnMark);

    if ( GetMarkerCount(Marker) <> 0 )
      {
        DoneMarker(Marker, 'SpecToCopy');
        CloseInterface(cmDefault);
      }
    else
      Stop;
  }

cmMarkUnMark:
  {
    if SearchMarker(Marker, CurSpNrec, MarkerInd)
      DeleteMarker(Marker, CurSpNrec)
    else
      InsertMarker(Marker, CurSpNrec);

    AfterMark;
    ReReadRecord;
  }

cmSelectAll:
  {
    StartNewVisual(vtRotateVisual, vfTimer, 'Помечаю ', 1);
    DoSelectAll;
    StopVisual('', 0);
    ReReadRecord;
  }

cmUnSelectAll:
  {
    ClearMarker(Marker);
    ReReadRecord;
  }

end;

end.