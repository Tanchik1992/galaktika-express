#include lnkdocdg.vpp  // просмотр схемы связей документов
#include dogattr.vpp

cmSchema: // схема платежей
  {
    if Not CheckKontrLinks
      Exit;

    UpDateInsertDogovor;

    RunWindowModal(wiDogovorSchema);
  }

cmAttrib: // расширенная информация
  {
    if Not CheckKontrLinks
      Exit;

    UpDateInsertDogovor;

    RunWindowModal(wiDogovorAttrib);
    ReReadRecord(#Dogovor);
  }

cmValue2: // Просмотр подробной информации по контрагенту1;
  {
    UpDateInsertDogovor;

    if ( OldSubject1 <> AttrDog.Subject1 )
      if ( update current AttrDog <> tsOk )
        {}

    RunInterface('AttrDog', word(0), Dogovor.nRec);
    ReReadRecord(#Dogovor);
  }

cmValue3:   //Просмотр подробной информации по контрагенту2;
  {
    var cKontr_Old : comp;

    cKontr_Old := Dogovor.cOrg;

    UpDateInsertDogovor;

    if ( OldSubject1 <> AttrDog.Subject1 )
      if ( update current AttrDog <> tsOk )
        {}

    RunInterface('AttrDog',word(1),Dogovor.nRec);

    ReReadRecord(#Dogovor);

    if ( cKontr_Old <> Dogovor.cOrg )
      {
        oSpDocs.ChangeOrgInNal(Dogovor.TiDk, Dogovor.nRec, Dogovor.cOrg);
        oSpDocs.ReCalcSpec(Dogovor.TiDk, Dogovor.nRec);
        ReCalcSummaDogovor;
      }
  }

cmValue5: // Спецификация
  {
    if Not CheckKontrLinks
      Exit;

    UpDateInsertDogovor;

    bSpec := (RecordExists SpDocs where (( DogOwner.TiDk == SpDocs.TiDk and
                                           DogOwner.nRec == SpDocs.cDoc )) = tsOk);

    RunWindowModal(wiSpDog);

    ReReadRecord(#Dogovor);

    SetFieldVisible(#isSpDog, RecordExists SpDocs = tsOk);
  }

cmValue6: // План
  {
    if Not CheckKontrLinks
      Exit;

    UpDateInsertDogovor;

    RunInterface('CalPlan', Dogovor.nRec, comp(0));
    ReReadRecord(#Dogovor);
    SetFieldVisible(#isCalPlan, (RecordExists CalPlan = tsOk));
    SetFieldVisible(#isSpDog  , (RecordExists SpDocs  = tsOk));
  }

cmValue7:   //Акт сверки';
  {
    if Not CheckKontrLinks
      Exit;

    UpDateInsertDogovor;

    RunInterface('AktSver', Dogovor.nRec);

    ReReadRecord(#Dogovor);

    SetFieldVisible(#AktSver.dDoc  , RecordExists AktSver = tsOk);
    SetFieldVisible(#AktSver.Status, RecordExists AktSver = tsOk);
  }

cmValue10:
  {
    if Not CheckKontrLinks
      Exit;

    UpDateInsertDogovor;

    RunWindowModal(BrouseTextRepr);
  }

cmValFld3:
  {
    var pDogovor: comp;

    if ( Dogovor1.cDogovor = 0 )
      pDogovor := Dogovor.nRec
    else
      if ( GetFirst IerDog where (( Dogovor.nRec == IerDog.cRec )) = tsOK )
        pDogovor := IerDog.cDogovor
      else
        pDogovor := Dogovor.cDogovor;

    SaveMyDsk(pDogovor, 'GetDAK_Dogovor');

    var FilterInfo: TFilterDog;
    FilterInfo.Filter := 0;

    RunInterface('GetDocs2', pDogovor
                           , if(Dogovor1.cDogovor = 0, comp(0), Dogovor.nRec)
                           , longint(vcGetDog_Dogovor)
                           , FilterInfo);
  }

cmValFld10:
  {
    var pDogovor: comp;

    if ( Dogovor1.cDogovor = 0 )
      pDogovor := Dogovor.nRec
    else
      if ( GetFirst IerDog where (( Dogovor.nRec == IerDog.cRec )) = tsOK )
        pDogovor := IerDog.cDogovor
      else
        pDogovor := Dogovor.cDogovor;

    SaveMyDsk(pDogovor, 'GetDAK_Dogovor');

    var FilterInfo: TFilterDog;
    FilterInfo.Filter := 0;

    RunInterface('GetDocs2', pDogovor
                           , if(Dogovor1.cDogovor = 0, comp(0), Dogovor.nRec)
                           , longint(vcGetDog_Zamena + vcGetDog_Dogovor)
                           , FilterInfo);
  }

cmValFld13:
  RunInterface('RltDogInfo', Dogovor.nRec);

cmValFld20:
  {
    RunInterface('DogovorInSchem', Dogovor.nRec, Dogovor.TiDk);
    DogToObj;
  }

cmPlansNo:
  {
    toc1 := 1;
    PrintDogovorxl;
  }

cmPrintDoc:
  PrintDogovor;

//связь с книгой финансовых операций
#include fpBook01.vpp

cmGoToNextLevel:
  if UpdateTable
    ProcessCommand(cmGoToNextLevel);

cmGoToPrevLevel:
  if UpdateTable
    ProcessCommand(cmGoToPrevLevel);

cmGoToNextDoc:
  if UpdateTable
    ProcessCommand(cmGoToNextDoc);

cmGoToPrevDoc:
  if UpdateTable
    ProcessCommand(cmGoToPrevDoc);

cmValue15:
  PrintSpecifPlain;

cmValue16:
  PrintSpecifXls;

// Печать справки о подтверждающих документах
cmValue14:
  PrintSpravkaForDogovor;

// Спецификация договора поставки
cmValue25 :
{
  RunInterface(MTR_Sp, Dogovor.NRec, True);
}

// Настройка отчета Спецификация договора поставки
cmValue26 :
{
  RunInterface(MTR_Sp, Dogovor.NRec, False);
}

cmOpenSearch:
  {
    case CurField of
      #KatOrg.Name, #KatOrg1.Name:
        {
          if NullVipRef(oChkLink)
            GetVipRef(oChkLink, 'KatOrg');

          if oChkLink.CheckLinks(coKatOrgDescr)
            QuickChoiceName := 'qcKatOrgName'
          else
            QuickChoiceName := 'qcKatOrgTreeName';

          ProcessCommand(cmPick);
        }
     else
       Abort;
    end;
  }

cmValue11:
  {
    DocSchem.nRec    := 0;
    DocSchem.DesGr   := Dogovor.DesGr;
    DocSchem.Descr   := DOgovor.Descr;
    DocSchem.dDoc    := Dogovor.dDoc;
    DocSchem.NoDoc   := Dogovor.NoDoc;
    DocSchem.cDoc    := Dogovor.nRec;
    DocSchem.TiDkGal := 400;
    DocSchem.Status  := 1;
    DocSchem.cNote   := oNotes.GetFirstNote(word(445), word(1));

    insert current DocSchem;

    SpSchem.nRec     := 0;
    SpSchem.cSchem   := DocSchem.nRec;
    SpSchem.cUpDoc   := 0;
    SpSchem.cDoc     := DocSchem.cDoc;
    SpSchem.TiDk     := DocSchem.TiDkGal;
    SpSchem.cBaseDoc := 0;
    SpSchem.TiDkBase := 0;
    SpSchem.Comment  := '';

    insert current SpSchem;

    Message('Сформирована схема связей № ' + DocSchem.NoDoc + ' от ' + string(DocSchem.dDoc) + '.', okButton);
  }

cmManagerId:
  {
    if IsNew
      if ( Not IsModified )
        {
          Message('Переход невозможен, так как документ не заполнен.', OkButton);
          Exit;
        }

    UpDateInsertDogovor;

    if ( RunInterface('GetDescr', CurDescr, CurDesGr, CurVisible) <> cmCancel )
      {
        SetDescrBounds(FALSE);
        ReReadRecord(#Dogovor1);
      }
  }

cmValue12:
  {
    ID := 'L_Dogovor\dogovor';

    if ( Not ReadMyDsk(sXLTFileName, ID, TRUE) )
      set sXLTFileName := TranslatePath('%ClientStartPath%') + 'XLS\' + ID + '.xlt';

    RunInterface('xlrepsetup', 1, ID, sXLTFileName);

    ReadMyDsk(sXLTFileName, ID, TRUE);
  }

cmValFld1: // лонгирование договора/соглашения
  {
    if NotEditDogPos(FALSE)
      {
        Abort;
        Exit;
      }

    if (
        ( Dogovor.Status <> 1 ) // лонгирование только для исполняемых
          AND
        ( Dogovor.Status <> 2 ) // и приостановленных договоров/соглашений
       )
      {
        Message('Срок действия может быть продлен, только если'#13
              + if(Dogovor.cDogovor = 0, 'договор', 'соглашение')
              + ' имеет статус "исполняемый" или "приостановлен"!', Information + OkButton);
        Abort;
        Exit;
      }

    var NewEndDate: date;
    var strOsnova : string[45];

    NewEndDate := Dogovor.dEnd;
    strOsnova  := '';

    if ( RunDialog('LongDogovor', NewEndDate, strOsnova) <> cmCancel )
    if ( RunDialog('LongDogAttac', NewEndDate, strOsnova) = cmCancel )
      Exit;

    if ( NewEndDate <= Dogovor.dEnd )
      Message('Новая дата окончания '
            + if(Dogovor.cDogovor = 0, 'договора', 'соглашения') + ''#13
            + 'должна быть больше предыдущей!', Information + OkButton)
    else
      {
        set Dogovor.dEnd := NewEndDate;

        var strComment: string[80];

        strComment := if(Dogovor.cDogovor = 0, 'Договор продлен', 'Соглашение продлено')
                    + DateToStr(Dogovor.dEnd, ' до DD/MM/YYYY.')
                    + if(strOsnova <> '', ' ' + strOsnova, '');

        oStatlog.StatLog_Insert(Dogovor.TiDk, Dogovor.nRec, strComment);
      }
  }

cmHotKeys:
  {
    if not UKS_Used
      DisableCommand(cmValFld20);

    var mnuName: string;

    mnuName := #AddComp('L_DOGOVOR')if(Dogovor1.cDogovor = 0, 'mnuDogovorEdit', 'mnuDogovorAttacEdit');

    if (Dogovor.VidDog = 12)
      mnuName := mnuName + ';' + #AddComp('L_DOGOVOR')'mnuDogRltInfo';

    // динамически добавляется меню "связь с книгой финансовых операций"
    PutHotCommand(RunDynMenu(MakeMenuWithViewFpOborot(mnuName) + ';SEPARATOR;' + #AddComp('L_DOGOVOR')'mnuDogovorEditVn'));
  }

cmDone:
  {
    if (CurTable = #SpDocs)
      UpdateTable;

    if ( Dogovor.dBeg > Dogovor.dEnd )
      {
        Message('Перепутаны даты действия ' + if(Dogovor.cDogovor = 0, 'договора', 'соглашения'), Cancel);
        Abort;
        Exit;
      }

    UpDateInsertDogovor;

    if ( OldSubject1 <> AttrDog.Subject1 )
      if ( update current AttrDog <> tsOk )
        {}

    SetFieldProtected(#Dogovor.dDoc, TRUE);
    SetFieldProtected(#Dogovor.dBeg, TRUE);
    SetFieldProtected(#Dogovor.dEnd, TRUE);

    // пересчет сумм вышестоящих соглашений и договора при изменении
    // суммы текущего соглашения
    if ( Dogovor.cDogovor <> 0 )
      RecalcSumOwnerDogs(OldSumDog, OldSumNDS, cValDog, TRUE);

    var cRec: comp; cRec := Dogovor.nRec; pDogovor := Dogovor.cDogovor;

    SetDescrBounds(FALSE);

    TreeJumpToRecord(MainTree, cRec);
  }

cmVal1:
  {
    var cDog    : comp; cDog    := if (Dogovor.cDogovor = 0 , Dogovor.NRec, Dogovor.cDogovor);
    var cAppDog : comp; cAppDog := if (Dogovor.cDogovor <> 0, Dogovor.NRec, 0);

    RunInterface('DogMail', cDog, cAppDog, comp(0));
  }
