//╔═══════════════════════════════════════════════════════════════════════════╗
//║ Назначение    : Формирование Pick по складам разрешенным для              ║
//║                 пользователя для получения ведомости движения по складам  ║
//╚═══════════════════════════════════════════════════════════════════════════╝
// Аналог Interface pecrpv, но для вызова в випе

//******************************************************************************

#doc
Назначение:
  Формирование Pick по складам разрешенным для
  пользователя для получения ведомости движения по складам

Параметры:
  Res - результат обработки
#end

//******************************************************************************

Interface pecrpv_v;

Create View
var
  Res : word;
From
  Pick,
  KatPodr
;
Parameters
  Res;

HandleEvent

cmInit :
  {
    if (coGetTune('Pick.cGrPodr') = 0)
      {
        Res := 2;
        CloseInterface(0);
        Exit;
      }

    delete Pick where ((word(555) == Pick.wlist));

    Res := 0;
    StartNewVisual(vtNumericVisual,vfTimer,''#3'Сканируется список разрешенных складов: ',1);
    _loop KatPodr
          where ((coGetTune('Pick.cGrPodr') == KatPodr.cGrPodr and
                  0 <<= KatPodr.Sklad))
      {
        Pick.cRec := KatPodr.NRec;
        Pick.WList := 555;
        if (insert current Pick = tsOk)
          Res := 3
        else
          {
            Res := 1;
            Break;
          }
        NextVisual;
      }
    StopVisual('',0);
    CloseInterface(0);
  }
end; // HandleEvent

end. // interface
