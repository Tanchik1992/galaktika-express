//******************************************************************************
//                                                      (c) корпорация Галактика
// Галактика 7.12 - Логистика
// Интерфейс для работы с импортными ГТД
//******************************************************************************

#include sopigtd.vih
#include bookcon.vih
#include Actualit.vih
#include notes.vih
#include SpDocs.vih
#include NalTunes.vih
#include SpNext.vih
#include SDfuns.vih

#ifdef ATL51
#include SchNalogInfo.vih
#end
#include sfmacros.inc
#include KontrBal.vih
#include SchFactFunctions.vih
#include DelSopr.vih
#include SHManager.vih
#include TotalLog.vih  // Обьектный интерфес общего лога

//******************************************************************************

#doc
Назначение:
  Интерфейс для работы с импортными ГТД

Параметры:
  Параметров нет - используется как объектный интерфейс
#end

//******************************************************************************

Interface ISopIGTD;

//******************************************************************************

#include sfconst.inc   // Основные константы и функции СФ
#include SDfuns.var
#include SpNext.var
#include TotalLog.var  // Переменная-объект для общих логов

//******************************************************************************
// для связи многие ко многим используется таблица DogRelat.
// DogRelat.VidRelate = cgCustomAkt

Table Struct tmpNAkts //
(
  NRec       : comp
, dSopr      : Date  // дата прих.накладной
, cKatSopr   : comp  // ссылка на приходную накладную
, cNalogAkt  : comp  // ссылка на налоговый акт
, cBKPrZk    : comp
)
With INDEX
(
  tmpNAkts01 = dSopr
);

//******************************************************************************

Table Struct tmpLnkTbl
(
  NRec     : comp
, cLnkTbl  : comp   // ссылка на запись в таблице связей
, cSopr    : comp   // ссылка на приходную накладную
, cOrg     : comp   // ссылка на получателя налогов
)
With INDEX
(
  tmpLnkTbl01 = cLnkTbl+cOrg+cSopr
, tmpLnkTbl02 = cLnkTbl+cSopr+cOrg
);

//******************************************************************************

Create view loImpGTD
var
//------------------------------------------------------------------------------
  myPlansNo
, KatSoprNRec
, cLnkRec
, cOrgCustom
                : comp;
//------------------------------------------------------------------------------
  MrkNalAkts
, MrkKS                  // список приходных накладных
, MrkKS2Reg
, IndKS
                : longint;
//------------------------------------------------------------------------------
  wDateGTD
, wIsOwnAkt
                : word;
//------------------------------------------------------------------------------
  dBegDateGTD
, dDateGTD
                : Date;
//------------------------------------------------------------------------------
  oNotes        : iNotes;
//------------------------------------------------------------------------------
  strTmpNAkts
                : string;
//------------------------------------------------------------------------------
  boIsCreateNAkts
, boIsRegisterNAkts
, boAbortCreateSvNAkts
                : boolean;

  // Для регистрации ГТД из интерфейса объекта строительства (Беларусь)
  bIsRegFromStroy                               : Boolean;
  doBenefitsKoef_BuyStroyBel_GTD                : Double;
  cObject_BuyStroyBel_GTD, cDoc_BuyStroyBel_GTD : Comp;
  wTiDk_BuyStroyBel_GTD                         : Word;

  // Настройки
  wTune_Country, wTune_FormUch, wTune_SoprStatus : Word;
  sTune_Descr, sTune_DesGr                       : String;
  coTune_cGrNalUsl, coTune_Bel_GTD_Status        : Comp;
  boTune_RequestPartyGTD, boTune_ChangeDescr, boTune_AssociationSummGTD,
  boTune_RequestDateGTD, boTune_KontrOplGTD      : Boolean;

from
  KatSopr
, SpSopr
, SpDocNal
, KatSopr SopKatSopr
, KatSopr GtdKatSopr
, SpSopr SopSpSopr
, KatUsl
, KatOtpEd SopOtpEd
, GroupUsl
, KatNalog
, SchFact
, FILIAL, BASEDOC
, DogRelat LnkTbl
, tmpNAkts
, BookPrZk BkPrZk
, tmpLnkTbl

Where
((
       KatSopr.NRec       ==  SpSopr.cSopr
  AND  SpSopr.VidSopr     ==  SpDocNal.TipDoc
  AND  SpSopr.NRec        ==  SpDocNal.cSpDoc
  AND  SpDocNal.cNalog    ==  KatNalog.NRec

  AND  SopKatSopr.NRec    ==  SopSpSopr.cSopr
  AND  word(2)            ==  SopSpSopr.PrMC
  AND  SopSpSopr.cMCUsl   ==  KatUsl.NRec
  AND  word(2)            ==  SopOtpEd.PrMC
  AND  KatNalog.cUsl      ==  SopOtpEd.cMCUsl
  AND  word(1)            ==  SopOtpEd.Akt

  AND  SopSpSopr.NRec     ==  SpSopHoz.cSpSopr
  AND  SpSopHoz.cSoprHoz  ==  SoprHoz.NRec
))

Bounds byKatSopr =
       TmpNAkts.cKatSopr == KatSopr.NRec
Bounds byNalogAkt =
       TmpNAkts.cNalogAkt == SopKatSopr.NRec
Bounds byBkPrZk =
       SopKatSopr.NRec   == BkPrZk.cSopr
;

//******************************************************************************

#include Actualit.var
#include KontrBal.var

//******************************************************************************

var
  iSF      : viSchFunc;
  iDelSopr : objDelSopr;
  oExtAtr  : iExtAttr;


//******************************************************************************

#include vSfMain.vpp // Функции для работы со СФ

Procedure PrintIfNeedSpNal(pcSpDocNal: comp);
{
}  // нужна для value_fi.vpp

#include value_fi.vpp

//******************************************************************************

#include vGetBk.vpp
#include schftxo.vpp

//******************************************************************************

Window winGetDateGTD 'Параметры формирования налоговых актов для регистрации ГТД' DoAccept, EscClose;
  Show at (40, 16, 100, 24);

//******************************************************************************

Panel pnNoTable;
  NoTableNavigation;

Screen scrGetDateGTD ('', , sci13Esc);

Fields
  wDateGTD ('Укажите способ определения даты налоговых актов', , sci1Esc): NoProtect;
  dDateGTD ('Укажите дату формирования ГТД', , sci13Esc): [, 'DD/MM/YYYY'], NoProtect;

Buttons
  cmOk, default, , 'Формирование налоговых актов';
  cmCancel, , , 'Отказ';
<<
 `Дата формирования ГТД `
 (.) задается пользователем        ` .@@@@@@@@@@@
 (.) из сопроводительного документа`

          <.Формировать.>   <.Отмена.>
>>
end; // Screen

//******************************************************************************

Screen scrGetDateSvGTD ('', , sci13Esc);

Fields
  wIsOwnAkt ('Формировать сводный налоговый актов/ для каждой накладной свой', , sci1Esc): NoProtect;
  dDateGTD ('Укажите дату формирования ГТД', , sci13Esc): [, 'DD/MM/YYYY'], NoProtect;

Buttons
  cmOk, default, , 'Формирование налоговых актов';
  cmCancel, , , 'Отказ';
<<

   [.]  сводный налоговый акт`
   `Дата формирования ГТД `.@@@@@@@@@@@

          <.Формировать.>   <.Отмена.>
>>
end; // Screen

//******************************************************************************

Screen scrGetDateGTD1 ('', , sci13Esc);

Fields
  wIsOwnAkt ('Формировать сводный налоговый актов/ для каждой накладной свой', , sci1Esc): NoProtect;
  wDateGTD ('Укажите способ определения даты налоговых актов', , sci1Esc): NoProtect;
  dDateGTD ('Укажите дату формирования ГТД', , sci13Esc): [, 'DD/MM/YYYY'], NoProtect;

Buttons
  cmOk, default, , 'Формирование налоговых актов';
  cmCancel, , , 'Отказ';
<<
   [.]  сводный налоговый акт`
   `Дата формирования ГТД `
 (.) задается пользователем        ` .@@@@@@@@@@@
 (.) из сопроводительного документа`

          <.Формировать.>   <.Отмена.>
>>
end; // Screen

//******************************************************************************

HandleEvent

cmCheckField:
  {
    SetFieldVisible(#dDateGTD, wDateGTD <> 1);

    if (wIsOwnAkt = 1)
      SetFormat(scrGetDateSvGTD)
    else
      SetFormat(if (GetMarkerCount(MrkKS) > 1, scrGetDateGTD1, scrGetDateGTD));
  }

end
end // Panel

//******************************************************************************

HandleEvent
cmInit:
  {
    if (GetMarkerCount(MrkKS) > 1)
      {
        wDateGTD := 0;
        wIsOwnAkt := 1;
        SetFormat(scrGetDateSvGTD)
      }
    else
      SetFormat(scrGetDateGTD);

    SetFieldVisible(#dDateGTD, wDateGTD <> 1);
  }

cmOk:
  {
    if (dDateGTD < dBegDateGTD)
      {
        set dDateGTD := dBegDateGTD;
        Message('Дата налогового акта не может быть меньше '+DateToStr(dDateGTD, 'DD/MM/YYYY')+'!', Warning);
        Stop
      }

    PutCommand(cmDefault);
  }

end
End;  //Window

//******************************************************************************

Window winTmpNAkts 'Перечень налоговых актов' DoAccept, EscClose;
  Show at (40, 15, 110, 27);

TabbedSheet Bottom tshTmpNAkts;

Screen scrTmpNAkts 'Краткая информация' ('Краткая информация о налоговых актах', , sci1Esc);
  Table TmpNAkts;

Fields
  strTmpNAkts ('Краткий перечень накладных', , sci1Esc): Protect;

Buttons
  cmOk, , , 'Продолжить формирование налоговых актов';
  cmCancel, default, , 'Отказ';
<<
 `Для накладных`
 .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

             сформированы налоговые акты для регистрации ГТД !

                      Сформировать их заново?

 ( имеющиеся записи регистрации ГТД в книге покупок будут удалены )

                    <.Продолжить.>     <.Отмена.>
>>
end; // Screen

//******************************************************************************

Browse brTmpNAkts 'Подробная информация' ('Подробная информация о налоговых актах', , sci1Esc);
  Table TmpNAkts;

Fields
  { Font = { Bold  = IsValid(tnBkPrZk) } };
//------------------------------------------------------------------------------
  [strKatSopr]
  KatSopr.NSopr+' от '+DateToStr(KatSopr.dSopr, 'DD/MM/YY')
                #3'Накладная'
                ('Номер и дата накладной', , )
                : [25], Protect;
//------------------------------------------------------------------------------
  [strNAkt]
  SopKatSopr.NSopr+' от '+DateToStr(SopKatSopr.dSopr, 'DD/MM/YY')
                #3'Налоговый акт'
                ('Номер и дата налогового акта', , )
                : [25], Protect;
//------------------------------------------------------------------------------
  [IsRegNAkt]
  if (IsValid(tnBkPrZk), 'зарегистрирован', '')
                #3'Признак'
                ('Зарегистрированность налогового акта', , )
                : [15], Protect;
//------------------------------------------------------------------------------
end; //Browse

end; //TabbedSheet

//******************************************************************************

HandleEvent

cmInit:
  {
    strTmpNAkts := '';
    PushBounds(tbByKatSopr);
    PushBounds(tbByNalogAkt);
    PushBounds(tbByBkPrZk);

    _LOOP TmpNAkts
     {
       if (InStr(KatSopr.NSopr, strTmpNAkts) = 0)
         strTmpNAkts := strTmpNAkts+'№ '+KatSopr.NSopr+', ';
     }
    strTmpNAkts := SubStr(strTmpNAkts, 1, Length(strTmpNAkts)-2);
    GetFirst TmpNAkts;
  }

cmOk:
  if (Message('Вы уверены?', Warning+YesNo+mfSwapButtons) <> cmYes)
    Stop;
  else
    {
      boIsCreateNAkts := TRUE;
      CloseWindow(winTmpNAkts);
    }

cmDone:
  {
    PopBounds(tbByKatSopr);
    PopBounds(tbByNalogAkt);
    PopBounds(tbByBkPrZk);
  }

end
End;  //Window

//******************************************************************************

Window winRegTmpNAkts 'Перечень налоговых актов для регистрации ГТД' DoAccept, EscClose;
  Show at (40, 10, 110, 28);

Browse brRegTmpNAkts '' ('Перечень налоговых актов, сформированных по накладным для регистрации ГТД', , sci1InsPMEsc);
  Show at (, , , 15);
  Table TmpNAkts;

Fields
   { Font = { Color = if (SearchMarker(MrkKS2Reg, tmpNAkts.cNalogAkt, indKS), ColorMark, 0) }};
//------------------------------------------------------------------------------
  [strMarker]
        if (SearchMarker(MrkKS2Reg, tmpNAkts.cNalogAkt, indKS), '√', '')
                #3'√'
                : [1], NoProtect;
//------------------------------------------------------------------------------
  [strNAktTxt]
        SopKatSopr.NSopr+' от '+DateToStr(SopKatSopr.dSopr, 'DD/MM/YY')
                #3'Налоговый акт'
                ('Номер и дата налогового акта', , )
                : [25], Protect;
//------------------------------------------------------------------------------
  [strKatSoprTxt]
        KatSopr.NSopr+' от '+DateToStr(KatSopr.dSopr, 'DD/MM/YY')
                #3'Накладная'
                ('Номер и дата накладной', , )
                : [25], Protect;
//------------------------------------------------------------------------------
  [IsRegNAktTxt]
        if (IsValid(tnBkPrZk), 'зарегистрирован', '')
                #3'Признак'
                ('Зарегистрированность налогового акта', , )
                : [15], Protect;
//------------------------------------------------------------------------------
end; //Browse

//******************************************************************************

Screen scrRegTmpNAkts '';
  Show at (, 16, , );
  Table TmpNAkts;

Buttons
  cmOk, default, , 'Зарегистрировать налоговые акты в книге покупок';
  cmCancel, , , 'Отказ';
<<
                  <.Зарегистрировать.>    <.Отмена.>
>>
end; // Screen

HandleEvent

cmInit:
  {
    MrkKS2Reg := InitMarker('NalAkts2Reg', 8, 100, 10, FALSE);
    ClearMarker(MrkKS2Reg);
    PushBounds(tbByKatSopr);
    PushBounds(tbByNalogAkt);
    PushBounds(tbByBkPrZk);
    GetFirst TmpNAkts;
  }

cmOk:
  {
    if (GetMarkerCount(MrkKS2Reg) = 0)
      {
        Message('Не выбрано ни одного налогового акта !');
        Stop;
      }

    if (Message('Зарегистрировать в книге покупок выбранные налоговые акты?', Confirmation+YesNo+mfSwapButtons) <> cmYes)
      Stop;
    else
      {
        boIsRegisterNAkts := TRUE;
        CloseWindow(winRegTmpNAkts);
      }
  }

cmDone:
  {
    DoneMarker(MrkKS2Reg, 'NalAkts2Reg');
    PopBounds(tbByKatSopr);
    PopBounds(tbByNalogAkt);
    PopBounds(tbByBkPrZk);
  }

cmMarkUnmark:
  {
    if (not SearchMarker(MrkKS2Reg, tmpNAkts.cNalogAkt, IndKS))
      InsertMarker(MrkKS2Reg, tmpNAkts.cNalogAkt)
    else
      DeleteMarker(MrkKS2Reg, tmpNAkts.cNalogAkt);

    RereadRecord(tnTmpNAkts);
#ifdef ATL51
    RedrawCurrentAndGo(GetCurrentFormat, TRUE);
#else
    if (GetNext tmpNAkts = tsOk)
      {
        CallToNeighbours(cmPosDown, #tmpNAkts);
        RedrawPanel(#tmpNAkts);
      }
#end
  }

cmSelectAll:
  {
    PushPos(#tmpNAkts);
    StartNewVisual(vtRotateVisual, vfTimer + vfBreak, 'Помечаю все записи...'#13#3, 0);
    _LOOP tmpNAkts
      if NextVisual
        if (not SearchMarker(MrkKS2Reg, tmpNAkts.cNalogAkt, IndKS))
          InsertMarker(MrkKS2Reg, tmpNAkts.cNalogAkt);

    StopVisual('', 0);
    PopPos(#tmpNAkts);
    RereadRecord(#tmpNAkts);
  }

cmUnselectAll:
  if (GetMarkerCount(MrkKS2Reg) > 0)
    {
      ClearMarker(MrkKS2Reg);
      RescanPanel(#tmpNAkts);
      RereadRecord(#tmpNAkts);
   }

end
End;  //Window

//******************************************************************************
// Проверка наличия налоговых актов для регистрации ГТД
// для приходной накладной
Function IsCreatedNalogAkt(cKS: comp): boolean;
{
  PushPos(#KatSopr);
  IsCreatedNalogAkt   := FALSE;
  if ( cKS <> comp(0) )
    if (GetFirst FastFirstRow KatSopr where ((cKS == KatSopr.NRec)) = tsOk)
      if ((KatSopr.wADoc = cgCustomAkt) AND
          (KatSopr.cADoc <> comp(0))    AND
          (KatSopr.VidSopr <> word(111))
          ) // должен быть налоговый акт
        {
          if (GetFirst FastFirstRow LnkTbl where ((KatSopr.cADoc == LnkTbl.NRec)) = tsOk)
             if (GetFirst FastFirstRow SopKatSopr
                          where ((LnkTbl.NRec == SopKatSopr.cADoc AND
                                  cgCustomAkt == SopKatSopr.wADoc AND
                                  word(111)   == SopKatSopr.VidSopr (NoIndex)
                                )) = tsOk)
               IsCreatedNalogAkt := TRUE;

          if (not IsCreatedNalogAkt)
            {
              BegTrans;

              TrF(UpDate Current KatSopr set KatSopr.cADoc := comp(0), KatSopr.wADoc := word(0));

              EndTrans;
            }
        }

  PopPos(#KatSopr);
}

//******************************************************************************
// Проверка наличия распределения по налоговому акту для регистрации ГТД
// IsRasprNalogAkt = 0 - полностью оплачен
//                   1 - оплачен частично или выполнено частичное распределение
//                   2 - не оплачен или не выполнено распределение
Function IsRasprNalogAkt(cNalogAkt: comp): word;
{
  var tmpKol: double;

  IsRasprNalogAkt := word(2);
  if (cNalogAkt = comp(0))
    Exit;

  if (GetFirst SopKatSopr where ((cNalogAkt == SopKatSopr.NRec)) <> tsOk)
    Exit;

  _LOOP SopSpSopr
    if (KatUsl.cGroupUsl = coTune_cGrNalUsl)
      {
        tmpKol := 0.0;
        if (RecordExists SpSopHoz <> tsOk)
          Exit
        else
          {
            IsRasprNalogAkt := word(1);

            _LOOP SpSopHoz
              tmpKol := tmpKol + SpSopHoz.Kolvo;

            if NOT f_KolEqual(SopSpSopr.KolFact, tmpKol)
              {
                IsRasprNalogAkt := word(1);
                Exit;
              }
          }
      }

  IsRasprNalogAkt := word(0);
}

//******************************************************************************
// список сформированных ранее налоговых актов
// для накладной
Function GetTmpNAkts(cKS: comp): boolean;
{
  PushPos(#KatSopr);
  GetTmpNAkts := FALSE;
  if ( cKS <> comp(0) )
    if (GetFirst FastFirstRow KatSopr where ((cKS == KatSopr.NRec)) = tsOk)
      if ((KatSopr.wADoc = cgCustomAkt) AND (KatSopr.cADoc <> comp(0))) // должен быть налоговый акт
        if (GetFirst FastFirstRow LnkTbl where ((KatSopr.cADoc == LnkTbl.NRec)) = tsOk)
          _LOOP SopKatSopr where ((LnkTbl.NRec == SopKatSopr.cADoc AND
                                   cgCustomAkt == SopKatSopr.wADoc))
            if (SopKatSopr.VidSopr = word(111))
              {
                ClearBuffer(tnTmpNAkts);
                TmpNAkts.cKatSopr := KatSopr.NRec;
                TmpNAkts.cNalogAkt := SopKatSopr.NRec;
                TmpNAkts.NRec     := RecordsInTable(tnTmpNAkts)+1;
                Insert Current TmpNAkts;
              }

  if (RecordsInTable(tnTmpNAkts) > 0)
    GetTmpNAkts := TRUE;

  PopPos(#KatSopr);
}

//******************************************************************************

Function ReSetNalUsl: boolean;
{
  var bAsk: boolean;  bAsk := TRUE;

  ReSetNalUsl := FALSE;
  BegTrans;

  _LOOP TmpNAkts
    if (TrGet(GetFirst FastFirstRow SopKatSopr where ((TmpNAkts.cNalogAkt == SopKatSopr.NRec))) = tsOk)
      {
        // удаляем записи регистрации
        _LOOP BkPrZk where ((SopKatSopr.NRec == BkPrZk.cSopr))
          if TrF(not iSF.DeleteBookPrZk(BkPrZk.NRec))
            {
              AbortTrans;
              Exit;
            }

        // удаляем налоговый акт
        TrF(not iDelSopr.DeleteSopr(SopKatSopr.NRec, FALSE, TRUE))
      }

  ReSetNalUsl := EndTrans;
}

//******************************************************************************

Function DelEmptyNalUsl: boolean;
{
  DelEmptyNalUsl := FALSE;
  BegTrans;

  _LOOP SopKatSopr where ((LnkTbl.NRec == SopKatSopr.cADoc AND
                           cgCustomAkt == SopKatSopr.wADoc AND
                           (SopKatSopr.VidSopr = word(111))))
    {
      TrF(Delete novisual SopSpSopr where
             ((
                SopKatSopr.NRec == SopSpSopr.cSopr AND
                word(2)         == SopSpSopr.PrMC  AND
               (
                 KatUsl.cGroupUsl = coTune_cGrNalUsl AND
                 SopSpSopr.Price  = 0.0 AND
                 SopSpSopr.VPrice = 0.0 AND
                 SopSpSopr.KolFact = 0.0
               )
             ))
          );

      if (GetFirst FastFirstRow SopSpSopr <> tsOk)
        {
          DeleteMarker(MrkNalAkts, SopKatSopr.NRec);
          // удаляем налоговый акт
          TrF(not iDelSopr.DeleteSopr(SopKatSopr.NRec, FALSE, TRUE));
        }
    }

  DelEmptyNalUsl := EndTrans;
}

//******************************************************************************

Function UpdateSoprHozNalUsl: boolean;
{
  UpdateSoprHozNalUsl := FALSE;
  BegTrans;
  PushPos(#KatSopr);

  _LOOP SopKatSopr where ((LnkTbl.NRec == SopKatSopr.cADoc AND
                           cgCustomAkt == SopKatSopr.wADoc AND (SopKatSopr.VidSopr = word(111)) ))
     {
       var c1: comp;  c1 := SopKatSopr.NRec;
       if (GetFirst FastFirstRow KatSopr where ((c1 == KatSopr.NRec)) = tsOk)
         oSDfuns.UpdateSoprHoz(KatSopr.Buffer);
     }

  PopPos(#KatSopr);
  UpdateSoprHozNalUsl := EndTrans;
}

//******************************************************************************

Function AddSopSpSopr: boolean;
{
  BegTrans;
  ClearBuffer(tnSopSpSopr);
  SopSpSopr.cSopr    := SopKatSopr.NRec;
  SopSpSopr.cMCUsl   := KatNalog.cUsl;
  SopSpSopr.PrMC     := 2;
  SopSpSopr.VidSopr  := SopKatSopr.VidSopr;
  SopSpSopr.cOtpEd   := SopOtpEd.NRec;
  SopSpSopr.KolFact  := 1.0;
  SopSpSopr.Kol      := 1.0;
  SopSpSopr.KolOpl   := 1.0;

  SopSpSopr.cGrNal   := SpDocNal.cGrNal;

  SopSpSopr.cVal     := SpDocNal.cVal;
  SopSpSopr.dSopr    := if (wDateGTD = 1, SopKatSopr.dSopr, dDateGTD);
  SopSpSopr.Npp      := oSpNext.GetSpNppNext(SopKatSopr.NRec, coSpSopr);

  if KatNalog.OutUch = 1
    SopSpSopr.PrVoz := 0
  else
    if (wTune_FormUch = 1)
      SopSpSopr.PrVoz := 0;
    else
      SopSpSopr.PrVoz := 1;

  if (boTune_RequestPartyGTD)
    SopSpSopr.cParty   := SpSopr.cParty;

  TrF(Insert current SopSpSopr);
  AddSopSpSopr := EndTrans;
}

//******************************************************************************

Function AddNalAkt: boolean;
{
  if (wIsOwnAkt = 1)
    {
      if (GetFirst tmpLnkTbl where ((cLnkRec == tmpLnkTbl.cLnkTbl)) <> tsOk)
        {
          ClearBuffer(tntmpLnkTbl);
          tmpLnkTbl.cLnkTbl := cLnkRec;
          tmpLnkTbl.cOrg    := SpDocNal.cOrg;
          tmpLnkTbl.cSopr   := KatSopr.NRec;
          Insert Current tmpLnkTbl;
        }
      else
        {
          if (GetFirst tmpLnkTbl where ((      cLnkRec == tmpLnkTbl.cLnkTbl AND
                                         SpDocNal.cOrg == tmpLnkTbl.cOrg
                                       )) <> tsOk)
            {
              _LOOP tmpLnkTbl where ((cLnkRec == tmpLnkTbl.cLnkTbl))
                 if (tmpLnkTbl.cSopr <> KatSopr.NRec)
                   {
                     boAbortCreateSvNAkts := TRUE;
                     AddNalAkt := FALSE;
                     Exit;
                   }

              ClearBuffer(tntmpLnkTbl);
              tmpLnkTbl.cLnkTbl := cLnkRec;
              tmpLnkTbl.cOrg    := SpDocNal.cOrg;
              tmpLnkTbl.cSopr   := KatSopr.NRec;
              Insert Current tmpLnkTbl;
            }
        }
    }

  BegTrans;
  ClearBuffer(tnSopKatSopr);
  if (wIsOwnAkt = 0)
    SopKatSopr.cKatSopr := KatSopr.NRec;

  SopKatSopr.cADoc    := cLnkRec;
  SopKatSopr.wADoc    := cgCustomAkt;
  SopKatSopr.VidSopr  := 111;
  SopKatSopr.TipSopr  := 1;
  SopKatSopr.cVal     := comp(0);       //SpDocNal.cVal;
  SopKatSopr.cValut   := KatSopr.cValut;
  SopKatSopr.cOrg     := SpDocNal.cOrg;
  SopKatSopr.cOrgBase := SpDocNal.cOrg;
  SopKatSopr.Reserved := 1;

  // дата налогового акта и дата цен
  if (wDateGTD = 1) // из сопроводительного документа
    {
      SopKatSopr.dSopr    := KatSopr.dSopr;
      SopKatSopr.dPrice   := KatSopr.dPrice;
      SopKatSopr.YearSopr := Year(KatSopr.dSopr)
    }
  else
    { // задана пользователем
      SopKatSopr.dSopr    := dDateGTD;
      SopKatSopr.dPrice   := dDateGTD;
      SopKatSopr.YearSopr := Year(dDateGTD)
    }

  SopKatSopr.NSopr := 'Н'+KatSopr.NSopr;
  if (not boTune_ChangeDescr)
    {
      SopKatSopr.Descr := sTune_Descr;
      SopKatSopr.DesGr := sTune_DesGr;
    }
  else
    {
      SopKatSopr.Descr := KatSopr.Descr;
      SopKatSopr.DesGr := KatSopr.DesGr;
    }

  SopKatSopr.VhodNal  := 1; //KatSopr.VhodNal; // это и есть сами налоги
  SopKatSopr.Status   := 1 - wTune_SoprStatus;
  SopKatSopr.cNote    := oNotes.GetFirstNote(100, SopKatSopr.Status);
  SopKatSopr.cOtvPodr := DefaultBaseCO; // центр ответственности

  if ((wIsOwnAkt = 0) AND (KatSopr.cOtvPodr <> comp(0)))
    {
      SopKatSopr.TipOtvPodr := KatSopr.TipOtvPodr;
      SopKatSopr.cOtvPodr   := KatSopr.cOtvPodr;
    }

  TrF(Insert current SopKatSopr);
  AddNalAkt := EndTrans;
}

//******************************************************************************

Function GetSpNalAkt: boolean;
{
  var IndNo: longint;
  GetSpNalAkt := TRUE;

  _LOOP SopKatSopr
               where ((cLnkRec     == SopKatSopr.cADoc AND
                       cgCustomAkt == SopKatSopr.wADoc AND
                       word(111)   == SopKatSopr.VidSopr(NoIndex) AND
                       (SopKatSopr.cOrg = SpDocNal.cOrg)
                     ))
    {
      if (boTune_AssociationSummGTD)
        {
          if (boTune_RequestPartyGTD)
            {
              if (GetFirst SopSpSopr
                           where ((SopKatSopr.NRec == SopSpSopr.cSopr  AND
                                     KatNalog.cUsl == SopSpSopr.cMCUsl AND
                                           word(2) == SopSpSopr.PrMC   AND
                                   SpDocNal.cVal   == SopSpSopr.cVal  (NoIndex) AND
                                   SpSopr.cParty   == SopSpSopr.cParty(NoIndex)
                                 )) <> tsOk)
                GetSpNalAkt := AddSopSpSopr;
            }
          else
            {
              if (GetFirst SopSpSopr
                           where ((SopKatSopr.NRec == SopSpSopr.cSopr  AND
                                     KatNalog.cUsl == SopSpSopr.cMCUsl AND
                                           word(2) == SopSpSopr.PrMC   AND
                                   SpDocNal.cVal   == SopSpSopr.cVal  (NoIndex)
                                 )) <> tsOk)
                GetSpNalAkt := AddSopSpSopr;
            }
        }
      else
        {
          if (boTune_RequestPartyGTD)
            {
              if (GetFirst SopSpSopr
                           where ((SopKatSopr.NRec == SopSpSopr.cSopr  AND
                                     KatNalog.cUsl == SopSpSopr.cMCUsl AND
                                           word(2) == SopSpSopr.PrMC   AND
                                   SpDocNal.cGrNal == SopSpSopr.cGrNal(NoIndex) AND
                                   SpDocNal.cVal   == SopSpSopr.cVal  (NoIndex) AND
                                   SpSopr.cParty   == SopSpSopr.cParty(NoIndex)
                                 )) <> tsOk)
                GetSpNalAkt := AddSopSpSopr;
            }
          else
            {
              if (GetFirst SopSpSopr
                           where ((SopKatSopr.NRec == SopSpSopr.cSopr  AND
                                     KatNalog.cUsl == SopSpSopr.cMCUsl AND
                                           word(2) == SopSpSopr.PrMC   AND
                                   SpDocNal.cGrNal == SopSpSopr.cGrNal(NoIndex) AND
                                   SpDocNal.cVal   == SopSpSopr.cVal  (NoIndex)
                                 )) <> tsOk)
                GetSpNalAkt := AddSopSpSopr;
            }
        }

      if NOT SearchMarker(MrkNalAkts, SopKatSopr.NRec, IndNo)
        InsertMarker(MrkNalAkts, SopKatSopr.NRec);

      // дата налогового акта и дата цен
      if (wDateGTD = 1) // из сопроводительного документа
        {
          SopKatSopr.dSopr    := KatSopr.dSopr;
          SopKatSopr.dPrice   := KatSopr.dPrice;
          SopKatSopr.YearSopr := Year(KatSopr.dSopr)
        }
      else
        { // задана пользователем
          SopKatSopr.dSopr    := dDateGTD;
          SopKatSopr.dPrice   := dDateGTD;
          SopKatSopr.YearSopr := Year(dDateGTD)
        }
      TrF(UpDate current SopKatSopr);
      Exit;
    }

  AddNalAkt;
  if NOT SearchMarker(MrkNalAkts, SopKatSopr.NRec, IndNo)
    InsertMarker(MrkNalAkts, SopKatSopr.NRec);

  GetSpNalAkt := AddSopSpSopr;
}

//******************************************************************************

Function EveryKatSopr: boolean;
{
  EveryKatSopr := FALSE;
  PushPos(#KatUsl);
  ResetBounds(#KatUsl);

  _LOOP SpSopr
    {
      if (SpSopr.PrMC = 2)
        if (GetFirst FastFirstRow KatUsl where ((SpSopr.cMCUsl == KatUsl.NRec)) = tsOk)
          if (KatUsl.cGroupUsl = coTune_cGrNalUsl)
            Continue;

      _LOOP SpDocNal
        if (SpDocNal.cOrg <> KatSopr.cOrg)
          if (GetFirst KatUsl where ((KatNalog.cUsl == KatUsl.NRec)) <> tsOk)
            {
              _MsgInForm := TRUE;
              MsgForm('Не указана налоговая услуга для налога '#13+KatNalog.Name, Warning+cmOk);
            }
          else
            {
              if (GetSpNalAkt)
               {
                 // в валюте налога
                 var _dCurse: Date;
                 _dCurse := if ( wDateGTD = 0
                              , dDateGTD
                              , if ( SopKatSopr.dPrice = date(0, 0, 0)
                                  , KatSopr.dSopr
                                  , SopKatSopr.dPrice
                                  )
                              );

                 var _sSumSrc: double;  _sSumSrc := SpDocNal.SumNal;
                 var cValSrc: comp;     cValSrc  := SpDocNal.cVal;
                 var _sSumTarg: double; _sSumTarg := oValFunc.GetAnyCurrency(cValSrc, _sSumSrc, _dCurse, comp(0));

                 SopSpSopr.Price := SopSpSopr.Price  + _sSumTarg;
                 SopSpSopr.rPrice := SopSpSopr.Price;

                 SopKatSopr.Summa := SopKatSopr.Summa + _sSumTarg;

                 // в валюте исходного документа
                 _dCurse := if ( wDateGTD = 0
                              , dDateGTD
                              , if ( SopKatSopr.dPrice = date(0, 0, 0)
                                  , KatSopr.dSopr
                                  , SopKatSopr.dPrice
                                  )
                              );

                 cValSrc := SpSopr.cVal;
                 _sSumSrc := SpDocNal.SumVal; // в валюте исходного документа

                 var cValTarg: comp;  cValTarg := SopSpSopr.cVal;

                 _sSumTarg         := oValFunc.GetAnyCurrency(cValSrc, _sSumSrc, _dCurse, cValTarg);
                 SopSpSopr.VPrice  := SopSpSopr.VPrice + _sSumTarg;
                 SopSpSopr.rVPrice := SopSpSopr.VPrice;

                 SopKatSopr.SumVal := SopKatSopr.SumVal+ _sSumTarg;

                 SopSpSopr.KolFact := 1.0;
                 SopSpSopr.Kol     := 1.0;
                 SopSpSopr.KolOpl  := 1.0;

                 TrF(Update current SopSpSopr);
                 TrF(Update current SopKatSopr);
               }
            }
    } // _LOOP SpSopr

  SetBounds(#KatUsl);
  PopPos(#KatUsl);
  EveryKatSopr := TRUE;
}

//******************************************************************************

Procedure MakeNalAkt(cKS: comp);
{
  var iCountMrk, IndMrk, i: longint;
  var tmp: boolean;
  tmp := _MsgInForm;
  MsgFormInit;
  if (GetFirst FastFirstRow GroupUsl
               where ((coTune_cGrNalUsl == GroupUsl.NRec)) <> tsOk)
    {
      ShowTune('Необходимо установить налоговую группа услуг в настройке!', 'Nalog.cGrNalUsl');
      Exit;
    }

  MrkKS := InitMarker('KS2NalAkts', 8, 100, 10, FALSE);

  iCountMrk := GetMarkerCount(MrkKS);

  if (iCountMrk = 0)
    if (cKS <> comp(0))
      if (GetFirst KatSopr where ((cKS == KatSopr.NRec)) <> tsOk)
        {
          ClearMarker(MrkKS);
          DoneMarker(MrkKS, 'KS2NalAkts');
          Exit
        }
      else
        {
          ClearMarker(MrkKS);
          InsertMarker(MrkKS, cKS)
        }

  iCountMrk := GetMarkerCount(MrkKS);
  MrkNalAkts := InitMarker('NalAkts', 8, 4, 4);
  ClearMarker(MrkNalAkts);

  wDateGTD := 1;
  wIsOwnAkt := 0;

  if ((iCountMrk > 1) or
      ((iCountMrk = 1) and boTune_RequestDateGTD))
    {
      wDateGTD := 0;
      dDateGTD := Date(0, 0, 0);
      var tmpD: Date;

      For (i := 0; i<iCountMrk; i := i+1)
        if GetMarker(MrkKS, i, cKS)
          if (GetFirst FastFirstRow KatSopr where (( cKS == KatSopr.NRec)) = tsOk)
            {
             tmpD := if (longint(KatSopr.dPrice) = 0, KatSopr.dSopr, KatSopr.dPrice);
             if (tmpD > dDateGTD)
               dDateGTD := tmpD;
            }

      if (LongInt(dDateGTD) = 0)
        dDateGTD := Cur_Date;

      dBegDateGTD := dDateGTD;

      if (RunWindowModal(winGetDateGTD) = cmCancel)
        {
          DoneMarker(MrkNalAkts, '');
          ClearMarker(MrkKS);
          DoneMarker(MrkKS, 'KS2NalAkts');
          _MsgInForm := tmp;
          Exit
        }
    }

  if (wIsOwnAkt = 1) // формируются сводные налоговые акт
    {
      // проверка наличия налоговых актов
      Delete All TmpNAkts;

      For (i := 0; i<iCountMrk; i := i+1)
        if GetMarker(MrkKS, i, cKS)
          GetTmpNAkts(cKS);

      if (RecordsInTable(tnTmpNAkts) > 0)
        {
          boIsCreateNAkts := FALSE;
          RunWindowModal(winTmpNAkts);
          if (boIsCreateNAkts)
            {
              if ( NOT ReSetNalUsl )
                {
                  DoneMarker(MrkNalAkts, '');
                  ClearMarker(MrkKS);
                  DoneMarker(MrkKS, 'KS2NalAkts');
                  _MsgInForm := tmp;
                  Exit;
                }
            }
          else
            {
              DoneMarker(MrkNalAkts, '');
              ClearMarker(MrkKS);
              DoneMarker(MrkKS, 'KS2NalAkts');
              _MsgInForm := tmp;
              Exit;
            }
        }
    }

  BegTrans;
  // формирование налоговых актов
  if (wIsOwnAkt = 1)
    {
      Delete All tmpLnkTbl;
      RereadRecord(tnTmpLnkTbl);
      boAbortCreateSvNAkts := FALSE;
      cLnkRec := comp(0);
      ClearBuffer(tnLnkTbl);
      LnkTbl.VidRelate := cgCustomAkt;
      if (Insert Current LnkTbl = tsOk)
        if (LnkTbl.NRec <> comp(0))
          cLnkRec := LnkTbl.NRec;

      if (cLnkRec = comp(0))
        {
          Message('Ошибка добавления записи в связующую таблицу DogRelat');
          AbortTrans;
          Exit
        }
    }

  For (i := 0; i<iCountMrk; i := i+1)
    {
      if GetMarker(MrkKS, i, cKS)
        if (GetFirst KatSopr where (( cKS == KatSopr.NRec)) = tsOk)
          {
            if (wIsOwnAkt = 0)
              {
                PushPos(#KatSopr);
                // проверка наличия налоговых актов для накладной
                Delete All TmpNAkts;
                GetTmpNAkts(cKS);

                if (RecordsInTable(tnTmpNAkts) > 0)
                  {
                    boIsCreateNAkts := FALSE;
                    RunWindowModal(winTmpNAkts);
                    if (boIsCreateNAkts)
                      {
                        if ( NOT ReSetNalUsl )
                         {
                           DropPos(#KatSopr);
                           Continue
                         }
                      }
                    else
                      {
                        DropPos(#KatSopr);
                        Continue
                      }
                  }

                PopPos(#KatSopr);
                cLnkRec := comp(0);
                ClearBuffer(tnLnkTbl);
                LnkTbl.VidRelate := cgCustomAkt;

                if (Insert Current LnkTbl = tsOk)
                  if (LnkTbl.NRec <> comp(0))
                    cLnkRec := LnkTbl.NRec;

                if (cLnkRec = comp(0))
                  {
                    Message('Ошибка добавления записи в связующую таблицу DogRelat');
                    AbortTrans;
                    Exit
                  }
              }

            if (EveryKatSopr)
              {
                TrF(UpDate Current KatSopr
                             set KatSopr.wADoc := cgCustomAkt,
                                 KatSopr.cADoc := cLnkRec
                   );
              }

            var cKatSoprNRec : comp;
            cKatSoprNRec := KatSopr.NRec;

            _LOOP KatSopr where ((cKatSoprNRec == KatSopr.cKatSopr))
              EveryKatSopr;

            if (wIsOwnAkt = 0)
              {
                DelEmptyNalUsl;
                UpdateSoprHozNalUsl;
                if (RecordExists SopKatSopr
                                  where ((cLnkRec     == SopKatSopr.cADoc AND
                                          cgCustomAkt == SopKatSopr.wADoc AND
                                          word(111)   == SopKatSopr.VidSopr(NoIndex)
                                        )) <> tsOk)
                  {
                    TrF(UpDate Current KatSopr
                                   set KatSopr.cADoc := comp(0),
                                       KatSopr.wADoc := word(0)
                       );
                    Delete novisual LnkTbl where ((cLnkRec == LnkTbl.NRec));
                  }
              }
          }

      if (boAbortCreateSvNAkts)
        {
          Message('Нельзя формировать сводные налоговые акты регистрации ГТД '+
                  'для выбранных накладных с разными получателями налогов !', Warning);
          AbortTrans;
          ClearMarker(MrkNalAkts);
          DoneMarker(MrkNalAkts, 'NalAkts');
          ClearMarker(MrkKS);
          DoneMarker(MrkKS, 'KS2NalAkts');
          Delete novisual LnkTbl where ((cLnkRec == LnkTbl.NRec));
          _MsgInForm := tmp;
          Exit
        }
    }

  if (wIsOwnAkt = 1)
    {
      var _cOrg  : comp;
      var iNAkts, iMax, iMin: longint;

      iMin   := 0; iMax := 0;
      if (iCountMrk > 1)
        For (i := 0; i<iCountMrk; i := i+1)
          if GetMarker(MrkKS, i, cKS)
            if (RecordExists tmpLnkTbl where ((cLnkRec == tmpLnkTbl.cLnkTbl AND
                                               cKS     == tmpLnkTbl.cSopr)) = tsOk)
              {
                iNAkts := 0;

                _LOOP tmpLnkTbl where ((cLnkRec == tmpLnkTbl.cLnkTbl AND
                                        cKS     == tmpLnkTbl.cSopr))
                   iNAkts := iNAkts+1;

                iMin := if (iMin = 0, iNAkts, if (iMin<iNAkts, iMin, iNAkts));
                iMax := if (iMax>iNAkts, iMax, iNAkts);
                if (iMin <> iMax)
                  {
                    boAbortCreateSvNAkts := TRUE;
                    Break;
                  }
              }

      if (boAbortCreateSvNAkts)
        {
          Message('Нельзя формировать сводные налоговые акты регистрации ГТД для накладных, ' +
                  'у которых нет полного совпадения количества получателей налогов !', Warning);
          AbortTrans;
          ClearMarker(MrkNalAkts);
          DoneMarker(MrkNalAkts, 'NalAkts');
          ClearMarker(MrkKS);
          DoneMarker(MrkKS, 'KS2NalAkts');
          _MsgInForm := tmp;
          Delete novisual LnkTbl where ((cLnkRec == LnkTbl.NRec));
          Exit
        }

      DelEmptyNalUsl;
      UpdateSoprHozNalUsl;
      if (RecordExists SopKatSopr
                        where ((cLnkRec     == SopKatSopr.cADoc AND
                                cgCustomAkt == SopKatSopr.wADoc AND
                                word(111)   == SopKatSopr.VidSopr(NoIndex)
                              )) <> tsOk)
        {
          TrF(UpDate KatSopr where ((cLnkRec     == KatSopr.cADoc AND
                                     cgCustomAkt == KatSopr.wADoc  ))
              set KatSopr.cADoc := comp(0),
                  KatSopr.wADoc := word(0)
             );
          Delete novisual LnkTbl where ((cLnkRec == LnkTbl.NRec));
        }
    }

  if (EndTrans)
    {
      var s: string;
      case GetMarkerCount(MrkNalAkts) of
        0: s := 'Налоговые акты не сформированы.';
        1: s := 'Cформирован 1 налоговый акт.'
      else s := 'Cформировано налоговых актов: ' + string(GetMarkerCount(MrkNalAkts));
      end;

      Message(s, Information);
    }

  ClearMarker(MrkNalAkts);
  DoneMarker(MrkNalAkts, 'NalAkts');
  ClearMarker(MrkKS);
  DoneMarker(MrkKS, 'KS2NalAkts');

  MsgFormEnd;
  _MsgInForm := tmp;
}

// Инициализация регистрации ГТД.
function Init_Register_GTD(cNAkt : Comp; var _OldMessMode : Boolean; var _CountMrk : LongInt) : Boolean;
{
  Init_Register_GTD := False;

  // Не использую пока объект отдельно для России и Беларуси, т.к. код обработки одинаков.
  if (not vSFInit(cwDirect_Buy))
    Exit;

  _OldMessMode := _MsgInForm;
  MsgFormInit;
  MrkKS2Reg := InitMarker('NalAkts2Reg', 8, 100, 10, False);
  _CountMrk := GetMarkerCount(MrkKS2Reg);

  if (_CountMrk = 0)
    if (cNAkt <> Comp(0))
      if (GetFirst SopKatSopr where ((cNAkt == SopKatSopr.NRec)) <> tsOk)
      {
        DoneMarker(MrkKS2Reg, '');
        Exit;
      }
      else
      {
        ClearMarker(MrkKS2Reg);
        InsertMarker(MrkKS2Reg, cNAkt);
      }

  _CountMrk := GetMarkerCount(MrkKS2Reg);
  _MsgInForm := (_CountMrk > 1);

  Init_Register_GTD := BegTrans;
}

// Завершение регистрации ГТД.
procedure Done_Register_GTD(_OldMessMode : Boolean);
{
  EndTrans;
  ClearMarker(MrkKS2Reg);
  DoneMarker(MrkKS2Reg, 'NalAkts2Reg');
  MsgFormEnd;
  _MsgInForm := _OldMessMode;
}

// Удаление уже существующих записей регистрации ГТД
function Delete_Exist_BK(cNAkt : Comp) : Boolean;
var
  bIsDel : Boolean;
{
  Delete_Exist_BK := True;

  if (TrGet(vBK.GetFirst BK where ((cNAkt == BK.cSopr))) = tsOk)
  {
    bIsDel := (MsgForm('Имеющиеся записи регистрации ГТД в книге покупок будут удалены!'#13 +
                       'Продолжить?', Confirmation + YesNo) = cmYes)

    if (bIsDel)
    {
      vBK._loop BK where ((cSopr == BK.cSopr))
        SFDeleteSoprHoz(vBK.BK.NRec);

      TrF(vBK.Delete NoVisual BK where ((cSopr == BK.cSopr)));
    }
    else
    {
      Delete_Exist_BK := False;
    }
  }
}

// Беларусь. Регистрация ГТД по вручную введенным налогам.
function RegisterSimpleGTD_Bel(cNAkt : Comp) : Boolean;
var
  dTmp    : Date;
  cTmp    : Comp;
  dOplGTD : Date;
{
  RegisterSimpleGTD_Bel := True;

  if (GetFirst FastFirstRow SopKatSopr where ((cNAkt == SopKatSopr.NRec)) <> tsOk)
    Exit;

  vBK.cSopr := cNAkt;  // Не удалять!

  if (not Delete_Exist_BK(cNAkt))
    Exit;

  SchSClc;
  vSF.Price  := 0.0;
  vSF.Nds    := 0.0;
  vSF.Akciz  := 0.0;
  vSF.Perc   := 0.0;
  vSF.DrNal  := 0.0;
  vSF.doZnak := 1.0;

  vBK.ClearBuffer(vBK.tnBK);

  if (vKS.KS.cVal = 0)
  {
    vBK.BK.cVal    := 0;
    vBK.BK.Sum[30] := 1.0;
  }
  else
  {
    case GetSFCreateType of
      1 :
      {
        vBK.BK.cVal := vKS.KS.cVal;
        dTmp := if (LongInt(vKS.KS.dPrice) >0, vKS.KS.dPrice, vKS.KS.dSopr);
        cTmp := vKS.KS.cVal;
        oValFunc.GetCurse(cTmp, dTmp, vBK.BK.Sum[30]);
        vBK.BK.ds[1] := vKS.KS.dPrice;
      }

      2 :
      {
        vBK.BK.cVal    := 0;
        vBK.BK.Sum[30] := 1.0;
      }
      else
      {
        RegisterSimpleGTD_Bel := False;
        Exit;
      }
    end;
  }

  vSF.cVal := vBK.BK.cVal;
  vSFSetZero;

  // Спецификация ГТД
  dOplGTD := Date(1, 1, 3000);

  _loop SopSpSopr
  {
    if (not GetCustomNalogInfo_SimpleGTD(SopSpSopr.NRec, vBK.BK.cVal,
                                         vSF.Nds, vSF.Perc, vSF.isExistNDS))
    {
      RegisterSimpleGTD_Bel := False;
      Exit;
    }

    SchSNal;

    _loop SpSopHoz
    {
      if (IsValid(tnSoprHoz))
        if (SoprHoz.DatOb < dOplGTD)
          dOplGTD := SoprHoz.DatOb;
    }
  } // _loop SopSpSopr

  dOplGTD := if (dOplGTD = Date(1, 1, 3000), Date(0, 0, 0), dOplGTD);
  SchSRound;
  SchSCorr;

  if (not vGetKS(cNAkt))
  {
    RegisterSimpleGTD_Bel := False;
    Exit;
  }

  vBK.BK.Sum[1]   := vSF.S1;
  vBK.BK.Sum[2]   := vSF.S2;
  vBK.BK.Sum[3]   := vSF.S3;
  vBK.BK.Sum[4]   := vSF.S4;
  vBK.BK.Sum[5]   := vSF.S5;
  vBK.BK.Sum[6]   := vSF.S6;
  vBK.BK.Sum[7]   := vSF.S7;
  vBK.BK.Sum[10]  := vSF.S10;
  vBK.BK.SumIn[1] := vSF.Si1;
  vBK.BK.SumIn[2] := vSF.Si2;
  vBK.BK.Summa    := vSF.S;

  vBK.BK.Sum[11]   := vBK.BK.Sum[1]   * vBK.BK.Sum[30];
  vBK.BK.Sum[12]   := vBK.BK.Sum[2]   * vBK.BK.Sum[30];
  vBK.BK.Sum[13]   := vBK.BK.Sum[3]   * vBK.BK.Sum[30];
  vBK.BK.Sum[14]   := vBK.BK.Sum[4]   * vBK.BK.Sum[30];
  vBK.BK.Sum[15]   := vBK.BK.Sum[5]   * vBK.BK.Sum[30];
  vBK.BK.Sum[16]   := vBK.BK.Sum[6]   * vBK.BK.Sum[30];
  vBK.BK.Sum[17]   := vBK.BK.Sum[7]   * vBK.BK.Sum[30];
  vBK.BK.Sum[20]   := vBK.BK.Sum[10]  * vBK.BK.Sum[30];
  vBK.BK.Sum[21]   := vBK.BK.Summa    * vBK.BK.Sum[30];
  vBK.BK.SumIn[6]  := vBK.BK.SumIn[1] * vBK.BK.Sum[30];
  vBK.BK.SumIn[7]  := vBK.BK.SumIn[2] * vBK.BK.Sum[30];
  vBK.BK.SumIn[10] := vBK.BK.SumIn[5] * vBK.BK.Sum[30];

  vSF.S1  := vBK.BK.Sum[11];
  vSF.S2  := vBK.BK.Sum[12];
  vSF.S3  := vBK.BK.Sum[13];
  vSF.S4  := vBK.BK.Sum[14];
  vSF.S5  := vBK.BK.Sum[15];
  vSF.S6  := vBK.BK.Sum[16];
  vSF.S7  := vBK.BK.Sum[17];
  vSF.S10 := vBK.BK.Sum[20];
  vSF.Si1 := vBK.BK.SumIn[6];
  vSF.Si2 := vBK.BK.SumIn[7];
  vSF.S   := vBK.BK.Sum[21];

  vSF.cVal := 0;
  vSFSetZero;
  SchSRound;

  vBK.BK.Sum[11]  := vSF.S1;
  vBK.BK.Sum[12]  := vSF.S2;
  vBK.BK.Sum[13]  := vSF.S3;
  vBK.BK.Sum[14]  := vSF.S4;
  vBK.BK.Sum[15]  := vSF.S5;
  vBK.BK.Sum[16]  := vSF.S6;
  vBK.BK.Sum[17]  := vSF.S7;
  vBK.BK.Sum[20]  := vSF.S10;
  vBK.BK.SumIn[6] := vSF.Si1;
  vBK.BK.SumIn[7] := vSF.Si2;
  vBK.BK.Sum[21]  := vSF.S;

  vBK.BK.Direct := cwDirect_Buy;
  vBK.BK.cSopr  := cNAkt;
  vBK.BK.dOpl   := dOplGTD;
  vBK.BK.dOpr   := if (LongInt(vKS.KS.dOpr) <> 0, vKS.KS.dOpr, vKS.KS.dSopr);
  vBK.BK.dReg   := if (dOplGTD > vBK.BK.dOpr, dOplGTD, vBK.BK.dOpr);
  vBK.BK.Num    := 'Н' + vKS.KS.NSopr;
  vBK.BK.cOrg   := vKS.KS.cOrg

  vBK.BK.cStepDoc := vKS.KS.cStepDoc;
  vBK.BK.Nazn     := 'Импортная ГТД №' + vKS.KS.NSopr;

  if (vGetSD(vKS.KS.cStepDoc))
    vBK.BK.cBaseDoc := vSD.SD.cBaseDoc;

  if (not vGetUD(vSF.TipRegistrGTD))
  {
    vSFCreateStandTipUser;

    if (not vGetUD(vSF.TipRegistrGTD))
    {
      RegisterSimpleGTD_Bel := False;
      Exit;
    }
  }

  vBK.BK.TipUser := vSF.TipRegistrGTD;
  vBK.BK.SubTip  := vUD.UD.SubTip;
  vBK.BK.RegDoc  := if ((vBK.BK.SubTip and 16) = 0, 0, 1); // vBK.BK.SubTip = 5 обычно
  vBK.BK.Descr   := sTune_Descr;
  vBK.BK.DesGr   := sTune_DesGr;
  vBK.sTuneDescr := sTune_Descr;
  vBK.sTuneDesGr := sTune_DesGr;

  // Центр ответственности
  vBK.BK.cOtvPodr := DefaultBaseCO;

  if (vKS.KS.cOtvPodr <> Comp(0))
  {
    vBK.BK.TipOtvPodr := vKS.KS.TipOtvPodr;
    vBK.BK.cOtvPodr   := vKS.KS.cOtvPodr;
  }
  else
  {
    if (vBK.BK.cBaseDoc <> Comp(0))
      if (vGetBD(vBK.BK.cBaseDoc))
        if (vBD.BD.cOtvPodr <> Comp(0))
        {
          vBK.BK.TipOtvPodr := vBD.BD.TipOtvPodr;
          vBK.BK.cOtvPodr   := vBD.BD.cOtvPodr;
        }
  }

  if TrF(vBK.Insert current BK)
  {
    MsgForm('Налоговый акт ' + f_sNumDate(SopKatSopr.NSopr, SopKatSopr.dSopr) +
            'не удалось зарегистрировать в книге покупок!', Confirmation + OkButton);
  }
  else
  {
    SFUpdateSoprHoz(vBK.BK.NRec);

    MsgForm('Налоговый акт ' + f_sNumDate(SopKatSopr.NSopr, SopKatSopr.dSopr) +
            ' зарегистрирован в книге покупок.', Information + OkButton);
  }
}

// Стандартная регистрация ГТД по сложному алгоритму - автоматический расчет таможенных налогов.
function RegisterGTD_Standart(cNAkt : Comp) : Boolean;
var
  dOplGTD, dFirstZk, dLastZk, dTmp : Date;
  cTmp   : Comp;
  iTax   : SchNalogKS new;
  recTax : TNalogInfo;
{
  RegisterGTD_Standart := True;

  if (GetFirst FastFirstRow SopKatSopr where ((cNAkt == SopKatSopr.NRec)) <> tsOk)
    Exit;
  else
    if (SopKatSopr.wADoc <> cgCustomAkt)
      Exit;

  if (GetFirst GroupUsl where((coTune_cGrNalUsl == GroupUsl.NRec)) <> tsOk)
  {
    // Для пакетной регистрации в интерфейсах строительства мессаги не вывожу.
    if (not bIsRegFromStroy)
      ShowTune('Необходимо установить налоговую группу услуг в настройке!', 'Nalog.cGrNalUsl');

    RegisterGTD_Standart := False;
    Exit;
  }

  if (boTune_KontrOplGTD) // Контроль оплаты при регистрации ГТД
    if (IsRasprNalogAkt(cNAkt) <> tsOk)
    {
      if (not bIsRegFromStroy)
        MsgForm('Налоговый акт ' + f_sNumDate(SopKatSopr.NSopr, SopKatSopr.dSopr)+' не оплачен !'#13+
                '(или не выполнено распределение платежного документа)', OkButton);

      Exit;
    }

  vBK.cSopr := cNAkt;  // Не удалять!

  if (not Delete_Exist_BK(cNAkt))
    Exit;

  SchSClc;
  vSf.Price  := 0.0;
  vSf.Nds    := 0.0;
  vSf.Akciz  := 0.0;
  vSf.Perc   := 0.0;
  vSf.DrNal  := 0.0;
  vSf.doZnak := 1.0;

  vBk.ClearBuffer(vBk.tnBK);
  dFirstZk := Date(0, 0, 0);
  dLastZk  := Date(0, 0, 0);

  if (vKS.KS.cVal = 0)
  {
    vBk.BK.cVal    := 0;
    vBk.BK.Sum[30] := 1.0;
  }
  else
    case GetSFCreateType of
      1 :
      {
        vBk.BK.cVal := vKS.KS.cVal;
        dTmp := if (LongInt(vKS.KS.dPrice)>0, vKS.KS.dPrice, vKS.KS.dSopr);
        cTmp := vKS.KS.cVal;
        oValFunc.GetCurse(cTmp, dTmp, vBk.BK.Sum[30]);
        vBk.BK.ds[1] := vKS.KS.dPrice;
      }

      2 :
      {
        vBk.BK.cVal     := 0;
        vBk.BK.Sum[30]  := 1.0;
      }
      else
      {
        RegisterGTD_Standart := False;
        Exit;
      }
    end; // case

  vSf.cVal := vBk.BK.cVal;
  vSfSetZero;

#ifdef ATL51
  iTax.SetModeByVal(vBk.BK.cVal, iTax.GTD_MODE);
#end

  // Спецификация ГТД
  dOplGTD := Date(1, 1, 3000);

  _loop SopSpSopr
  {
    if (KatUsl.cGroupUsl <> coTune_cGrNalUsl)
    {
      // Сопутствующие услуги других контрагентов
      if (vSf.cVal <> 0 AND vSf.cVal <> SopKatSopr.cVal)
      {
        if (not bIsRegFromStroy)
          MsgForm('Не совпадают валюты ГТД и сопроводительной услуги другого контрагента.'#13+
                  'Из-за этого нельзя сформировать запись о регистрации ГТД в книге покупок в валюте'#13+
                  'документа. Регистрируйте в НДЕ. Способ регистрации'#13+
                  'устанавливается в настройке.', Warning+OkButton);

        Exit;
      }

#ifdef ATL51
      if (not iTax.GetInfo(SopSpSopr.x$position, recTax))
      {
        RegisterGTD_Standart := False;
        Exit;
      }

      SchS_Add(recTax);
#else
      if (not GetNalogsInfo4(SopSpSopr.NRec, vBk.BK.cVal, vSf.Price, vSf.Nds,
                             vSf.Akciz, vSf.Perc, vSf.DrNal, vSf.isExistNDS))
      {
        RegisterGTD_Standart := False;
        Exit;
      }

      SchSNal;
#end
    } // if (KatUsl.cGroupUsl <> coTune_cGrNalUsl)
    else
    {
      if (not GetCustomNalogInfo(SopSpSopr.NRec, vBk.BK.cVal, vSf.Price, vSf.Nds,
                                 vSf.Akciz, vSf.Perc, vSf.DrNal, vSf.isExistNDS))
      {
        RegisterGTD_Standart := False;
        Exit;
      }

      SchSNal;

      _loop SpSopHoz
      {
        if (IsValid(tnSoprHoz))
          if (SoprHoz.DatOb < dOplGTD)
            dOplGTD := SoprHoz.DatOb;
      }
    }
  } // _loop SopSpSopr

  dOplGTD := if (dOplGTD = Date(1, 1, 3000), Date(0, 0, 0), dOplGTD);
  SchSRound;
  SchSCorr;

  if (not vGetKS(cNAkt))
  {
    RegisterGTD_Standart := False;
    Exit;
  }

  vBk.BK.Sum[1]   := vSF.S1;
  vBk.BK.Sum[2]   := vSF.S2;
  vBk.BK.Sum[3]   := vSF.S3;
  vBk.BK.Sum[4]   := vSF.S4;
  vBk.BK.Sum[5]   := vSF.S5;
  vBk.BK.Sum[6]   := vSF.S6;
  vBk.BK.Sum[7]   := vSF.S7;
  vBk.BK.Sum[10]  := vSF.S10;
  vBk.BK.SumIn[1] := vSF.Si1;
  vBk.BK.SumIn[2] := vSF.Si2;
  vBk.BK.Summa    := vSF.S;

  vBk.Bk.Sum[11]   := vBk.Bk.Sum[1]   * vBk.Bk.Sum[30];
  vBk.Bk.Sum[12]   := vBk.Bk.Sum[2]   * vBk.Bk.Sum[30];
  vBk.Bk.Sum[13]   := vBk.Bk.Sum[3]   * vBk.Bk.Sum[30];
  vBk.Bk.Sum[14]   := vBk.Bk.Sum[4]   * vBk.Bk.Sum[30];
  vBk.Bk.Sum[15]   := vBk.Bk.Sum[5]   * vBk.Bk.Sum[30];
  vBk.Bk.Sum[16]   := vBk.Bk.Sum[6]   * vBk.Bk.Sum[30];
  vBk.Bk.Sum[17]   := vBk.Bk.Sum[7]   * vBk.Bk.Sum[30];
  vBk.Bk.Sum[20]   := vBk.Bk.Sum[10]  * vBk.Bk.Sum[30];
  vBk.Bk.Sum[21]   := vBk.Bk.Summa    * vBk.Bk.Sum[30];
  vBk.Bk.SumIn[6]  := vBk.Bk.SumIn[1] * vBk.Bk.Sum[30];
  vBk.Bk.SumIn[7]  := vBk.Bk.SumIn[2] * vBk.Bk.Sum[30];
  vBk.Bk.SumIn[10] := vBk.Bk.SumIn[5] * vBk.Bk.Sum[30];

  vSf.S1  := vBk.Bk.Sum[11];
  vSf.S2  := vBk.Bk.Sum[12];
  vSf.S3  := vBk.Bk.Sum[13];
  vSf.S4  := vBk.Bk.Sum[14];
  vSf.S5  := vBk.Bk.Sum[15];
  vSf.S6  := vBk.Bk.Sum[16];
  vSf.S7  := vBk.Bk.Sum[17];
  vSf.S10 := vBk.Bk.Sum[20];
  vSf.Si1 := vBk.Bk.SumIn[6];
  vSf.Si2 := vBk.Bk.SumIn[7];
  vSf.S   := vBk.Bk.Sum[21];

  vSf.cVal := 0;
  vSfSetZero;
  SchSRound;

  vBk.Bk.Sum[11]  := vSf.S1;
  vBk.Bk.Sum[12]  := vSf.S2;
  vBk.Bk.Sum[13]  := vSf.S3;
  vBk.Bk.Sum[14]  := vSf.S4;
  vBk.Bk.Sum[15]  := vSf.S5;
  vBk.Bk.Sum[16]  := vSf.S6;
  vBk.Bk.Sum[17]  := vSf.S7;
  vBk.Bk.Sum[20]  := vSf.S10;
  vBk.Bk.SumIn[6] := vSf.Si1;
  vBk.Bk.SumIn[7] := vSf.Si2;
  vBk.Bk.Sum[21]  := vSf.S;

  vBk.BK.Direct := cwDirect_Buy;
  vBk.BK.cSopr  := cNAkt;
  vBk.BK.dOpl   := dOplGTD;
  vBk.BK.dOpr   := if (LongInt(vKS.KS.dOpr)>0, vKS.KS.dOpr, vKS.KS.dSopr);
  vBk.BK.dReg   := if (dOplGTD > vBk.BK.dOpr, dOplGTD, vBk.BK.dOpr);
  vBk.BK.Num    := vKS.KS.NSopr;

  if (wTune_Country <> ccBel)
    vBk.BK.cOrg := vKS.KS.cOrg;
  else
    if (GetFirst FastFirstRow GtdKatSopr where ((vKS.KS.cKatSopr == GtdKatSopr.NRec)) = tsOk)
      vBk.BK.cOrg := GtdKatSopr.cOrg;

  vBk.BK.cStepDoc := vKS.KS.cStepDoc;
  vBk.BK.Nazn     := 'Импортная ГТД №' + vKS.KS.NSopr;

  if (vGetSD(vKS.KS.cStepDoc))
    vBk.BK.cBaseDoc := vSD.SD.cBaseDoc;

  if (not vGetUD(vSf.TipRegistrGTD))
  {
    vSfCreateStandTipUser;

    if (not vGetUD(vSf.TipRegistrGTD))
    {
      RegisterGTD_Standart := False;
      Exit;
    }
  }

  vBK.Bk.TipUser := vSf.TipRegistrGTD;
  vBK.Bk.SubTip  := vUD.UD.SubTip;
  vBK.Bk.RegDoc  := if ((vBK.Bk.SubTip AND 16) = 0, 0, 1);
  vBk.Bk.Descr := sTune_Descr;
  vBk.Bk.DesGr := sTune_DesGr;
  vBK.sTuneDescr := sTune_Descr;
  vBK.sTuneDesGr := sTune_DesGr;

  // Центр ответственности
  vBk.Bk.cOtvPodr := DefaultBaseCO;

  if (vKs.Ks.cOtvPodr <> comp(0))
  {
    vBk.Bk.TipOtvPodr := vKs.Ks.TipOtvPodr;
    vBk.Bk.cOtvPodr   := vKs.Ks.cOtvPodr;
  }
  else
  {
    if (vBk.Bk.cBaseDoc <> comp(0))
      if (vGetBD(vBk.Bk.cBaseDoc))
        if (vBD.BD.cOtvPodr <> comp(0))
        {
          vBk.Bk.TipOtvPodr := vBD.BD.TipOtvPodr;
          vBk.Bk.cOtvPodr   := vBD.BD.cOtvPodr;
        }
  }

  // Заполнение полей объекта и документов строительства
  if (bIsRegFromStroy)
  {
    vBK.BK.cObject  := cObject_BuyStroyBel_GTD;
    vBK.BK.cRecs[5] := cDoc_BuyStroyBel_GTD;
    vBK.BK.ls[5]    := wTiDk_BuyStroyBel_GTD;
  }

  if TrF(vBk.Insert current Bk)
  {
    if (not bIsRegFromStroy)
      MsgForm('Налоговый акт '+f_sNumDate(SopKatSopr.NSopr, SopKatSopr.dSopr)+'не удалось зарегистрировать в книге покупок!'
              , Confirmation+OkButton);
  }
  else
  {
    SfUpdateSoprHoz(vBk.Bk.NRec);
    if ((dFirstZk > vBk.Bk.dReg) OR (longint(dFirstZk) = 0))
      dFirstZk := vBk.Bk.dReg;

    if ((dLastZk  < vBk.Bk.dReg) OR (longint(dLastZk) = 0))
      dLastZk  := vBk.Bk.dReg;

    // Атрибут для льготного коэффициента
    if (bIsRegFromStroy)
      if (doBenefitsKoef_BuyStroyBel_GTD > cnstNullDouble)
        oExtAtr.doSetAttr(coBookPrZk, vBk.Bk.NRec, sAttrNameBenefitsKoef,
                          doBenefitsKoef_BuyStroyBel_GTD);

    if (not bIsRegFromStroy)
      MsgForm('Налоговый акт '+f_sNumDate(SopKatSopr.NSopr, SopKatSopr.dSopr)+' зарегистрирован в книге покупок'
              , Information+OkButton);
  }

  RenumBookZk(dFirstZk, dLastZk);
}

// Регистрация ГТД. Общая процедура.
procedure RegisterCustomGTD(cNAkt : Comp);
var
  OldMessMode  : Boolean;
  iCountMrk, i : LongInt;
{
  if (not Init_Register_GTD(cNAkt, OldMessMode, iCountMrk))
    Exit;

  for (i := 0; i < iCountMrk; i := i + 1)
  {
    if (not GetMarker(MrkKS2Reg, i, cNAkt))
      Continue;

    if (not vGetKS(cNAkt))
      Continue;

    // Беларусь. Регистрация ГТД по вручную введенным налогам.
    if (wTune_Country = ccBel)
      if (GetFirst SopKatSopr where ((cNAkt == SopKatSopr.NRec)) = tsOk)
        if ((SopKatSopr.VidSopr = 111) and (SopKatSopr.cNote = coTune_Bel_GTD_Status))
        {
          if (not RegisterSimpleGTD_Bel(cNAkt))
            Break;

          Continue;
        }

    // Стандартная регистрация ГТД по сложному алгоритму - автоматический расчет таможенных налогов.
    if (not RegisterGTD_Standart(cNAkt))
      Break;
  } // for

  Done_Register_GTD(OldMessMode);
}

//******************************************************************************
// регистрация ГТД, т.е. регистрируем налоговые акты,
// сформированнные по накладной(накладным)
Procedure RegisterGTD(cKS: comp);
{
  MrkKS := InitMarker('KS2NalAkts', 8, 100, 10, FALSE);

  var iCountMrk: longint; iCountMrk := GetMarkerCount(MrkKS);

  if (iCountMrk = 0)
    if (cKS <> comp(0))
      if (GetFirst KatSopr where ((cKS == KatSopr.NRec)) <> tsOk)
        {
          ClearMarker(MrkKS);
          DoneMarker(MrkKS, '');
          Exit;
        }
      else
        {
          ClearMarker(MrkKS);
          InsertMarker(MrkKS, cKS);
        }

  iCountMrk := GetMarkerCount(MrkKS);
  Delete All TmpNAkts;

  var i: longint;
  For (i := 0; i<iCountMrk; i := i+1)
    if GetMarker(MrkKS, i, cKS)
      if (GetFirst KatSopr where (( cKS == KatSopr.NRec)) = tsOk)
        GetTmpNAkts(cKS);  // проверка наличия налоговых актов для накладной

  ClearMarker(MrkKS);
  DoneMarker(MrkKS, 'KS2NalAkts');
  boIsRegisterNAkts := FALSE;

  if (RecordsInTable(tnTmpNAkts) = 0)
    Message('Нет сформированных налоговых актов для регистрации ГТД')
  else
    {
      RunWindowModal(winRegTmpNAkts);
      if (boIsRegisterNAkts)
        RegisterCustomGTD(comp(0));
    }
}

//******************************************************************************

HandleEvent

cmOnVipLoad:
{
  if (not LoadVipRef(iDelSopr, 'DelSopr'))
  {
    Message('Не загрузился интерфейс objDelSopr, удаление отменено', mfError);
    Exit;
  }

  wTune_Country             := wGetTune('Country');
  sTune_Descr               := sGetTune('User.Descr');
  sTune_DesGr               := sGetTune('User.DesGr');
  coTune_cGrNalUsl          := coGetTune('Nalog.cGrNalUsl');
  wTune_FormUch             := wGetTune('Oper.FormUch');
  boTune_RequestPartyGTD    := boGetTune('Nalog.RequestPartyGTD');
  boTune_ChangeDescr        := boGetTune('Doc.ChangeDescr');
  wTune_SoprStatus          := wGetTune('Doc.Buy.SoprStatus');
  boTune_AssociationSummGTD := boGetTune('Nalog.AssociationSummGTD');
  boTune_RequestDateGTD     := boGetTune('Nalog.RequestDateGTD');
  coTune_Bel_GTD_Status     := coGetTune('Nalog.Bel.GTD_Status');
  boTune_KontrOplGTD        := boGetTune('Nalog.KontrOplGTD');

  bIsRegFromStroy := False;
  doBenefitsKoef_BuyStroyBel_GTD := 0;
  cObject_BuyStroyBel_GTD := Comp(0);
  cDoc_BuyStroyBel_GTD    := Comp(0);
  wTiDk_BuyStroyBel_GTD   := 0;
}

cmOnVipUnload:
  if (not NullVipRef(iDelSopr))
    FreeVipInterface(iDelSopr);

end
End. //Interface

//******************************************************************************

#doc
Назначение : Интерфейс для работы с импортными ГТД (Беларусь)
Параметры  : Параметров нет - используется как объектный интерфейс
#end
Interface ISopIGTD_StroyBel;

Create view loImpGTD_StroyBel
;

// Регистрация налогового акта с учетом коэффициента из документа капстроительства
procedure RegisterCustomGTD_StroyBel(cNAkt : Comp; aKoeff : Double;
                                     aObject, aDelayed_Doc : Comp; aDelayed_TiDk : Word);

{
  doBenefitsKoef_BuyStroyBel_GTD := aKoeff;
  cObject_BuyStroyBel_GTD := aObject;
  cDoc_BuyStroyBel_GTD    := aDelayed_Doc;
  wTiDk_BuyStroyBel_GTD   := aDelayed_TiDk;

  RegisterCustomGTD(cNAkt);

  doBenefitsKoef_BuyStroyBel_GTD := 0;
  cObject_BuyStroyBel_GTD := Comp(0);
  cDoc_BuyStroyBel_GTD    := Comp(0);
  wTiDk_BuyStroyBel_GTD   := 0;
}

HandleEvent

cmOnVipLoad:
{
  bIsRegFromStroy := True;
  doBenefitsKoef_BuyStroyBel_GTD := 0;
  cObject_BuyStroyBel_GTD := Comp(0);
  cDoc_BuyStroyBel_GTD    := Comp(0);
  wTiDk_BuyStroyBel_GTD   := 0;
}

end;

end.
