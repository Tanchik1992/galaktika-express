//*****************************************************************************
//                                                      (c) корпорация Галактика
// Галактика 7.12 - Логистика
// Печать актов
//******************************************************************************
#include DOfuns.var

//******************************************************************************

#include prn_org.vpp

//******************************************************************************
#ifdef ATL51
#ifdef _AKTUSL_FR
DataStream AktDTS
(
  [CFH]      CommonFormHeader;
  [vid]      VidReport;
  [TypeSopr] TypeSopr;

  table  FR_Akt
  (
    [nRec             ]  FR_Akt.nRec            ;
    [Org              ]  FR_Akt.Org             ;
    [Akt              ]  FR_Akt.Akt             ;
    [Data             ]  FR_Akt.Data            ;
    [Data1            ]  FR_Akt.Data1           ;
    [Data2            ]  FR_Akt.Data2           ;
    [Sklad            ]  FR_Akt.Sklad           ;
    [Osn              ]  FR_Akt.Osn             ;
    [Osn1             ]  FR_Akt.Osn1            ;
    [Kontr            ]  FR_Akt.Kontr           ;
    [UNN1             ]  FR_Akt.UNN1            ;
    [UNN2             ]  FR_Akt.UNN2            ;
    [OKPO1            ]  FR_Akt.OKPO1           ;
    [OKPO2            ]  FR_Akt.OKPO2           ;
    [Nomer            ]  FR_Akt.Nomer           ;
    [Nomer1           ]  FR_Akt.Nomer1          ;
    [Otprav           ]  FR_Akt.Otprav          ;
    [Poluch           ]  FR_Akt.Poluch          ;
    [ispoln           ]  FR_Akt.ispoln          ;
    [zakazch          ]  FR_Akt.zakazch         ;
    [Dover            ]  FR_Akt.Dover           ;
    [ISumNac          ]  FR_Akt.ISumNac         ;
    [ISumVal          ]  FR_Akt.ISumVal         ;
    [ISum             ]  FR_Akt.ISum            ;
    [ISumBH           ]  FR_Akt.ISumBH          ;
    [ISumT            ]  FR_Akt.ISumT           ;
    [ISumTNac         ]  FR_Akt.ISumTNac        ;
    [ISumTSt          ]  FR_Akt.ISumSt          ;
    [INDS             ]  FR_Akt.INDS            ;
    [INDSn            ]  FR_Akt.INDSn           ;
    [INDSnT           ]  FR_Akt.INDSnT          ;
    [IAkciz           ]  FR_Akt.IAkciz          ;
    [INalProd         ]  FR_Akt.INalProd        ;
    [IVsegoNDS        ]  FR_Akt.IVsegoNDS       ;
    [IVsegoNDST       ]  FR_Akt.IVsegoNDST      ;
    [IKolF            ]  FR_Akt.IKolF           ;
    [Vsego            ]  FR_Akt.Vsego           ;
    [VsegoTN2         ]  FR_Akt.VsegoTN2        ;
    [NaSumNac         ]  FR_Akt.NaSumNac        ;
    [NaSumNacTN2      ]  FR_Akt.NaSumNacTN2     ;
    [SumNalogTN2      ]  FR_Akt.SumNalogTN2     ;
    [SumNalogTN2_2000 ]  FR_Akt.SumNalogTN2_2000;
    [SumNalogTN2_2000T]  FR_Akt.SumNalogTN2_2000T;
    [SumNalog         ]  FR_Akt.SumNalog        ;
    [NaSumVal         ]  FR_Akt.NaSumVal        ;
    [vKolOtpEd        ]  FR_Akt.vKolOtpEd       ;
    [vKolUchEd        ]  FR_Akt.vKolUchEd       ;
    [NaSumNac2        ]  FR_Akt.NaSumNac2       ;
    [NaSumVal2        ]  FR_Akt.NaSumVal2       ;
    [NaSumNak         ]  FR_Akt.NaSumNak        ;
    [Itogo            ]  FR_Akt.Itogo           ;
    [Polucheno        ]  FR_Akt.Polucheno       ;
    [NaSumNakSn       ]  FR_Akt.NaSumNakSn      ;
    [VsegoNDS         ]  FR_Akt.VsegoNDS        ;
    [VsegoNDS_2000    ]  FR_Akt.VsegoNDS_2000   ;
    [VsegoNDS_2000T   ]  FR_Akt.VsegoNDS_2000T  ;
    [Valut            ]  FR_Akt.Valut           ;
    [NacEd            ]  FR_Akt.NacEd           ;
    [ValEd            ]  FR_Akt.ValEd           ;
 );

  table FR_AktSpecif
  (
    [nRec       ] FR_AktSpecif.nRec        ;
    [nRec2      ] FR_AktSpecif.nRec2       ;
    [NomNomer   ] FR_AktSpecif.NomNomer    ;
    [Naim       ] FR_AktSpecif.Naim        ;
    [EdIzm      ] FR_AktSpecif.EdIzm       ;
    [OtpEdIzm   ] FR_AktSpecif.OtpEdIzm    ;
    [UchEdIzm   ] FR_AktSpecif.UchEdIzm    ;
    [Kol        ] FR_AktSpecif.Kol         ;
    [KolFakt    ] FR_AktSpecif.KolFakt     ;
    [KolFakt2   ] FR_AktSpecif.KolFakt2    ;
    [KolUpak    ] FR_AktSpecif.KolUpak     ;
    [KolProdUpak] FR_AktSpecif.KolProdUpak ;
    [CenaNacOtp ] FR_AktSpecif.CenaNacOtp  ;
    [CenaValOtp ] FR_AktSpecif.CenaValOtp  ;
    [CenaNacUch ] FR_AktSpecif.CenaNacUch  ;
    [CenaValUch ] FR_AktSpecif.CenaValUch  ;
    [CenaVal    ] FR_AktSpecif.CenaValOtp  ;
    [CenaOtp    ] FR_AktSpecif.CenaOtp     ;
    [CenaUch    ] FR_AktSpecif.CenaUch     ;
    [CenaT      ] FR_AktSpecif.CenaT       ;
    [CenaBH     ] FR_AktSpecif.CenaBH      ;
    [CenaTN2    ] FR_AktSpecif.CenaTN2     ;
    [SumTN2     ] FR_AktSpecif.SumTN2      ;
    [CenaTN2_2000] FR_AktSpecif.CenaTN2_2000;
    [SumTN2_2000 ] FR_AktSpecif.SumTN2_2000 ;
    [SumNac     ] FR_AktSpecif.SumNac      ;
    [SumVal     ] FR_AktSpecif.SumVal      ;
    [Summa      ] FR_AktSpecif.Summa       ;
    [SumT       ] FR_AktSpecif.SumT        ;
    [SumBH      ] FR_AktSpecif.SumBH       ;
    [StavkaNDS  ] FR_AktSpecif.StavkaNDS   ;
    [NDS        ] FR_AktSpecif.NDS         ;
    [NDSR       ] FR_AktSpecif.NDSR        ;
    [NDST       ] FR_AktSpecif.NDST        ;
    [Akciz      ] FR_AktSpecif.Akciz       ;
    [NalProd    ] FR_AktSpecif.NalProd     ;
    [VsegoNDS   ] FR_AktSpecif.VsegoNDS    ;
    [VsegoNDST  ] FR_AktSpecif.VsegoNDST   ;
    [VidTaru    ] FR_AktSpecif.VidTaru     ;
  );
)
end;
#end
#end
//******************************************************************************


Procedure WriteSumValue(ValR: double; ValV: double; koefValue: double; boNeedRound: boolean);
{
  if (boNeedRound)
    {
      FPrAkts.Write(if (KatSopr.cVal = 0, (ValR*koefValue), (ValV * koefValue)), Cena_Pr);
      FPrAkts.Write((ValR * koefValue), Cena_PrR);
      FPrAkts.Write((ValV * koefValue), Cena_PrV);
    }
  else
    {
      FPrAkts.Write(if (KatSopr.cVal = 0, ValR, ValV) * koefValue, Cena_Pr)
      FPrAkts.Write(ValR * koefValue, Cena_PrR);
      FPrAkts.Write(ValV * koefValue, Cena_PrV);
    }
}

//******************************************************************************

Procedure PrintDocument;

var
//------------------------------------------------------------------------------
  toc,emp      : word;
  pKatorg      : KatOrg;
  bank
, otprav
, poluch
, ispoln
, zakazch      : string;
//------------------------------------------------------------------------------
  pnrec
, pOrg
, pBank
, pOrgNRec     : comp;
//------------------------------------------------------------------------------

  AKolF, AKolU, KoefP,                  // Суммарное количество
  AStNak, AStNac, AStVal,               // Суммарные стоимости
  AStNakBN, AStNacBN, AStValBN,         // Суммарные стоимости без налогов
  AStNakSN, AStNacSN, AStValSN,         // Суммарные стоимости с налогами
  sNDS, sSpN, sNSel, sNDSv, sNSelV, sSpNv,
  ANDs, ANDSv, aSpN, aSpNv, aNSel, aNSelV, // Суммы налогов
  bnPrice, bnVPrice, snPrice, snVPrice, // Цены с налогами и без
  bnPrice2, bnVPrice2, snPrice2, snVPrice2, // Цены с налогами и без
  SumNalR, SumNalV,                     // Стоимости налогов по позиции
  iNalR, iNalV,                         // Сумма порядка налогов по позиции
  ProcNDS, ProcSpN, ProcSel,
  aSt,aNDSn,aStNDS
                : double;
//------------------------------------------------------------------------------
  iNalog
, iNpp          // Порядковый номер налога
, pg_flag
, fr_nrec
, fr_nrec2
                : word;
//------------------------------------------------------------------------------
  ANam          // Количество наименований
, MarkerCount   // счетчики записей в маркере
, i
                : longint;
//------------------------------------------------------------------------------
  pickrec       : comp;
//------------------------------------------------------------------------------

{
  if (NOT IsValid(#SpSopr))
    {
      Message('Акт еще не оформлен...', CancelButton);
      Exit;
    }

  fr_nRec2 :=  0;

  if VidReport > 0 // FReport
    toc := 1;
  else
    toc := 0;

  if (TypeSopr <> 111) and (TypeSopr <> 211)
  {
    toc := 0;
    VidReport := 0;
  }
  //установить округление
  Cena_Pr  := GetPrecisionGroup('brForSopr_RVPrice');
  Cena_PrR := GetPrecisionGroup('brForSopr_Price');
  Cena_PrV := GetPrecisionGroup('brForSopr_VPrice');
  Kol_Pr   := GetDlinaDrob_forKol;
!  if Cena_Pr  = 0  Cena_Pr := 2;
!  if Cena_PrR = 0  Cena_PrR := 2;
!  if Cena_PrV = 0  Cena_PrV := 2;
!  if Kol_Pr   = 0  Kol_Pr := 2;

  if (toc = 0)
  case TypeSopr of
   111: FPRAkts.SetGroup('Акт получения');
   211: FPRAkts.SetGroup('Акт реализации');
   114: FPRAkts.SetGroup('Акт приемки');
  end;

  pg_flag := 0;
  MarkerCount := GetMarkerCount(MarkerNZ);

  if (toc = 0)
  if (MarkerCount<>0)
    if ( RunDialog('PrintBaseDocParams', pg_flag) = cmCancel )
      Exit;

  StartNewVisual(vtNumericVisual, vfTimer+vfBreak+vfConfirm, 'Формирование документа', 1);

  if(toc = 0)
  {
    if (FPRAkts.Error)
      {
        FPrAkts.PutEvent(feBreak);
        FPRAkts.AbortForm;
        StopVisual('', 0);
        Exit;
      }
  }
 
  if (MarkerCount = 0)
    {
      pickrec := KatSopr.NRec;
      MarkerCount := 1;
    }

  PushPos(#KatSopr);

  For ( i := 0; i<MarkerCount; i := i+1 )
    {
      if (toc = 1)
      {
        fr_nrec2   := fr_nRec2 + 1;
        fr_nrec  := 0;
      }
      if (GetMarkerCount(MarkerNZ)<>0)
        GetMarker(MarkerNZ, i, pickrec);

      if (GetFirst KatSopr where ((pickrec == KatSopr.NRec)) = tsOk)
        {
          if (toc = 0)
          {
            PrintOrg (FPrAkts.Handle, coGetTune('MyOrg'), coGetTune('MyBank')  );

            if ( KatSopr.cDogovor <> comp(0) )
              {
                FPrAkts.Write(iOdecl.FIODeclension(comp(0), AttrDogD.Sign_My_FIO, 2));
                FPrAkts.Write(AttrDogD.Sign_My_Post);
                FPrAkts.Write(AttrDogD.Sign_My_Osn);
                FPrAkts.Write(iOdecl.FIODeclension(comp(0), AttrDogD.Sign_FIO, 2));
                FPrAkts.Write(AttrDogD.Sign_Post);
                FPrAkts.Write(AttrDogD.Sign_Osn);
              }
            else
              FPrAkts.SkipFormat(6);

            FPrAkts.Write(KatSopr.NRec);
            FPrAkts.Write(KatSopr.NSopr);
            FPrAkts.Write(KatSopr.Descr);
            FPrAkts.Write(PrintNumber(KatSopr.Descr, KatSopr.NSopr));
            FPrAkts.Write(KatSopr.dSopr);
            FPrAkts.Write(KatSopr.Name);
            FPrAkts.Write(KatPodr.Name);
            FPrAkts.Write(KatSopr.sDover); // доверенное лицо
            FPrAkts.Write(KatSopr.nDover); // номер доверенности
            FPrAkts.Write(KatSopr.dDover); // дата доверенности

          #ifdef _OPER_NAKL_VIH
            // данные из расширенной информации
            Var NameStage: string;

            NameStage := piExtAttr.mGetAttr(coCalPlan, KatSopr.cCalPlan, 'НИОКР. Наименование этапа')

            FPrAkts.Write(Dogovor.NoDoc);     // Номер_договора
            FPrAkts.Write(Dogovor.dDoc);      // Дата_договора
            FPrAkts.Write(AttrDogD.SUBJECT1); // Предмет_договора
            FPrAkts.Write(AppDogovor.NoDoc);  // Номер_соглашения
            FPrAkts.Write(AppDogovor.dDoc);   // Дата_соглашения
            FPrAkts.Write(AttrDogS.SUBJECT1); // Предмет_соглашения
            FPrAkts.Write(CalPlan.NoDoc);     // Номер_календарного_плана
            FPrAkts.Write(CalPlan.dInput);    // Дата_календарного_плана
            FPrAkts.Write(NameStage);         // Наименование_этапа
            FPrAkts.Write(KatMol.Name);       // МОЛ
            FPrAkts.Write(OrgVzr.Name);       // Контрагент_взаиморасчетов
            FPrAkts.Write(KatNazna.Name);     // Назначение
            FPrAkts.Write(Persons.FIO);       // Ответственное_лицо
            //
          #else
            FPrAkts.SkipFormat(13);
          #end

            PrintOrg (FPrAkts.Handle, KatOrg.NRec, 0 ); //-- контрагент
            PrintOrg (FPrAkts.Handle, KatSopr.cGruzTo, 0 ); //-- заказчик
            PrintOrg (FPrAkts.Handle, KatSopr.cOrg, 0 );     //-- контрагент для взаиморасчетов

            //-- счет-фактура
            FPrAkts.Write(SchFact.NRec);
            FPrAkts.Write(SchFact.Num);

            if (KatSopr.cStepDoc = 0)
              FPrAkts.PutEventById(feFalse, fcAkts01);
            else
              {
                FPrAkts.PutEventById(feTrue, fcAkts01);
                FPrAkts.Write(BaseDoc.NoDoc); FPrAkts.Write(BaseDoc.dDoc);
              }

            FPrAkts.Write(Valut);
          }         

          //------------------------------------------------------------------------------
          if (toc = 0)
          if (sGetTune('NDE.SimvRub') <> '')
            FPrAkts.Write(sGetTune('NDE.SimvRub'))
          else
            FPrAkts.Write('руб.');

          PushPos(#SpSopr);
          if (GetFirst SpSopr <> tsOk)
            {
              if (toc = 0)
              {
                FPrAkts.PutEvent(feBreak);
                FPRAkts.AbortForm;
              }
              Message('В акте №'+NomDes+' нет услуг...', CancelButton);
              StopVisual('', 0);
              Exit;
            }

          if (toc = 1)
          {
            emp := 0;

            pOrgNRec := KatOrg.NRec;

            pOrg  := coGetTune('MyOrg') ;
            pBank := coGetTune('MyBank');
            pnRec := KatBank.nRec;

            if (pBank = 0 )
              pnrec := if((GetFirst KatBank where((pOrg == KatBank.cOrg)) Ordered by index KatBank05) = tsOk,
                           KatBank.nRec, Comp(0));

              if (GetFirst KatOrg where((pOrg == Katorg.nRec)) ) = tsOk
              {
                if (pnRec = 0)
                  bank := '';
                else
                {
                  pnRec := 0

                  if boGetTune('Fin.Doc.Filial')
                    if GetFirst FastFirstRow KatB where (( KatBank.cBank == KatB.NRec )) = tsOk
                      if (KatB.KorSchet = '')
                        if GetFirst FastFirstRow KatBH where (( KatB.cHigHer == KatBH.NRec )) = tsOk
                          pnRec := KatBH.NRec;

                  if (pnRec = 0)
                    bank := ' Банк: ' + KatBank.Name + ' р/с ' + KatBank.Schet1 + ' БИК ' + KatBank.MFO1;
                  else
                    bank := ' Банк: ' + KatBH.Name + ' р/с ' + KatB.Schet1 + ' БИК ' + KatB.MFO1;
                }
                otprav := pKatOrg.GetKatOrgName(coGetTune('MyOrg'),koOnTune)
                          + '  ОКПО ' + KatOrg.OKPO
                          + '  ИНН ' + KatOrg.UNN
                          + '  Адрес: ' + if (boGetTune('Rep.FullOrgAddr'), pKatOrg.FullOrgAddr(KatOrg.nRec), KatOrg.Addr)
                          + '  ' + bank;
                ispoln := pKatOrg.GetKatOrgName(coGetTune('MyOrg'),koOnTune);
              }
              else
              {
                otprav := '';
                ispoln := '';
              }

            pOrg  := pOrgNRec;
            pBank := 0;
            pnRec := KatBank.nRec;

            if (pBank = 0 )
              pnrec := if((GetFirst KatBank where((pOrg == KatBank.cOrg)) Ordered by index KatBank05) = tsOk,
                         KatBank.nRec, Comp(0));

            if (KatOrg.nRec <>0)
              if (GetFirst KatOrg where((pOrg == Katorg.nRec)) ) = tsOk
              {
                  if (pnRec = 0)
                    bank := '';
                  else
                  {
                    pnRec := 0
                    if boGetTune('Fin.Doc.Filial')
                      if GetFirst FastFirstRow KatB where (( KatBank.cBank == KatB.NRec )) = tsOk
                        if (KatB.KorSchet = '')
                          if GetFirst FastFirstRow KatBH where (( KatB.cHigHer == KatBH.NRec )) = tsOk
                            pnRec := KatBH.NRec;

                    if (pnRec = 0)
                      bank := ' Банк: ' + KatBank.Name + ' р/с ' + KatBank.Schet1 + ' БИК ' + KatBank.MFO1;
                    else
                      bank := ' Банк: ' + KatBH.Name + ' р/с ' + KatB.Schet1 + ' БИК ' + KatB.MFO1;
                   }
                poluch := pKatOrg.GetKatOrgName(KatOrg.nRec,koOnTune)
                          + '  ОКПО ' + KatOrg.OKPO
                          + '  ИНН ' + KatOrg.UNN
                          + '  Адрес: ' + if (boGetTune('Rep.FullOrgAddr'), pKatOrg.FullOrgAddr(KatOrg.nRec), KatOrg.Addr)
                          + '  ' + bank;
                zakazch := pKatOrg.GetKatOrgName(KatOrg.nRec,koOnTune);
              }
              else
              {
                poluch  := '';
                zakazch := '';
              }

            aNDSn := 0;
            aStNDS :=0;
            aSt := 0;
          }

          if (toc = 0)
            FPrAkts.Write(KlVal.SimvolV);
          
          ANam := 0;
          AkolF := 0;
          AKolU := 0;
          AStNak := 0;
          AStNac := 0;
          AStVal := 0;
          AStNakBN := 0;
          AStNacBN := 0;
          AStValBN := 0;
          AStNakSN := 0;
          AStNacSN := 0;
          AStValSN := 0;
          ANDs := 0;
          ANDSv := 0;
          aSpN := 0;
          aSpNv := 0;
          aNSel := 0;
          aNSelv := 0;

          _LOOP SpSopr
            {
              ANam := ANam + 1;
              
              if (toc = 0)
              {
                FPrAkts.Write(SpSopr.NRec);
                FPrAkts.Write(if (SpSopr.PrMc = 1, KatMC.BarKod, KatUsl.Kod));
                FPrAkts.Write(if (SpSopr.PrMc = 1, KatMC.Name, KatUsl.Name));
                FPrAkts.Write(KatOtpEd.Name);
                FPrAkts.Write(fEdIzm.GetKatEdName(if (SpSopr.PrMc = 1, KatMC.cEd, KatUsl.cEd)));
                FPrAkts.Write(SpSopr.Netto+SpSopr.mTara, 3);
                FPrAkts.Write(SpSopr.Netto, 3);
                FPrAkts.Write(SpSopr.Kol, Kol_Pr);
                FPrAkts.Write(SpSopr.KolFact, Kol_Pr);
              }

              AKolF := AKolF + SpSopr.KolFact;
              KoefP := if (IsValid(#KatOtpEd), KatOtpEd.koef, 1);
              if (toc = 0)
                FPrAkts.Write(SpSopr.KolFact * KoefP, Kol_Pr);
              AKolU := AKolU + SpSopr.KolFact * KoefP;
              if (toc = 0)
              {
                WriteSumValue(SpSopr.rPrice, Spsopr.rVPrice, 1, FALSE);
                WriteSumValue(SpSopr.rPrice, SpSopr.rVPrice, 1/Koefp, FALSE);
                WriteSumValue(SpSopr.Price, SpSopr.VPrice, SpSopr.KolFact, TRUE);
              }
            
              AstNak := AStNak + if (KatSopr.cVal = 0, SpSopr.Price, Spsopr.VPrice) * SpSopr.KolFact;
              AStNac := AStNac + (SpSopr.Price * SpSopr.KolFact);
              AStVal := AStVal + (SpSopr.VPrice * SpSopr.KolFact);
              sNDS := 0;
              sNDSv := 0;
              sSpN := 0;
              sSpNv := 0;
              sNSel := 0;
              sNSelv := 0;
              ProcNDS := 0;
              ProcSel := 0;
              ProcSpN := 0;

              ResetBounds(#SpDocNal);

              SumNalR := 0;
              SumNalV := 0;
              iNalog := 0;
              iNalR := 0;
              iNalV := 0;

              _LOOP SpDocNal where ((SpSopr.NRec == SpDocNal.cSpDoc AND
                                     KatSopr.VidSopr == SpDocNal.TipDoc))
                                     ordered by index SpDocNal02
               {
                 SumNalR := SumNalR + SpDocNal.Summa;
                 SumNalV := SumNalV + SpDocNal.SumVal;
                 iNpp := if (SpdocNal.Npp <= 7, SpDocNal.Npp, 7);

                 if (iNpp > 0) if (iNalog = iNpp)
                 {
                   iNalR := iNalR + SpDocNal.Summa;
                   iNalV := iNalV + SpDocNal.SumVal;
                 }
                 else
                 {

                   if (toc = 0)
                   {
                     FPrAkts.Write(iNalR, Cena_PrR);
                     FPrAkts.Write(iNalV, Cena_PrV);
                   }
                   iNalR := SpDocNal.Summa;
                   iNalV := SpDocNal.SumVal;
                   if (toc = 0)
                     FPrAkts.SkipFormat((iNpp-(iNalog+1))* 2);
                   iNalog := iNpp;
                 }

                 //------------------------------------------------------------------------------
                 if (SpDocNal.cNalog = coGetTune('Nalog.cNalogNDS'))
                 {
                   sNDS := sNDS + SpDocNal.Summa;
                   sNDSV := sNDSV + SpDocNal.SumVal;
                   ProcNDS :=  SpDocNal.Nalog;
                 }

                 //------------------------------------------------------------------------------
                 if (SpDocNal.cNalog = coGetTune('Nalog.cNalogAkcis'))
                 {
                   sSpN := sSpN + SpDocNal.Summa;
                   sSpNV := sSpNV + SpDocNal.SumVal;
                   ProcSpN :=  SpDocNal.Nalog;
                 }

                 //------------------------------------------------------------------------------
                 // налог с продаж
                 //
                 if (SpDocNal.cNalog = coGetTune('Nalog.cNalogProd'))
                 {
                   sNSel  := sNSel  + SpDocNal.Summa;
                   sNSelV := sNSelV + SpDocNal.SumVal;
                   ProcSel :=  SpDocNal.Nalog;
                 }
               } //_LOOP SpDocNal

              if (iNalog < 7)
                {
                  if (toc = 0)
                  {
                    FPrAkts.Write(iNalR, Cena_PrR);
                    FPrAkts.Write(iNalV, Cena_PrV);
                    FPrAkts.SkipFormat((7-(iNalog+1))* 2);
                  }
                }

              SetBounds(#SpDocNal);

              if f_KolIsZero(SpSopr.KolFact)
                {
                  bnPrice := 0;
                  bnVPrice := 0;
                  snPrice := 0;
                  snVPrice := 0;
                  bnPrice2  := 0;
                  bnVPrice2 := 0;
                  snPrice2  := 0;
                  snVPrice2 := 0;
                  sNDS := 0;
                  sNDSV := 0;
                  sSpN := 0;
                  sSpNV := 0;
                  sNSel := 0;
                  sNSelV := 0;
                }
              else
                {
                  if (KatSopr.VhodNal = 1)
                    {
                      bnPrice := SpSopr.rPrice - SumNalR / SpSopr.KolFact;
                      bnVPrice := SpSopr.rVPrice - SumNalV / SpSopr.KolFact;
                      snPrice := SpSopr.rPrice;
                      snVPrice := SpSopr.rVPrice;
                      bnPrice2  := SpSopr.Price - SumNalR / SpSopr.KolFact;
                      bnVPrice2 := SpSopr.VPrice - SumNalV / SpSopr.KolFact;
                      snPrice2  := SpSopr.Price;
                      snVPrice2 := SpSopr.VPrice;
                    }
                  else
                    {
                      snPrice := SpSopr.rPrice + SumNalR / SpSopr.KolFact;
                      snVPrice := SpSopr.rVPrice + SumNalV / SpSopr.KolFact;
                      bnPrice := SpSopr.rPrice;
                      bnVPrice := SpSopr.rVPrice;
                      snPrice2  := SpSopr.Price + SumNalR / SpSopr.KolFact;
                      snVPrice2 := SpSopr.VPrice + SumNalV / SpSopr.KolFact;
                      bnPrice2  := SpSopr.Price;
                      bnVPrice2 := SpSopr.VPrice;
                    }

                  sNDS  := sNDS  / SpSopr.KolFact;
                  sNDSV := sNDSV / SpSopr.KolFact;
                  sSpN  := sSpN  / SpSopr.KolFact;
                  sSpNV := sSpNV / SpSopr.KolFact;
                  sNSel  := sNSel  / SpSopr.KolFact;
                  sNSelV := sNSelV / SpSopr.KolFact;
                }
              if (toc = 0)
              {
                WriteSumValue(bnPrice, bnVPrice, 1, FALSE);
                WriteSumValue(bnPrice, bnVPrice, 1/koefp, FALSE);
                WriteSumValue(snPrice, snVPrice, 1, FALSE);
                WriteSumValue(snPrice, snVPrice, 1/koefp, FALSE);
              }

              if (toc = 0)
              if (KatSopr.cVal = 0)
                {
                  FPrAkts.Write(sNDS, Cena_PrR);
                  FPrAkts.Write(sSpN, Cena_PrR);
                  FPrAkts.Write(sNSel, Cena_PrR);
                  FPrAkts.Write(sSpN+sNDS+sNSel, Cena_PrR);
                }
              else
                {
                  FPrAkts.Write(sNDSv, Cena_PrV);
                  FPrAkts.Write(sSpNv, Cena_PrV);
                  FPrAkts.Write(sNSelv, Cena_PrV);
                  FPrAkts.Write(sSpNv+sNDSv+sNSelv, Cena_PrV);
                }

              if (toc = 0)
              {
                FPrAkts.Write(sNDS, Cena_PrR);
                FPrAkts.Write(sSpN, Cena_PrR);
                FPrAkts.Write(sNSel, Cena_PrR);
                FPrAkts.Write(sSpN+sNDS+sNSel, Cena_PrR);

                FPrAkts.Write(sNDSv, Cena_PrV);
                FPrAkts.Write(sSpNv, Cena_PrV);
                FPrAkts.Write(sNSelV, Cena_PrV);
                FPrAkts.Write(sSpNv+sNDSv+sNSelV, Cena_PrV);

                WriteSumValue(bnPrice, bnVPrice, SpSopr.KolFact, TRUE);
                WriteSumValue(snPrice, snVPrice, SpSopr.KolFact, TRUE);
              }

              AStNakBN := AStNakBN + (if (KatSopr.cVal = 0, bnPrice2, bnVPrice2) * SpSopr.KolFact);
              AStNacBN := AStNacBN + (bnPrice2 * SpSopr.KolFact);
              AStValBN := AStValBN + (bnVPrice2 * SpSopr.KolFact);
              AStNakSN := AStNakSN + (if (KatSopr.cVal = 0, snPrice2, snVPrice2) * SpSopr.KolFact);
              AStNacSN := AStNacSN + (snPrice2 * SpSopr.KolFact);
              AStValSN := AStValSN + (snVPrice2 * SpSopr.KolFact);

              if (toc = 0)
              {
              if (KatSopr.cVal = 0)
                {
                  FPrAkts.Write((SpSopr.KolFact * sNDS), Cena_PrR);
                  FPrAkts.Write((SpSopr.KolFact * sSpN), Cena_PrR);
                  FPrAkts.Write((SpSopr.KolFact * sNSel), Cena_PrR);
                  FPrAkts.Write((SpSopr.KolFact * (sNDS +sSpN+sNSel)), Cena_PrR);
                }
              else
                {
                  FPrAkts.Write((SpSopr.KolFact * sNDSv), Cena_PrV);
                  FPrAkts.Write((SpSopr.KolFact * sSpNv), Cena_PrV);
                  FPrAkts.Write((SpSopr.KolFact * sNSelV), Cena_PrV);
                  FPrAkts.Write((SpSopr.KolFact * (sNDSv +sSpNv+sNSelV)), Cena_PrV);
                }

              FPrAkts.Write((SpSopr.KolFact * sNDS), Cena_PrR);
              FPrAkts.Write((SpSopr.KolFact * sSpN), Cena_PrR);
              FPrAkts.Write((SpSopr.KolFact * sNSel), Cena_PrR);
              FPrAkts.Write((SpSopr.KolFact * (sNDS +sSpN+sNSel)), Cena_PrR);
              FPrAkts.Write((SpSopr.KolFact * sNDSv), Cena_PrV);
              FPrAkts.Write((SpSopr.KolFact * sSpNv), Cena_PrV);
              FPrAkts.Write((SpSopr.KolFact * sNSelV), Cena_PrV);
              FPrAkts.Write((SpSopr.KolFact * (sNDSv +sSpNv+sNSelV)), Cena_PrV);
              }
              ANDS  := ANDS  + (sNDS  * SpSopr.KolFact);
              aSpN  := aSpN  + (sSpN  * SpSopr.KolFact);
              aNSel := aNSel + (sNSel * SpSopr.KolFact);
              ANDSv  := ANDSv  + (sNDSv  * SpSopr.KolFact);
              aSpNv  := aSpNv  + (sSpNv  * SpSopr.KolFact);
              aNSelv := aNSelv + (sNSelv * SpSopr.KolFact);

#ifdef _AKTUSL_FR
              if (toc = 1)
                {
                  fr_nrec := fr_nrec + 1;
                  ClearBuffer(#FR_AktSpecif);
                  FR_AktSpecif.NRec2      := fr_nrec2;
                  Fr_AktSpecif.Nrec       := fr_nrec;
                  FR_AktSpecif.NomNomer   := if (SpSopr.PrMc = 1, KatMC.BarKod, KatUsl.Kod);
                  FR_AktSpecif.Naim       := if (SpSopr.PrMc = 1, KatMC.Name, KatUsl.Name );
                  FR_AktSpecif.OtpEdIzm   := KatOtpEd.Name ;
                  FR_AktSpecif.UchEdIzm   := fEdIzm.GetKatEdName(if (SpSopr.PrMc = 1, KatMC.cEd, KatUsl.cEd));
                  FR_AktSpecif.Kol        := SpSopr.Kol    ;
                  FR_AktSpecif.KolFakt    := SpSopr.KolFact;
                  FR_AktSpecif.KolFakt2   := SpSopr.KolFact * KoefP ;
                  FR_AktSpecif.CenaNacOtp := SpSopr.rPrice ;
                  FR_AktSpecif.CenaValOtp := Spsopr.rVPrice;
                  FR_AktSpecif.CenaNacUch := SpSopr.rPrice/Koefp  ;
                  FR_AktSpecif.CenaValUch := Spsopr.rVPrice/Koefp ;
                  FR_AktSpecif.CenaOtp    := if (KatSopr.cVal = 0, SpSopr.rPrice, SpSopr.rVPrice);
                  FR_AktSpecif.CenaUch    := if (KatSopr.cVal = 0, SpSopr.rPrice, SpSopr.rVPrice)/Koefp;
                  FR_AktSpecif.CenaT      := SpSopr.rPrice/1000;
                  FR_AktSpecif.SumNac     := SpSopr.Price  * SpSopr.KolFact;
                  FR_AktSpecif.SumVal     := Spsopr.VPrice * SpSopr.KolFact;
                  FR_AktSpecif.Summa      := if (KatSopr.cVal = 0, SpSopr.Price*SpSopr.KolFact, SpSopr.VPrice*SpSopr.KolFact);
                  FR_AktSpecif.SumT       := SpSopr.Price  * SpSopr.KolFact/1000 ;
                  emp := 1;

                  FR_AktSpecif.EdIzm      :=  Valut;
                  FR_AktSpecif.KolFakt    := SpSopr.KolFact;
                  FR_AktSpecif.KolFakt2   := SpSopr.KolFact * KoefP ;
                  if (TypeSopr = 111)
                  {
                    FR_AktSpecif.CenaBH := if (KatSopr.cVal = 0, bnPrice, bnVPrice);
                    FR_AktSpecif.SumBH  := if (KatSopr.cVal = 0, bnPrice*SpSopr.KolFact, bnVPrice*SpSopr.KolFact);
                  }
                  else
                  {
                    FR_AktSpecif.CenaBH := if (KatSopr.cVal = 0, SpSopr.rPrice, SpSopr.rVPrice);
                    FR_AktSpecif.SumBH  := if (KatSopr.cVal = 0, SpSopr.Price*SpSopr.KolFact, SpSopr.VPrice*SpSopr.KolFact);
                  }

                  FR_AktSpecif.CenaTN2  := bnPrice/KoefP;
                  FR_AktSpecif.SumTN2   := Round(bnPrice*SpSopr.KolFact ,2);

                  FR_AktSpecif.CenaTN2_2000  := (bnPrice/KoefP)/1000;
                  FR_AktSpecif.SumTN2_2000   := Round(bnPrice*SpSopr.KolFact ,2)/1000;

                  FR_AktSpecif.KolUpak     := SpSopr.KolFact;
                  FR_AktSpecif.KolProdUpak := KoefP;
                  FR_AktSpecif.StavkaNDS  := ProcNDS;
                  FR_AktSpecif.NDS        := if (KatSopr.cVal = 0, SpSopr.KolFact * sNDS, SpSopr.KolFact * sNDSv)  ;
                  FR_AktSpecif.NDSR       := Round(SpSopr.KolFact *sNDS, 2);
                  FR_AktSpecif.NDST       := Round(SpSopr.KolFact *sNDS, 2)/1000;
                  FR_AktSpecif.Akciz      := if (KatSopr.cVal = 0, SpSopr.KolFact * sSpN, SpSopr.KolFact * sSpNv)  ;
                  FR_AktSpecif.NalProd    := if (KatSopr.cVal = 0, SpSopr.KolFact * sNSel, SpSopr.KolFact * sNSelV);
                  FR_AktSpecif.VsegoNDS   := Round(snPrice*SpSopr.KolFact,2);
                  FR_AktSpecif.VsegoNDST  := Round(snPrice*SpSopr.KolFact,2)/1000;
                  FR_AktSpecif.VidTaru    := KatOtpEd.Name ;
                  insert current FR_AktSpecif;
                  emp := 1;
                  aSt := aSt + Round(bnPrice*SpSopr.KolFact ,2) ;
                  aNDSn := aNDSn + SpSopr.KolFact *sNDS;
                  aStNDS := aStNDS + snPrice*SpSopr.KolFact;
                }
#endif
              //------------------------------------------------------------------------------
              if (KatSopr.cVal <> 0)
                {
                  sNDS  := sNDSv;
                  sSpN  := sSpNv;
                  sNSel := sNSelv;
                  bnPrice := bnVPrice;
                }

              //------------------------------------------------------------------------------
              if (toc = 0)
              if (bnPrice <> 0)
                {
                  FPrAkts.Write(ProcNDS, 2);
                  FPrAkts.Write(ProcSpN, 2);
                  FPrAkts.Write(ProcSel, 2);
                  FPrAkts.Write((sNDS + sSpN + sNSel) / bnPrice * 100, 2);
                }
              else
                {
                  FPrAkts.Write(ProcNDS, 2);
                  FPrAkts.Write(ProcSpN, 2);
                  FPrAkts.Write(ProcSel, 2);
                  FPrAkts.SkipFormat(1);
                }
             
              //------------------------------------------------------------------------------
              if (NOT NextVisual)
                {
                  PopPos(#SpSopr);
                  if (toc = 0)
                  {
                    FPrAkts.PutEvent(feBreak);
                    FPrAkts.AbortForm;
                  }
                  StopVisual('', 0);
                  Exit;
                }
            } //_LOOP SpSopr
          //------------------------------------------------------------------------------
          if (toc = 0)
          {
          FPrAkts.PutEvent(feBreak);
          FPrAkts.Write(ANam);
          FPrAkts.Write(DoubleToStr(ANam, '4'));
          FPrAkts.Write(AKolF, Kol_Pr);
          FPrAkts.Write(DoubletoStr(AKolF, '45'));
          FPrAkts.Write(AKolU, Kol_Pr);
          FPrAkts.Write(DoubletoStr(AKolU, '45'));
          FPrAkts.Write(Round(AStNak, Cena_Pr), Cena_Pr);
          FPrAkts.Write(DoubleToString(KatSopr.cVal, Round(AStNak, Cena_Pr)));
          FPrAkts.Write(Round(AStNac, Cena_PrR), Cena_PrR);
          FPrAkts.Write(DoubleToString(0, Round(AStNac, Cena_PrR)));
          FPrAkts.Write(Round(AStVal, Cena_PrV), Cena_PrV);                       //!!
          FPrAkts.Write(DoubleToString(SpSopr.cVal, Round(AStVal, Cena_PrV)));
          FPrAkts.Write(Round(AStNakBN, Cena_Pr), Cena_Pr);
          FPrAkts.Write(DoubleToString(KatSopr.cVal, Round(AStNakBN, Cena_Pr)));
          FPrAkts.Write(Round(AStNacBN, Cena_PrR), Cena_PrR);
          FPrAkts.Write(DoubleToString(0, Round(AStNacBN, Cena_PrR)));
          FPrAkts.Write(Round(AStValBN, Cena_PrV), Cena_PrV);
          FPrAkts.Write(DoubleToString(SpSopr.cVal, Round(AStValBN, Cena_PrV)));
          FPrAkts.Write(Round(AStNakSN, Cena_Pr), Cena_Pr);
          FPrAkts.Write(DoubleToString(KatSopr.cVal, Round(AStNakSN, Cena_Pr)));
          FPrAkts.Write(Round(AStNacSN, Cena_PrR), Cena_PrR);
          FPrAkts.Write(DoubleToString(0, Round(AStNacSN, Cena_PrR)));
          FPrAkts.Write(Round(AStValSN, Cena_PrV), Cena_PrV);
          FPrAkts.Write(DoubleToString(SpSopr.cVal, Round(AStValSN, Cena_PrV)));
          }
          //------------------------------------------------------------------------------
          if (toc = 0)
          if (KatSopr.cVal = 0)
            {
              FPrAkts.Write(Round(aNDS, Cena_PrR), Cena_PrR);
              FPrAkts.Write(DoubleToString(0, Round(aNDS, Cena_PrR)));
              FPrAkts.Write(Round(aSpN, Cena_PrR), Cena_PrR);
              FPrAkts.Write(DoubleToString(0, Round(aSpN, Cena_PrR)));
              FPrAkts.Write(Round(aNSel, Cena_PrR), Cena_PrR);
              FPrAkts.Write(DoubleToString(0, Round(aNSel, Cena_PrR)));
              FPrAkts.Write(Round(aSpN+aNDS+aNSel, Cena_PrR), Cena_PrR);
              FPrAkts.Write(DoubleToString(0, Round(aSpN+aNDS+aNSelV, Cena_PrR)));
            }
          else
            {
              FPrAkts.Write(Round(aNDSv, Cena_PrV), Cena_PrV);
              FPrAkts.Write(DoubleToString(SpSopr.cVal, Round(aNDSv, Cena_PrV)));
              FPrAkts.Write(Round(aSpNv, Cena_PrV), Cena_PrV);
              FPrAkts.Write(DoubleToString(SpSopr.cVal, Round(aSpNv, Cena_PrV)));
              FPrAkts.Write(Round(aNSelv, Cena_PrV), Cena_PrV);
              FPrAkts.Write(DoubleToString(SpSopr.cVal, Round(aNSelv, Cena_PrV)));
              FPrAkts.Write(Round(aSpNv+aNDSv+aNSelV, Cena_PrV), Cena_PrV);
              FPrAkts.Write(DoubleToString(SpSopr.cVal, Round(aSpNv+aNDSv+aNSelV, Cena_PrV)));
            }

          //------------------------------------------------------------------------------
          if (toc = 0)
          {
          FPrAkts.Write(Round(aNDS, Cena_PrR), Cena_PrR);
          FPrAkts.Write(DoubleToString(0, Round(aNDS, Cena_PrR)));
          FPrAkts.Write(Round(aSpN, Cena_PrR), Cena_PrR);
          FPrAkts.Write(DoubleToString(0, Round(aSpN, Cena_PrR)));
          FPrAkts.Write(Round(aNSel, Cena_PrR), Cena_PrR);
          FPrAkts.Write(DoubleToString(0, Round(aNSel, Cena_PrR)));
          FPrAkts.Write(Round(aSpN+aNDS+aNSel, Cena_PrR), Cena_PrR);
          FPrAkts.Write(DoubleToString(0, Round(aSpN+aNDS+aNSel, Cena_PrR)));
          FPrAkts.Write(Round(aNDSv, Cena_PrV), Cena_PrV);
          FPrAkts.Write(DoubleToString(SpSopr.cVal, Round(aNDSv, Cena_PrV)));
          FPrAkts.Write(Round(aSpNv, Cena_PrV), Cena_PrV);
          FPrAkts.Write(DoubleToString(SpSopr.cVal, Round(aSpNv, Cena_PrV)));
          FPrAkts.Write(Round(aNSelv, Cena_PrV), Cena_PrV);
          FPrAkts.Write(DoubleToString(SpSopr.cVal, Round(aNSelv, Cena_PrV)));
          FPrAkts.Write(Round(aSpNv+aNDSv+aNSelV, Cena_PrV), Cena_PrV);
          FPrAkts.Write(DoubleToString(SpSopr.cVal, Round(aSpNv+aNDSv+aNSelV, Cena_PrV)));
          }

          if (KatSopr.cVal <> 0)
            {
              ANDS  := ANDSv;
              aSpN  := aSpNv;
              aNSel := aNSelv;
            }

          //------------------------------------------------------------------------------
          if (toc = 0)
          if (aStNakSN = 0)
            FPrAkts.SkipFormat(4);
          else
            {
              FPrAkts.Write(aNDS / aStNakBN * 100, Cena_Pr);
              FPrAkts.Write(aSpN / aStNakBN * 100, Cena_Pr);
              FPrAkts.Write(aNSel / aStNakBN * 100, Cena_Pr);
              FPrAkts.Write((aSpN+aNDS+aNSel) / aStNakBN * 100, Cena_Pr);
            }

          //------------------------------------------------------------------------------
          if (toc = 0)
          if (pg_flag <> 0) AND (i < MarkerCount-1)
            FPrAkts.write(' ');
          else
            FPrAkts.SkipFormat(1);       
#ifdef _AKTUSL_FR
          else
          {
            ClearBuffer(#FR_Akt);
            FR_Akt.nRec := fr_nrec2;
            FR_Akt.Org  := if (coGetTune('MyOrg') <> 0, 'Организация: ' + sGetTune('MyOrg'), '');
            if (TypeSopr = 111 )
              FR_Akt.Akt := 'АКТ № ' + PrintNumber(KatSopr.Descr, KatSopr.NSopr) + ' НА ПОЛУЧЕНИЕ УСЛУГ';
            else
              FR_Akt.Akt := 'АКТ № ' + PrintNumber(KatSopr.Descr, KatSopr.NSopr) + ' НА РЕАЛИЗАЦИЮ УСЛУГ';

            FR_Akt.Data   := ' от ' + DateToStr(KatSopr.dSopr, 'DD/MM/YYYY');
            FR_Akt.Sklad  := 'Склад: ' + KatPodr.Name;
            FR_Akt.Osn    := if ( KatSopr.cStepDoc <> 0
                                            , 'Основание № ' + BaseDoc.NoDoc+ ' от ' + DateToStr(BaseDoc.dDoc, 'DD/MM/YYYY')
                                            , '');
            if (KatOrg.NRec <> 0)
            {
              if (TypeSopr = 111 )
                FR_Akt.Kontr :=  'Подрядчик: ' + pKatOrg.GetKatOrgName(KatOrg.nRec,koOnTune);
              else
                FR_Akt.Kontr :=  'Заказчик: ' + pKatOrg.GetKatOrgName(KatOrg.nRec,koOnTune) ;
            }
            else
              FR_Akt.Kontr := '';
#ifdef _AKTUSL_211
            pOrgNRec := KatOrg.NRec;

            pOrg  := coGetTune('MyOrg') ;
            FR_Akt.UNN1 := if ((GetFirst KatOrg where((pOrg == Katorg.nRec)) ) = tsOk,  KatOrg.UNN, '');

            pOrg  := pOrgNRec;
            FR_Akt.UNN2 := if ((GetFirst KatOrg where((pOrg == Katorg.nRec)) ) = tsOk,  KatOrg.UNN, '');

            pOrg  := coGetTune('MyOrg') ;
            FR_Akt.OKPO1 := if ((GetFirst KatOrg where((coGetTune('MyOrg') == Katorg.nRec)) ) = tsOk, KatOrg.OKPO, '');

            pOrg  := pOrgNRec;
            FR_Akt.OKPO2 := if ((GetFirst KatOrg where((pOrgNRec == Katorg.nRec)) ) = tsOk, KatOrg.OKPO, '');

            FR_Akt.Nomer  := KatSopr.NSopr;                               // vidreport > 6
            FR_Akt.Nomer1 := PrintNumber(KatSopr.Descr, KatSopr.NSopr);   // vidreport <= 6
            FR_Akt.Data1  := DateToStr(KatSopr.dSopr,'DD mon YYYY г. (day)'); // VidReport = 7
            FR_Akt.Data2  := 'от ' + DateToStr(KatSopr.dSopr, 'DD/MM/YYYY');  // VidReport <> 7

            FR_Akt.Otprav := otprav;
            FR_Akt.Poluch := poluch;

            FR_Akt.ispoln :=  ispoln ;
            FR_Akt.zakazch:=  zakazch;
            FR_Akt.Osn1 := if (KatSopr.cStepDoc <> 0
                                        , 'Основание отпуска: № ' + BaseDoc.NoDoc + ' от ' + DateToStr(BaseDoc.dDoc, 'DD/MM/YYYY')
                                        , '');
            FR_Akt.Dover := KatSopr.sDover
                            + if (KatSopr.nDover = '','', '  Доверенность № ' + KatSopr.nDover )  + '  ' +
                            + if (KatSopr.dDover=date(0,0,0),'',DateToStr(KatSopr.dDover,'от DD mon YYYY г. (day)'));
#endif
            FR_Akt.ISumNac := Round(AStNac, Cena_PrR);
            FR_Akt.ISumVal := Round(AStVal, Cena_PrV);
            FR_Akt.ISum    := Round(AStNak, Cena_Pr);
            FR_Akt.ISumBH  := if (TypeSopr = 111, Round(AStNakBN, Cena_Pr), Round(AStNak, Cena_Pr));  //5
            FR_Akt.INDS    := if (KatSopr.cVal = 0, Round(aNDS, Cena_PrR), Round(aNDSv, Cena_PrV));
            FR_Akt.IAkciz  := if (KatSopr.cVal = 0, Round(aSpN, Cena_PrR), Round(aSpNv, Cena_PrV));
            FR_Akt.INalProd:= if (KatSopr.cVal = 0, Round(aNSel, Cena_PrR),Round(aNSelv, Cena_PrV));

            FR_Akt.ISumTNac:= Round(AStNac, Cena_PrR)/1000 ;  // VidReport = 6
            FR_Akt.ISumSt  := aSt     ; // VidReport <> 6  and  VidReport <> 8
            FR_Akt.ISumT   := aSt/1000; // VidReport <> 6  and  VidReport =  8

            FR_Akt.INDSn      := aNDSn ;
            FR_Akt.INDSnT     := aNDSn/1000;
            FR_Akt.IVsegoNDS  := aStNDS ;
            FR_Akt.IVsegoNDST := aStNDS/1000;
            FR_Akt.IKolF      := AKolF;

            FR_Akt.Vsego    := 'Всего ' + if (TypeSopr = 111, 'получено','отпущено') + ' наименований: ' + DoubleToStr(ANam, '4');
            FR_Akt.NaSumNac := String(Round(AStNac, Cena_PrR)) + ' ' + sGetTune('NDE.SimvRub') +
                                        ' ( прописью: ' + DoubleToString(0, Round(AStNac, Cena_PrR)) + ' )';
            FR_Akt.SumNalog := 'в том числе НДС: ' + String( if (KatSopr.cVal = 0, Round(aNDS, Cena_PrR), Round(aNDSv, Cena_PrV)))
                                      + ' ' + Valut + ', акциз: ' + String( if (KatSopr.cVal = 0, Round(aSpN, Cena_PrR), Round(aSpNv, Cena_PrV)))
                             + ' ' + Valut + ', налог с продаж: ' + String( if (KatSopr.cVal = 0, Round(aNSel, Cena_PrR),Round(aNSelv, Cena_PrV)))
                             + ' ' + Valut;
            aNDSn := Round(aNDSn,2);
            aStNDS := Round(aStNDS, 2);

            FR_Akt.NaSumNacTN2 :=  DoubleToString(0, Round(AStNac, Cena_PrR));

            FR_Akt.SumNalogTN2 := doubleToStr(aNDSn,'4') +
                 if(doubleToStr(aNDSn ,'99')<>'', doubleToStr(aNDSn ,',99 '),'') + 'руб.';
            FR_Akt.SumNalogTN2_2000 := doubleToStr(aNDSn,'\f4') +
                if(doubleToStr(aNDSn ,'999')<>'', doubleToStr(aNDSn ,',999 '),'') + 'руб.';

            aNDSn := Round(aNDSn/1000, 3);
           
            FR_Akt.SumNalogTN2_2000T := doubleToStr(aNDSn,'\f4') +
                if(doubleToStr(aNDSn ,'999')<>'', doubleToStr(aNDSn ,',999 '),'') + 'тыс. руб.';


            FR_Akt.VsegoTN2 := DoubleToStr(ANam, '4');

            FR_Akt.NaSumVal  := String(Round(AStVal, Cena_PrV)) + ' ' + KlVal.SimvolV +
                                 ' ( прописью: ' + DoubleToString(SpSopr.cVal, Round(AStVal, Cena_PrV)) + ' )';
            FR_Akt.vKolOtpEd := DoubleToStr(AKolF,'\4P[|-]366 666 666 666.888') +  ' (отпускных единиц)';
            FR_Akt.vKolUchEd := DoubleToStr(AKolU,'\4P[|-]366 666 666 666.888') +  ' (учетных единиц)' ;
            FR_Akt.NaSumNac2 := DoubleToString(0, Round(AStNac, Cena_PrR));
            FR_Akt.NaSumVal2 := DoubleToString(SpSopr.cVal, Round(AStVal, Cena_PrV)) ;
            FR_Akt.NaSumNak  := 'на сумму:  ' + DoubleToString(KatSopr.cVal, Round(AStNak, Cena_Pr));
            FR_Akt.Itogo     := 'Итого по акту: ' +String( Round(AStNakSN, Cena_Pr) )+ ' ' + Valut;
            FR_Akt.Polucheno := if (TypeSopr = 111, 'Получено', 'Отпущено')  + ' по акту: '
                                                                    + DoubleToString(KatSopr.cVal, Round(AStNakSN, Cena_Pr));

            FR_Akt.NaSumNakSn:=  'на сумму: ' + DoubleToString(KatSopr.cVal, Round(AStNakSN, Cena_Pr));

            FR_Akt.VsegoNDS := doubleToStr(aStNDS,'4') +
                   if(doubleToStr(aStNDS ,'99') <> '', doubleToStr(aStNDS ,',99 '),'') + 'руб.';

            FR_Akt.VsegoNDS_2000 := doubleToStr(aStNDS,'\f4') +
                   if(doubleToStr(aStNDS ,'999') <> '', doubleToStr(aStNDS ,',999 '),'') + 'руб.';

            aStNDS := Round(aStNDS/1000, 3);

            FR_Akt.VsegoNDS_2000T := doubleToStr(aStNDS,'\f4') +
                   if(doubleToStr(aStNDS ,'999') <> '', doubleToStr(aStNDS ,',999 '),'') + 'тыс. руб.';


            FR_Akt.Valut := Valut;
            FR_Akt.NacEd := sGetTune('NDE.SimvRub');
            FR_Akt.ValEd := KlVal.SimvolV;

            Insert current Fr_Akt;
            NextVisual;
          }
#endif
          //------------------------------------------------------------------------------
        }
    }

  PopPos(#KatSopr);

  if (toc = 0)
    FPrAkts.PutEvent(feBreak);

  StopVisual('', 0);

#ifdef _AKTUSL_FR
  if (toc = 1)
  {
    RunFReport(AktDTS, '' , false);
    resetBounds(#FR_Akt);
    Delete All FR_Akt;
    setBounds(#FR_Akt);
    resetBounds(#FR_AktSpecif);
    Delete All FR_AktSpecif;
    setBounds(#FR_AktSpecif);
  }
#endif

  VidReport := 0;
  //------------------------------------------------------------------------------

  if (toc = 0)
    if (FPrAkts.Error)
      FPrAkts.AbortForm
    else
      FPrAkts.ShowFile('Акт');
}

//******************************************************************************
