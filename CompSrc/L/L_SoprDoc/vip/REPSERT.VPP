/*
 ╔═══════════════════════════════════════════════════════════════════════════╗
 ║                     (c) 1994,99 корпорация ГАЛАКТИКА                      ║
 ║ Проект        : ГАЛАКТИКА                                                 ║
 ║ Система       : Оперативный контур                                        ║
 ║ Версия        : 5.70                                                      ║
 ║ Назначение    : Печать удостоверения качества                             ║
 ║ Ответственный : Кратович Сергей Леонидович (SK)                           ║
 ╚═══════════════════════════════════════════════════════════════════════════╝
*/
Procedure GetMassa(var _Massa: double; var _Netto: double );
var ret : Longint;
{
  _Massa := 0;
  _Netto := 0;
  for( ret:=GetFirst Vagon ; ret=tsOk; ret:=GetNext Vagon )
  {
   _Massa := _Massa + Vagon.Massa ;
   _Netto := _Netto + Vagon.Netto ;
  }
} // procedure GetMassa

Procedure PrintMarkedSertificates;
var i : LongInt;
{
  cMarker := InitMarker( sMarkerName, 8, 10, 10 );
  cCount := GetMarkerCount( cMarker );
  fPrnSert.SetGroup('One_UK');
  fPrnSert.SkipFormat(2);
  fPrnSert.PutEventById( feDoLoop, fcGroup_UK );
  fPrnSert.SkipFormat(1);

  For(i:=0; i<cCount; i:=i+1)
  {
    GetMarker( cMarker, i, pNRec);
    if ( GetFirst RepSertific where (( pNRec == RepSertific.NRec )) != tsOK )
    {
      DoneMarker( cMarker, sMarkerName );
      fPrnSert.AbortForm;
      Exit;
    }
    fPrnSert.PutEventById( feDoLoop, fcOne_UK );
    //УК
    fPrnSert.Write( RepSertific.NRec );
    fPrnSert.Write( RepSertific.Descr );
    fPrnSert.Write( RepSertific.DesGr );
    fPrnSert.Write( RepSertific.NDoc );
    fPrnSert.Write( RepSertific.dDoc,'DD/MM/YYYY' );
    fPrnSert.Write( RepSertific.dEnd,'DD/MM/YYYY' );
    fPrnSert.Write( RepSertific.Name );
    fPrnSert.Write( KatNotes.Name );
    fPrnSert.Write( KatMC.Name );
    fPrnSert.Write( Persons.FIO );
    fPrnSert.Write( TasteOrg.Name );
    fPrnSert.Write( TastePodr.Name );
    fPrnSert.Write( RepSertific.GOST );
    fPrnSert.Write( RepSertific.NReg );
    fPrnSert.Write( Keepper.Name );
    fPrnSert.Write( RepSertific.TU );
    fPrnSert.Write( MarAvt.NMarAvt );
    fPrnSert.Write( MarPunktP.Name );


    //Внешние атрибуты
    if ( GetFirst AttrVal  = tsOK )
    {
      fPrnSert.PutEventById( feTrue, fcPrint_UK_Attr);
      Do
      {
         if ( GetFirst AttrNam  = tsOK )
         {
           fPrnSert.PutEventById( feDoLoop, fcUK_Attr );
           fPrnSert.Write( AttrNam.NAME );
           fPrnSert.Write( if (  AttrNam.AttrType = 1, StringNL0(  AttrVal.vDouble,0,3),
                             if (  AttrNam.AttrType = 2, datetostr(  AttrVal.vDate,'DD/MM/YYYY'),
                               if (  AttrNam.AttrType = 3, timetostr(  AttrVal.vTime,'HH:MM'),
                                   AttrVal.vString))));
         }
      }
      while ( GetNext AttrVal = tsOK );
    }
    else
      fPrnSert.PutEventById( feFalse, fcPrint_UK_Attr);

    //Показатели качества
    if ( GetFirst ValPokaz = tsOK )
    {
      fPrnSert.PutEventById( feTrue, fcPrint_UK_Pokaz );
      Do
      {
         if ( GetFirst KatPokaz  = tsOK )
         {
           fPrnSert.PutEventById( feDoLoop, fcUK_Pokaz );
           fPrnSert.Write( KatPokaz.Code );
           fPrnSert.Write( KatPokaz.Name );

           if (ValPokaz.cKatKau = comp(0))
             fPrnSert.Write( ValPokaz.Value );
           else
             fPrnSert.Write(if (GetAnyKau(cgAkSimple, ValPokaz.KodGrKAU, ValPokaz.cKAU), GivenAnName(cgAnName), ''));
         }
      }
      while ( GetNext ValPokaz = tsOK );
    }
    else
      fPrnSert.PutEventById( feFalse, fcPrint_UK_Pokaz );

    //Вагоны
    if ( GetFirst RepVagon = tsOk )
    {
      fPrnSert.PutEventById( feTrue, fcPrint_UK_Vagon);
      Do
      {
        fPrnSert.PutEventById( feDoLoop, fcUK_Vagon );
        fPrnSert.Write( RepVagon.NRec );
        fPrnSert.Write( RepVagon.Num );
        fPrnSert.Write( SpStep.nKvit );
        fPrnSert.Write( RepVagon.dReg );
        fPrnSert.Write( timetostr(RepVagon.tReg, 'HH:MM' ));
        fPrnSert.Write( RepVagon.Massa );
        fPrnSert.Write( RepVagon.Netto );
        fPrnSert.Write( RepVagon.Massa + RepVagon.Netto );
        fPrnSert.Write( KatOrg.Name );
        fPrnSert.Write( MarAvt.NMarAvt );
        fPrnSert.Write( MarPunktP.Name );
        fPrnSert.Write( MarPunktR.Name );
      }
      while ( GetNext RepVagon = tsOk );
    }
    else
     fPrnSert.PutEventById( feFalse, fcPrint_UK_Vagon);
  }
  DoneMarker( cMarker, sMarkerName );
  fPrnSert.PutEvent(feBreak);

  if ( Not fPrnSert.Error )
   fPrnSert.ShowFile('Удостоверение качества');
  else
   fPrnSert.AbortForm;
}         // procedure PrintSertificate

//=========================================================================
// Заполнение временной таблицы для группировок
//=========================================================================
Function FillTmpDesk: boolean;
{
 var ret : word;
 var i   : LongInt;

 FillTmpDesk  := false;
 TmpDeskTable := TblInitNew(100,10);
 if ( TmpDeskTable = 0 )   Exit;

 NRec     := TblNewField( TmpDeskTable, ftLongInt);
 TblEndKey( TmpDeskTable );
 wTable   := TblNewField( TmpDeskTable, ftWord   );
 ResWord0 := TblNewField( TmpDeskTable, ftWord   );
 ResName1 := TblNewField( TmpDeskTable, ftString );
 ResWord1 := TblNewField( TmpDeskTable, ftWord   );
 ResWord2 := TblNewField( TmpDeskTable, ftWord   );
 ResWord3 := TblNewField( TmpDeskTable, ftWord   );
 Sort     := TblNewField( TmpDeskTable, ftWord   );
 ResComp1 := TblNewField( TmpDeskTable, ftComp   );
 ExCode   := TblNewField( TmpDeskTable, ftWord   );

 i:=1;
 for( ret:=GetFirst RepGrOne ; ret=tsOk; ret:=GetNext RepGrOne )
 {
   TblClearBuffer( TmpDeskTable );
   TblSFLongInt( TmpDeskTable, NRec    , i                  );  //NRec=номеру уровня группировки
   TblSFLongInt( TmpDeskTable, wTable  , RepGroup.wTable    );  //coTable
   TblSFLongInt( TmpDeskTable, ResWord0, RepGroup.Nomer     );  //номер группировки в списке
   TblSFString ( TmpDeskTable, ResName1, RepGrOne.ResName[1]);  //префикс уровня
   TblSFLongInt( TmpDeskTable, ResWord1, RepGrOne.ResWord[1]);  //Раскрывать или нет иерархию
   TblSFLongInt( TmpDeskTable, ResWord2, RepGrOne.ResWord[2]);  //Количество раскрываемых вверх уровней иерархии
   TblSFLongInt( TmpDeskTable, ResWord3, RepGrOne.ResWord[3]);  //Печатать итоги по уровню
   TblSFLongInt( TmpDeskTable, Sort    , RepGrSrt.Nomer     );  //Сортировка группировки
   TblSFLongInt( TmpDeskTable, ResComp1, RepGrOne.ResComp[2]);  //NRec внешнего классификатора
   if ( RepGrOne.ResComp[2] = 0)
        TblSFLongInt( TmpDeskTable, ExCode, 0);                 //код внешней классификации
   else
      if ( GetFirst ExClassSeg where (( RepGrOne.ResComp[2] == ExClassSeg.NRec)) = tsOk)
          TblSFLongInt( TmpDeskTable, ExCode, ExClassSeg.ClassCode);
      else
          TblSFLongInt( TmpDeskTable, ExCode, 0);

   if ( TblInsertCurrent( TmpDeskTable ) != tsOk )
   {
     TblDeleteTable(TmpDeskTable);
     Exit;
   }
   i:=i+1;
   if ( i>10 )  //только 10 уровней группировки!
   {
     FillTmpDesk := true;
     exit;
   }
 }
 FillTmpDesk := true;
}; // function FillTmpDesk

//=========================================================================
// Фильтр по периоду
//=========================================================================
procedure Filter_Period;
{
    if (( UserDeskRep.ResDate[1] != date(0,0,0) ) and ( UserDeskRep.ResDate[2] != date(0,0,0) ))
     {    Date1 := UserDeskRep.ResDate[1];
          Date2 := UserDeskRep.ResDate[2];
          PushBounds(tbbyDate);
     }
}

//=========================================================================
//Фильтр по контрагенту
//=========================================================================
function KontrFilter: boolean;
{
   KontrFilter := true;
   if (( UserDeskRep.ResWord[10] and 1 ) != 1 ) exit;
   if ( UserDeskRep.ResComp[1] != Comp(0) )        //единичный фильтр
    {
      if ( Sertific.cTasteOrg = UserDeskRep.ResComp[1] ) KontrFilter := true;
      else KontrFilter := false;
      exit;
    }
   else  //множественный фильтр
   {
      if ( GetFirst PickRep Where (( UserName                == PickRep.OwnName      and
                                     UserDeskRep.NRec        == PickRep.cUserDeskRep and
                                     UserDeskRep.ResWord[21] == PickRep.wList        and
                                     Sertific.cTasteOrg      == PickRep.cRec )) = tsOk)
            {
               KontrFilter:=true;
            }
      else
            {
               KontrFilter:=false;
            }
   }
}
//=========================================================================
// Фильтр по МЦ/усл
//=========================================================================
function MCFilter: boolean;
{
   MCFilter:=true;
   if ((UserDeskRep.ResWord[10] and 2)!=2) exit;
   if (UserDeskRep.ResComp[2] != Comp(0))   //единичный фильтр
    {
      if (Sertific.cMC=UserDeskRep.ResComp[2]) MCFilter:=true;
      else MCFilter:=false;
      exit;
    }
   else  //множественный фильтр
   {
      if (GetFirst PickRep Where (( UserName                == PickRep.OwnName      and
                                    UserDeskRep.NRec        == PickRep.cUserDeskRep and
                                    UserDeskRep.ResWord[22] == PickRep.wList        and
                                    Sertific.cMC            == PickRep.cRec )) = tsOk)
            {
               MCFilter:=true;
            }
      else
            {
               MCFilter:=false;
            }
   }
}
//=========================================================================
//Заполнение TmpKatalog
//=========================================================================
Function FillTmpKatalog ( _isLeaf : word ;
                         _nRec    : comp ;
                         _cGroup  : comp ;
                         _Date    : date ) : comp ;
var _Comp     : comp;
var _Name     : string;
var  ret      : word;
var _inPeriod : boolean;
{
  if ( UserDeskRep.ResWord[11] = 3 )    //детализация
  {
    _inPeriod := false;
    for(ret:=GetFirst TmpKatalog ; ret=tsOk; ret:=GetNext TmpKatalog)
    {
      if (( _Date >= TmpKatalog.Dat1 ) and ( _Date < TmpKatalog.Dat2 ))
        {
          //попали в интервал
          FillTmpKatalog := TmpKatalog.nRec;
          _inPeriod := true;
          break;
        }
    }
    if ( _inPeriod = false )
     FillTmpKatalog:=0;
  }
  else
  {
     case UserDeskRep.ResWord[11] of
     // год
     0:{
         _Comp := Year(_Date)*10000;
         _Name := DateToStr(_Date,'YYYY г.');
     }
     // месяц
     1:{
         _Comp := Year(_Date)*10000+Month(_Date)*100;
         _Name := DateToStr(_Date,'Month YYYY');
     }
     // день
     2:{
         _Comp := Year(_Date)*10000+Month(_Date)*100+Day(_Date);
         _Name := DateToStr(_Date,'DD/MM/YYYY');
     }
     end; // case
     ClearBuffer(#TmpKatalog);
     TmpKatalog.Code   := 1 ;
     TmpKatalog.nRec   := _Comp;
     TmpKatalog.cRec   := _Comp;
     TmpKatalog.cGroup := _cGroup ;
     TmpKatalog.Name   := _Name;
     TmpKatalog.Sum1   := Double(_Comp) ;
     TmpKatalog.isLeaf := _isLeaf ;
     if (FindEqual(#TmpKatalog,4))
       FillTmpKatalog := TmpKatalog.nRec;
     else
       FillTmpKatalog  := if (insert current TmpKatalog = tsOk,
                                TmpKatalog.nRec, 0 );
  }
} // Function FillTmpKatalog

//=========================================================================
//Заполнение TmpKatalog значениями с периодом детализации
//=========================================================================
Procedure FillPeriod( _bdate : date  ;   //начало интервала
                      _edate : date  ;   //конец интервала
                      _kol   : word  );  //период
var nTable              : word;
var _Comp               : comp;
var _NextDate, _CurDate : date;
var _isDate             : boolean;
{
  if ( UserDeskRep.ResWord[11] != 3 ) exit;  //не детализация
  _isDate := false;
  if ( TblGetFirst(TmpDeskTable) )
    Do
       {
         nTable := word( TblGFLongInt(TmpDeskTable,ResWord0) );
         if ( nTable = 1 )   //группировка по дате
          {  _isDate := true;
             break;
          }
       }
    While ( TblGetNext(TmpDeskTable) );

  if ( _IsDate = false ) exit;
  StartNewVisual( vtNumericVisual, vfTimer,''#3'Расчет периода детализации', 1 );
  _CurDate  := _bdate;
  _NextDate := Add_Day(_CurDate,_kol);
  _edate    := Add_Day(_edate,1);
  while ( _edate > _CurDate )
  {
   _Comp:= Year(_CurDate)*10000+Month(_CurDate)*100+Day(_CurDate);

   ClearBuffer(#TmpKatalog);
   TmpKatalog.Code   := 1 ;
   TmpKatalog.nRec   := _Comp;
   TmpKatalog.cRec   := _Comp;
   TmpKatalog.cGroup := 0 ;
   TmpKatalog.Sum1   := Double(_Comp) ;
   TmpKatalog.isLeaf := 1 ;
   TmpKatalog.dat1   := _CurDate;
   TmpKatalog.dat2   := _NextDate;
   TmpKatalog.Name   := DateToStr(_CurDate,'DD/MM/YYYY')+' - '+DateToStr(_NextDate,'DD/MM/YYYY');

   if ( insert current TmpKatalog != tsOk)
     { message(''#3'Ошибка заполнения таблицы TmpKatalog', Error);
       StopVisual('',0);
       exit;
     }
   //увеличиваем дату на период
   _CurDate:=_NextDate;
   _NextDate:= if ( Add_Day(_NextDate,_kol) > _edate,_edate, Add_Day(_NextDate,_kol));
   iNextVisual(''#3'Расчет периода детализации'#13#3+TmpKatalog.Name);
  }
 StopVisual('',0);
} // Procedure FillPeriod

//=========================================================================
// Определение внешней классификации
//=========================================================================
Function GetExClass( _nRec : comp; _nTable : word; _ClassCode : word ): comp;
{
  GetExClass := 0;
  if ( _ClassCode = 0 )    //нет внешней классификации
  {
    GetExClass := _nRec;   //возвращаем NRec объекта
    exit;
  }
  if ( GetFirst ExClassVal where (( _ClassCode == ClassCode and
                                    _nTable    == wTable    and
                                    _nRec      == cRec )) = tsOK )

  {
      if ( GetFirst ExClassSeg where (( ExClassVal.cClassSeg == ExClassSeg.NRec)) = tsOk)
      {
              GetExClass := ExClassSeg.NRec;     //возвращаем код по внешней классификации
      }
  }
}; // function GetExClass


Function InsertTobot : boolean;
var
i                   : longint;
nTable,coTable,code : word;
GroupRec            : comp;
VagonMassa,VagonNetto : double;
{
   ClearBuffer(#Tobot);
   set Tobot.IsLeaf    := 1;
   set Tobot.mspDoc    := Sertific.NRec;
   //наименование
   set Tobot.NameGroup := 'N '+Sertific.NDoc+' от '+DateToStr(Sertific.dDoc,'DD/MM/YYYY');
   //группировка
   if ( TblGetFirst(TmpDeskTable) )
     Do
      {
        i      := TblGFLongInt( TmpDeskTable, nRec   );          //уровень группировки
        nTable := word(TblGFLongInt( TmpDeskTable, ResWord0 ));  //номер группировки в списке
        coTable:= word(TblGFLongInt( TmpDeskTable, wTable   ));  //coTable
        code   := word(TblGFLongInt( TmpDeskTable, ExCode   ));  //код внешней классификации
        case nTable of
         1:  GroupRec := FillTmpKatalog(1,Sertific.NRec,0,Sertific.dDoc); //дата
         2:  GroupRec := Sertific.cTasteOrg;                              //контрагент
         3:  GroupRec := Sertific.cMC;                                    //мц
         4:  GroupRec := Sertific.cTastePodr;                             //подразделение
        end; // case
        set Tobot.Group[i]  := GetExClass( GroupRec,coTable,code );
      }
    While ( TblGetNext(TmpDeskTable) );

   GetMassa(VagonMassa,VagonNetto);
   set Tobot.Sum[1]:=VagonMassa;
   set Tobot.Sum[2]:=VagonNetto;
   set Tobot.SortName  := if ( UserDeskRep.ResWord[30]=0 ,
                               DateToStr(Sertific.dDoc,'YYYYMMDD')+Sertific.NDoc,
                               Sertific.NDoc+DateToStr(Sertific.dDoc,'YYYYMMDD'));
   if ( Insert Current Tobot <> tsOk )
    {
      InsertTobot := false;
      Exit;
    }
  InsertTobot := true;
}; // function InsertTobot

//=========================================================================
// Выгрузка в Tobot
//=========================================================================
Function Fill_Tobot   : Boolean;
{
 Fill_Tobot := True;

 if ( Delete Safe Tobot <> tsOk )
  {
   Fill_Tobot := False
   Message(''#3'Ошибка удаления в таблице Tobot', Error);
   Exit;
  }

 ResetBounds(#TempDescr);
 While ( GetFirst TempDescr Where (( CurCode == TempDescr.Code )) = tsOk ) Do
  {
   if ( Delete Safe NoVisual TempIer <> tsOk )
    {
     Fill_Tobot := False
     Message(''#3'Ошибка удаления в таблице TempIer', Error);
     Exit;
    }
   if ( Delete Current TempDescr <> tsOk )
    {
     Fill_Tobot := False;
     Message(''#3'Ошибка удаления в таблице TempDescr', Error);
     Exit;
    }
  }
 SetBounds(#TempDescr);

 //удаляем TmpKatalog
 if ( Delete All TmpKatalog <> tsOk )
  {
   Fill_Tobot := False;
   Message(''#3'Ошибка удаления в таблице TmpKatalog', Error);
   Exit;
  }


 //заполняем период
 FillPeriod(UserDeskRep.ResDate[1],UserDeskRep.ResDate[2],UserDeskRep.ResWord[12]);

 //фильтр по дате
 Filter_Period;
 if ( GetFirst Sertific != tsOK )
 {
   Fill_Tobot := False
   Message('Ведомость пуста!', Warning);
   Exit;
 }
 StartNewVisual(vtNumericVisual, vfTimer,''#3'Отбор документов для отчета', 1);
 Do
 {
   if ( not KontrFilter  ) continue;   //фильтр по контрагенту
   if ( not MCFilter ) continue;    //фильтр по МЦ
     if ( not InsertTobot )
      {
       Fill_Tobot := False
       Message(''#3'Ошибка добавления в таблицу Tobot.', Error);
       StopVisual('',0);
       Exit;
      }
     NextVisual;

 }
 While ( GetNext Sertific = tsOk );

 StopVisual('',0);
 if ( GetFirst Tobot != tsOK )
   {
       Fill_Tobot := False
       Message('Ведомость пуста!', Warning);
   }
}

//=========================================================================
// Открыть все узлы
//=========================================================================
Procedure TreeOpenAllNodes(trHandle : LongInt);
{
   TreeGetFirstEx(trHandle);
   Do
   {
     if ( TreeIsTerminal(trHandle) = False )
     TreeOpenNode(trHandle);
   }
   While ( TreeGetNextEx(trHandle) );
   TreeGetFirstEx(trHandle);
} // procedure  TreeOpenAllNodes

//=========================================================================
// Инициализация иерархии
//=========================================================================
Function MakeTreeIer : Boolean;
Var nTable,nSort,nKol,openIer   : Word;
Var i,nParam                    : LongInt;
var sPrefix                     : string;
{
   MakeTreeIer:=True;
   cRep := InitTreeBuilder(#Tobot);
   SetTempIndex(cRep, byte(3));  //строим иерархию только по своим значениям!
   if ( cRep != 0 )
     {
      if ( TblGetFirst(TmpDeskTable) )
       Do
       {
         nParam:=0;
         i := TblGFLongInt( TmpDeskTable, nRec );
         if ( TblGFLongInt( TmpDeskTable, ExCode) = 0  )
         {
           nTable  := TblGFLongInt( TmpDeskTable, wTable  );
           sPrefix := TblGFString ( TmpDeskTable, ResName1);
           openIer := word(TblGFLongInt( TmpDeskTable, ResWord1 ));
           nKol    := word(TblGFLongInt( TmpDeskTable, ResWord2 ));
           nSort   := word(TblGFLongInt( TmpDeskTable, Sort     ));
           if ( openIer = 0 ) nParam := nParam or tsNoExpand;
           //if ( sPrefix = '') nParam := nParam or tsNoPrefix;
         }
         else
         { //по внешней классификации
           nTable  := coExClassSeg;
           sPrefix := '';
           nKol    := 0;
           nSort   := 0;
         }
         TuneLevel( cRep, byte(i), word(nTable), nParam, sPrefix, 1, nSort, nKol);
       }
       While ( TblGetNext(TmpDeskTable) );

      SetReportStyles( cRep, rsNodeReport, 'Итого по реестру' );
      BuildTunedTree( cRep, CurCode );
      TreeCloseAllOpenedNode( trTmpTree );
      //TreeOpenAllNodes(trTmpTree);
     }
   else
     MakeTreeIer:=False;
}

Function IsPrintTotal ( _level : integer): word;
{
 IsPrintTotal := 0;
 if ( TblGetIndex(TmpDeskTable,_level-1) )
   IsPrintTotal := TblGFLongInt( TmpDeskTable, ResWord3 );
}; // function IsPrintTotal

//=========================================================================
// Печать группировки
//=========================================================================
Procedure PrintHead( _nRec : comp; _level : integer );
Var StrHierar   : String;
{
  StrHierar := '.                                    ';
  if ( GetFirst TempDescr2  where (( _nRec == TempDescr2.nRec)) = tsOk )
  {
    fPrnSert.PutEventById( feDoLoop, fcGroup_UK );
    if ( TempDescr2.Level > 0 )
    {
        fPrnSert.Write(Substr(StrHierar,1, _level)+TempDescr2.Name);
    }
    else
      fPrnSert.SkipFormat(1);
  }
}

//=========================================================================
// Процедура печати
//=========================================================================
Procedure PrintReestr ( nPos : Byte );
Var StrHierar   : String;
var cTmpRec     : Array [1..100] of Comp;
var FirstLevel : integer;
var AllPos : byte;
{
 StartNewVisual( vtNumericVisual, vfTimer, ''#3'Подготовка отчета к печати', 1);
 StrHierar := '.                                    ';
 AllPos := nPos;
 TreePushPos(trTmpTree);
 if ( nPos=1 )  //Сtrl+P - печать всего отчета
  {
    TreeGetFirstEx(trTmpTree);
    FirstLevel := TreeLevel(trTmpTree);
  }
 else           //  печать c текущего уровня
  {
    if ( TreeIsTerminal(trTmpTree) )
      {
        FirstLevel := TreeLevel(trTmpTree)-1;
        cTmpRec[FirstLevel+1] := TempDescr.cGroup;
      }
    else
      {
        FirstLevel := TreeLevel(trTmpTree);
        cTmpRec[FirstLevel+1] := TempDescr.NRec;
      }
  }
 fPrnSert.SetGroup('Reestr_UK');

 if ( Not fPrnSert.Error )
  {
   //шапка
   fPrnSert.Write(UserDeskRep.ResDate[1],'DD/MM/YYYY');
   fPrnSert.Write(UserDeskRep.ResDate[2],'DD/MM/YYYY');
   Do
    {
     if ( TreeIsTerminal(trTmpTree) = False )    //узел
      {  //группировка
         fPrnSert.PutEventById( feDoLoop, fcGroup_UK );
         //запоминаем NRec группировки для итого
         cTmpRec[TreeLevel(trTmpTree)+1]:= TempDescr.NRec;
         if ( TreeLevel(trTmpTree)>0 )
          {
            fPrnSert.Write(Substr(StrHierar,1,TreeLevel(trTmpTree))+TempDescr.Name);
          }
         else
          {
            fPrnSert.SkipFormat(1);
          }

        if ( nPos=2 ) nPos:=1;
      }
     else     //лист
      {
       if ( nPos=2 )
        {
          PrintHead(cTmpRec[TreeLevel(trTmpTree)],TreeLevel(trTmpTree)-1);
          nPos:=1;
        }
         NextVisual;
    fPrnSert.PutEventById( feDoLoop, fcOne_UK );
    //УК
    fPrnSert.Write( RepSertific.NRec );
    fPrnSert.Write( RepSertific.Descr );
    fPrnSert.Write( RepSertific.DesGr );
    fPrnSert.Write( RepSertific.NDoc );
    fPrnSert.Write( RepSertific.dDoc,'DD/MM/YYYY' );
    fPrnSert.Write( RepSertific.dEnd,'DD/MM/YYYY' );
    fPrnSert.Write( RepSertific.Name );
    fPrnSert.Write( KatNotes.Name );
    fPrnSert.Write( KatMC.Name );
    fPrnSert.Write( Persons.FIO );
    fPrnSert.Write( TasteOrg.Name );
    fPrnSert.Write( TastePodr.Name );
    fPrnSert.Write( RepSertific.GOST );
    fPrnSert.Write( RepSertific.NReg );
    fPrnSert.Write( Keepper.Name );
    fPrnSert.Write( RepSertific.TU );
    fPrnSert.Write( MarAvt.NMarAvt );
    fPrnSert.Write( MarPunktP.Name );
        //Внешние атрибуты
    if ((( UserDeskRep.ResWord[13] and 1) >0 ) and ( GetFirst AttrVal  = tsOK ))
    {
      fPrnSert.PutEventById( feTrue, fcPrint_UK_Attr);
      Do
      {
         if ( GetFirst AttrNam  = tsOK )
         {
           fPrnSert.PutEventById( feDoLoop, fcUK_Attr );
           fPrnSert.Write(  AttrNam.NAME);
           fPrnSert.Write( if (  AttrNam.AttrType = 1, StringNL0(  AttrVal.vDouble,0,3),
                             if (  AttrNam.AttrType = 2, datetostr(  AttrVal.vDate,'DD/MM/YYYY'),
                               if (  AttrNam.AttrType = 3, timetostr(  AttrVal.vTime,'HH:MM'),
                                   AttrVal.vString))));
         }
      }
      while ( GetNext AttrVal = tsOK );
    }
    else
      fPrnSert.PutEventById( feFalse, fcPrint_UK_Attr);

    //Показатели качества
    if (( (UserDeskRep.ResWord[13] and 2) >0 ) and ( GetFirst ValPokaz = tsOK ))
    {
      fPrnSert.PutEventById( feTrue, fcPrint_UK_Pokaz);
      Do
      {
         if ( GetFirst KatPokaz  = tsOK )
         {
           fPrnSert.PutEventById( feDoLoop, fcUK_Pokaz );
           fPrnSert.Write(  KatPokaz.Code);
           fPrnSert.Write(  KatPokaz.Name);
           fPrnSert.Write(  ValPokaz.Value);
         }
      }
      while ( GetNext ValPokaz = tsOK );
    }
    else
      fPrnSert.PutEventById( feFalse, fcPrint_UK_Pokaz);

    //Вагоны
    if (( (UserDeskRep.ResWord[13] and 4) >0) and ( GetFirst RepVagon = tsOk ))
    {
      fPrnSert.PutEventById( feTrue, fcPrint_UK_Vagon);
      Do
      {
        fPrnSert.PutEventById( feDoLoop, fcUK_Vagon );
        fPrnSert.Write( RepVagon.NRec );
        fPrnSert.Write( RepVagon.Num );
        fPrnSert.Write( SpStep.nKvit );
        fPrnSert.Write( RepVagon.dReg );
        fPrnSert.Write( timetostr(RepVagon.tReg, 'HH:MM' ));
        fPrnSert.Write( RepVagon.Massa );
        fPrnSert.Write( RepVagon.Netto );
        fPrnSert.Write( RepVagon.Massa + RepVagon.Netto );
        fPrnSert.Write( KatOrg.Name );
        fPrnSert.Write( MarAvt.NMarAvt );
        fPrnSert.Write( MarPunktP.Name );
        fPrnSert.Write( MarPunktR.Name );
      }
      while ( GetNext RepVagon = tsOk );
    }
    else
      fPrnSert.PutEventById( feFalse, fcPrint_UK_Vagon);

   }
   if ( not TreeGetNextEx(trTmpTree) ) break;
  }
  While ( TreeLevel(trTmpTree) > FirstLevel );
  fPrnSert.PutEvent(feBreak);
  StopVisual('', 0);
  }
  else
  {
   StopVisual('', 0);
   fPrnSert.AbortForm;
   Message('В форме возникли ошибки.'#13+'Просмотр невозможен');
  }

  if ( Not fPrnSert.Error )
    fPrnSert.ShowFile( 'Реестр удостоверений качества' );
  else
   {
    fPrnSert.AbortForm;
    Message('В форме возникли ошибки.'#13+'Просмотр невозможен');
   }
  TreePopPos(trTmpTree);
  RescanPanel(#TempDescr);
}

procedure Header;
{
  pXL.ClearTblBuffer;
  pXL.SetTblStringFldValue('NRec','Номер');
  pXL.SetTblStringFldValue('dDoc', 'Дата оформления');
  pXL.SetTblStringFldValue('dEnd', 'Дата окончания');
  pXL.SetTblStringFldValue('NDoc', 'Статус');
  pXL.SetTblStringFldValue('Name', 'Наименова-ние');
  pXL.SetTblStringFldValue('KatMC.Name', 'Матценность');
  pXL.SetTblStringFldValue('GOST', 'ГОСТ');
  pXL.SetTblStringFldValue('TU', 'ТУ');
  pXL.SetTblStringFldValue('NReg', 'Рег. номер');
  pXL.SetTblStringFldValue('Keepper.Name', 'Держатель сертификата');
  pXL.SetTblStringFldValue('TasteOrg.Name', 'Организация пров. Пробы');
  pXL.SetTblStringFldValue('TastePodr.Name', 'Подразделение пров. Пробы');
  pXL.SetTblStringFldValue('Persons.FIO', 'Мастер ОТК');
  pXL.InsTblRow;
}

procedure DrawData;
{
  pXL.ClearTblBuffer;
  pXL.SetTblStringFldValue('NRec', string(RepSertific.NDoc));
  pXL.SetTblStringFldValue('Descr','');
  pXL.SetTblStringFldValue('DesGr', RepSertific.DesGr);
  pXL.SetTblStringFldValue('NDoc', KatNotes.Name);
  pXL.SetTblStringFldValue('dDoc', DateToStr(RepSertific.dDoc,'DD/MM/YYYY'));
  pXL.SetTblStringFldValue('dEnd', DateToStr(RepSertific.dEnd,'DD/MM/YYYY'));
  pXL.SetTblStringFldValue('Name', RepSertific.Name);
  pXL.SetTblStringFldValue('KatNotes.Name ', KatNotes.Name);
  pXL.SetTblStringFldValue('KatMC.Name', KatMC.Name);
  pXL.SetTblStringFldValue('Persons.FIO', Persons.FIO);
  pXL.SetTblStringFldValue('TasteOrg.Name', TasteOrg.Name);
  pXL.SetTblStringFldValue('TastePodr.Name', TastePodr.Name);
  pXL.SetTblStringFldValue('GOST', RepSertific.GOST);
  pXL.SetTblStringFldValue('NReg', RepSertific.NReg);
  pXL.SetTblStringFldValue('Keepper.Name', Keepper.Name);
  pXL.SetTblStringFldValue('TU', RepSertific.TU);
  pXL.SetTblStringFldValue('MarPunktP.Name', MarPunktP.Name);
  pXL.SetTblStringFldValue('KatPokaz.Code', KatPokaz.Code);
  pXL.SetTblStringFldValue('KatPokaz.Name', KatPokaz.Name);
  pXL.SetTblStringFldValue('ValPokaz.Value', string(ValPokaz.Value));
  if (((( UserDeskRep.ResWord[13] and 1) <=0 ) and ( GetFirst AttrVal  = tsOK ))
     or (( (UserDeskRep.ResWord[13] and 2) <=0 ) and ( GetFirst ValPokaz = tsOK ))
        or (( (UserDeskRep.ResWord[13] and 4) <=0) and ( GetFirst RepVagon = tsOk )))
    pXL.SetTblStringFldValue('Descr', '     ');//  конец строки
  pXL.InsTblRow;
  pXL.ClearTblBuffer;

//Если еще хоть один параметр включать в отчет тогда перерисовать шляпу
}

Procedure PrintReestrExcel ( nPos : Byte );
Var StrHierar  : String;

var ShowHead,
    drawClear  : boolean; //Если true то тогда рисовать шляпу если false нет.

var n,
    FirstLevel : integer;

var Vagitog    : Array[1..2] of Double;
var cTmpRec    : Array [1..100] of Comp;
var AllPos     : byte;
{
  n:=0;

#ifdef Gal8_1
  ID := 'L_SoprDoc\SeeReester';
#else
  ID := 'oper\SeeReester';
#end

  if ( not ReadMyDsk(sXLTFileName,ID,true) )
#ifdef Atl51
    Set sXLTFileName := TranslatePath('%ClientStartPath%') + 'XLS\' + ID + '.xlt';
#else
    Set sXLTFileName := StartPathName + 'XLS\' + ID + '.xlt';
#endif

  if ( not pxlrepsetup.checkParam(0, ID, sXLTFileName) )
    exit;

  StartNewVisual( vtNumericVisual, vfTimer, ''#3'Подготовка отчета к печати', 1);
  //Set sXLSFileName := pXL.CreateXlt(sXLTFileName, True); //Создание шаблона
  Set sXLSFileName := pXL.CreateReport(sXLTFileName, True);//Создание книги Excel по шаблону

  pXL.CreateVar(sXLSFileName);
  pXL.SetStringVar('CFH', CommonFormHeader);
  pXL.SetStringVar('Period','за период с '+ DateToStr(UserDeskRep.ResDate[1],'DD/MM/YYYY') +
                                  ' по '+ DateToStr(UserDeskRep.ResDate[2],'DD/MM/YYYY'));
  pXL.PublishVar;  // Excel
  pXL.CreateTbls(sXLSFileName);
  pXL.CreateTbl('Table');
//УК
  pXL.CreateTblFld('ResDate[1]');
  pXL.CreateTblFld('ResDate[2]');
  pXL.CreateTblFld('NRec');
  pXL.CreateTblFld('Descr');
  pXL.CreateTblFld('DesGr');
  pXL.CreateTblFld('NDoc');
  pXL.CreateTblFld('dDoc');
  pXL.CreateTblFld('dEnd');
  pXL.CreateTblFld('Name');
  pXL.CreateTblFld('KatNotes.Name');
  pXL.CreateTblFld('KatMC.Name');
  pXL.CreateTblFld('Persons.FIO');
  pXL.CreateTblFld('TasteOrg.Name');
  pXL.CreateTblFld('TastePodr.Name');
  pXL.CreateTblFld('GOST');
  pXL.CreateTblFld('NReg');
  pXL.CreateTblFld('Keepper.Name');
  pXL.CreateTblFld('TU');
  pXL.CreateTblFld('MarAvt.NMarAvt');
  pXL.CreateTblFld('MarPunktP.Name');

//Показатели качества
  pXL.CreateTblFld('KatPokaz.Code');
  pXL.CreateTblFld('KatPokaz.Name');
  pXL.CreateTblFld('ValPokaz.Value');

//Вагоны
  pXL.CreateTblFld('RepVagon.NRec');
  pXL.CreateTblFld('RepVagon.Num');
  pXL.CreateTblFld('SpStep.nKvit');
  pXL.CreateTblFld('RepVagon.dReg');
  pXL.CreateTblFld('RepVagon.tReg');
  pXL.CreateTblFld('RepVagon.Massa');
  pXL.CreateTblFld('RepVagon.Netto');
  pXL.CreateTblFld('RepVagon.Massa');
  pXL.CreateTblFld('RepVagon.Netto');
  pXL.CreateTblFld('MarAvt.NMarAvt');
  pXL.CreateTblFld('MarPunktP.Name');
  pXL.CreateTblFld('MarPunktR.Name');

//Атрибуты
  pXL.CreateTblFld('AttrNam.NAME');
  pXL.CreateTblFld('AttrVal.vString');
  StrHierar := '.                                    ';
  AllPos := nPos;
  TreePushPos(trTmpTree);
  if ( nPos=1 )  //Сtrl+P - печать всего отчета
   {
     TreeGetFirstEx(trTmpTree);
     FirstLevel := TreeLevel(trTmpTree);
   }
  else           //  печать c текущего уровня
   {
     if ( TreeIsTerminal(trTmpTree) )
      {
        FirstLevel := TreeLevel(trTmpTree)-1;
        cTmpRec[FirstLevel+1] := TempDescr.cGroup;
      }
     else
      {
        FirstLevel := TreeLevel(trTmpTree);
        cTmpRec[FirstLevel+1] := TempDescr.NRec;
      }
   }

  Header;//Нарисовать первую Шляпу

  Do//
   {
     if ( not TreeIsTerminal(trTmpTree))    //узел
      {
        //запоминаем NRec группировки для итого
        cTmpRec[TreeLevel(trTmpTree)+1]:= TempDescr.NRec;

        if ( nPos=2 )
        nPos:=1;
      }
     else     //лист
      {
        if ( nPos=2 )
          nPos:=1;
     if ((((( UserDeskRep.ResWord[13] and 1) >0 ) and ( GetFirst AttrVal  = tsOK ))
       or (( (UserDeskRep.ResWord[13] and 2) >0 ) and ( GetFirst ValPokaz = tsOK ))
         or (( (UserDeskRep.ResWord[13] and 4) >0) and ( GetFirst RepVagon = tsOk )))
          and (n <> 0) and (drawClear))
       {
         pXL.ClearTblBuffer;
         pXL.InsTblRow;
         drawClear := false;
       }
     DrawData;

     NextVisual;

     showHead := false;
//Атрибуты
          if ((( UserDeskRep.ResWord[13] and 1) >0 ) and ( GetFirst AttrVal  = tsOK ))
           {
             pXL.ClearTblBuffer;
             pXL.SetTblStringFldValue('NRec','Дополнительные параметры');
             pXL.InsTblRow;
             pXL.ClearTblBuffer;
             pXL.SetTblStringFldValue('NRec','Наименование параметра');
             pXL.SetTblStringFldValue('Dend','Значение');
             pXL.InsTblRow;
             Do
              {
                 pXL.ClearTblBuffer;

                 if ( GetFirst AttrNam  = tsOK )
                  {
                    pXL.SetTblStringFldValue('NRec',AttrNam.NAME);
                  if (  AttrNam.AttrType = 1)
                    pXL.SetTblStringFldValue('Dend',StringNL0 (AttrVal.vDouble,0,3));

                  if (  AttrNam.AttrType = 2)
                    pXL.SetTblStringFldValue('Dend',DatetoStr(AttrVal.vDate,'DD/MM/YYYY'));

                  if (  AttrNam.AttrType = 3)
                    pXL.SetTblStringFldValue('Dend',timetostr (AttrVal.vTime,'HH:MM'));

                  if (  AttrNam.AttrType <> 1) and (  AttrNam.AttrType <> 2) and (  AttrNam.AttrType <> 3)
                    pXL.SetTblStringFldValue('Dend',AttrVal.vString)

                  if (  string(AttrVal.vDate) = 'ДД/ММ/ГГГГ') and (AttrNam.AttrType = 2)
                    pXL.SetTblStringFldValue('Dend','');
                  }

                 pXL.SetTblStringFldValue('Descr','      ');
         showHead := true;
                 pXL.InsTblRow;
              }
             while ( GetNext AttrVal = tsOK ) or ( GetNext ValPokaz = tsOK );
           }
 //Показатели качества

           if (( (UserDeskRep.ResWord[13] and 2) >0 ) and ( GetFirst ValPokaz = tsOK ))
            {
              pXL.ClearTblBuffer;
              pXL.SetTblStringFldValue('NRec','Показатели качества');
              pXL.InsTblRow;
              pXL.ClearTblBuffer;
              pXL.SetTblStringFldValue('NRec','Наименование показателя');
              pXL.SetTblStringFldValue('Dend','Значение');
              pXL.InsTblRow;
              Do
               {
                 if ( GetFirst KatPokaz  = tsOK )
                  {
                    pXL.ClearTblBuffer;
                    pXL.SetTblStringFldValue('NRec',KatPokaz.Name);
                    pXL.SetTblStringFldValue('Dend',string(ValPokaz.Value));
                    pXL.SetTblStringFldValue('Descr','      ');
                    pXL.InsTblRow;
                  }
                }
              While ( GetNext ValPokaz = tsOK );
          showHead := true;
            }//IF
 //Вагоны
     if (( (UserDeskRep.ResWord[13] and 4) >0) and ( GetFirst RepVagon = tsOk ))
      {
         Vagitog[1]:=0;
         Vagitog[2]:=0;
         pXL.ClearTblBuffer;
         pXL.SetTblStringFldValue('NRec','Вагоны');
         pXL.InsTblRow;
         pXL.ClearTblBuffer;
         pXL.SetTblStringFldValue('NRec', 'Дата');
         pXL.SetTblStringFldValue('dDoc', 'Время');
         pXL.SetTblStringFldValue('dEnd', 'Номер вагона');
         pXL.SetTblStringFldValue('NDoc', 'Номер квитан-ции');
         pXL.SetTblStringFldValue('Name', 'Масса груженого вагона');
         pXL.SetTblStringFldValue('KatMC.Name', 'Масса пустого вагона');
         pXL.SetTblStringFldValue('GOST', 'Вес груза');
         pXL.SetTblStringFldValue('TU', 'Потребитель');
         pXL.SetTblStringFldValue('NReg', 'Желез-ная дорога');
         pXL.SetTblStringFldValue('Keepper.Name', 'Станция отправле-ния');
         pXL.SetTblStringFldValue('TasteOrg.Name', 'Станция назначения');
         pXL.InsTblRow;
         Do
          {
            pXL.ClearTblBuffer;
            pXL.SetTblStringFldValue('NRec', DateToStr(RepVagon.dReg, 'DD/MM/YYYY'));
            pXL.SetTblStringFldValue('dDoc', timetostr(RepVagon.tReg, 'HH:MM' ));
            pXL.SetTblStringFldValue('dEnd', RepVagon.Num);
            pXL.SetTblStringFldValue('NDoc',  SpStep.nKvit);
            pXL.SetTblStringFldValue('Name',string(RepVagon.Massa));
            pXL.SetTblStringFldValue('KatMC.Name', string(RepVagon.Netto));
            pXL.SetTblStringFldValue('GOST', string(RepVagon.Massa+RepVagon.Netto ));
            pXL.SetTblStringFldValue('TU', KatOrg.Name);
            pXL.SetTblStringFldValue('NReg', MarAvt.NMarAvt);
            pXL.SetTblStringFldValue('Keepper.Name', MarPunktP.Name);
            pXL.SetTblStringFldValue('TasteOrg.Name', MarPunktR.Name);
            pXL.InsTblRow;
            //Подбиваем итог по массам
            Vagitog[1]:=Vagitog[1]+RepVagon.Massa;
            Vagitog[2]:=Vagitog[2]+RepVagon.Netto;
          }
         while ( GetNext RepVagon = tsOk );
         pXL.ClearTblBuffer;
         pXL.SetTblStringFldValue('NRec','Итого:');
         pXL.SetTblStringFldValue('Name', string(Vagitog[1]));
         pXL.SetTblStringFldValue('KatMC.Name',string(Vagitog[2]));
         pXL.SetTblStringFldValue('GOST', string(Vagitog[1]+Vagitog[2]));
         pXL.SetTblStringFldValue('Descr','    ');
         pXL.InsTblRow;
         showHead := true;
       }//IF

        n := n + 1;

     }//
     if (((( UserDeskRep.ResWord[13] and 1) >0 ) and ( GetFirst AttrVal  = tsOK ))
       or (( (UserDeskRep.ResWord[13] and 2) >0 ) and ( GetFirst ValPokaz = tsOK ))
         or (( (UserDeskRep.ResWord[13] and 4) >0) and ( GetFirst RepVagon = tsOk )))
     and (n <> 0)
     {
       pXL.ClearTblBuffer;
       pXL.SetTblStringFldValue('Descr','       ');
       pXL.InsTblRow;
     }

     if ( not TreeGetNextEx(trTmpTree) )
       break;

     if (showHead = true) and (n <> 0)//если у нас показались выбранные параметры
       {
         pXL.SetTblStringFldValue('MarAvt.NMarAvt', '      ');
         Header;
     drawClear := false;
       }
     else
       drawClear := true;
   }
  While ( TreeLevel(trTmpTree) > FirstLevel );//Остановка цикла

  pXL.PublishTbl('Table');
  pXL.LoadReport(sXLSFileName);
  pXL.DisConnectExcel;
  StopVisual('', 0);
  TreePopPos(trTmpTree);
  RescanPanel(#TempDescr);
}