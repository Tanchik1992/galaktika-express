//******************************************************************************
//                                                      (c) корпорация Галактика
// Галактика 7.12 - Логистика - ДО на продажу
// Спецификация документа на продажу
//******************************************************************************

#include CalcFuns.var

//******************************************************************************

#include wdocnal.vpp

//******************************************************************************

#doc
Окно просмотра скидки к позиции спецификации документа
#end
Window  wSkidka 'Скидка к позиции спецификации документа' escClose;
  Show at (13, 19, 66, 23);

//******************************************************************************

Panel p1;
  Table SpStep;

Screen scwSkidka;

Fields
//------------------------------------------------------------------------------
  SpStep.VlSkid ('Величина скидки', hcKouDocBSkidkaPos, sci13Esc)
        : [10.2];
//------------------------------------------------------------------------------
  if (SpStep.PrSkid = 1, '%', SimVolB)
        : Skip, {Font = {Italic = TRUE}};
//------------------------------------------------------------------------------
  SpStep.PrSkid ('Вариант учета скидки', hcKouDocBSkidkaPos, sci13Esc)
        : [LIST 1 'Скидка к позиции как %', 'Скидка к позиции как сумма'], Protect;
//------------------------------------------------------------------------------
<<

                 Скидка.@@@@@@@@@@@.@@@@@@
            .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
>>
end;// Screen

//---------------------------------------------------------------------------

HandleEvent

cmCheckField:
  case CurField of
  //--------------
    #SpStep.VlSkid
  , #SpStep.PrSkid:
      if (UpdateTable)
        { }
  //--------------
  end;

cmOpenSearch:
  case CurField of
  //--------------
    #SpStep.PrSkid:
      Stop;
  //--------------
  end;

cmDelOnProtect:
  case CurField of
  //--------------
    #SpStep.VlSkid:
      {
        SpStep.PrSkid := 1;
        Set SpStep.VlSkid := 0;
        if (UpdateTable)
          { }
      }
  //--------------
  end;

end; // HandleEvent
end; //Panel

//******************************************************************************

HandleEvent
cmPick:
  case CurField of
  //--------------
    #SpStep.VlSkid:
       if (RunInterface('GetSkid', comp(0), curssumv) <> cmCancel)
         {
           SpStep.PrSkid := 1;
           Set SpStep.VlSkid := curssumv;
           if (UpdateTable)
             { }
         }
  //--------------
  end;
end; // HandleEvent
end; // Window

//******************************************************************************

#doc
Окно расширенной информации по позиции
#end
Window  PwSpStep 'Спецификация документа' escClose;
  Show at (, , 110, 23);

//******************************************************************************

Panel p1;
  Show at (, , , );
  Table SpStep;

Screen scSpStepMC 'Спецификация' (, , sci1378Esc);
  Show at (, , , 14);

Fields
//------------------------------------------------------------------------------
  SpStep.Npp
                : Skip, left, {Font = {Italic = TRUE}};
//------------------------------------------------------------------------------
  KatMC2.Name
                ('Товарная позиция, к которой относится услуга', , sci1378Esc)
                : Protect;
//------------------------------------------------------------------------------
  KatMC2.Barkod
                : Skip;
//------------------------------------------------------------------------------
  Nomenkl
                ('Номенклатурный номер товара/услуги, выбор из каталога - <Ctrl><F3>', , sci1378Esc)
                : Protect, QuickChoice,
                {Font = {BackColor = if (SpStep.cMCUSL = 0, ColorNeed, 0)}};
//------------------------------------------------------------------------------
  NamMC
                ('МЦ/услуга', , sci1378Esc)
                : Protect, QuickChoice;
//------------------------------------------------------------------------------
  UslNakl
                ('Для услуг - закрывается актом/переносится в накладную ', , sci1378Esc)
                : Protect;
//------------------------------------------------------------------------------
  NamTovar
                ('Наименование товара/услуги, выбор из каталога - <Ctrl><F3>', , sci1378Esc)
                : Protect, QuickChoice,
                {Font = {BackColor = if (SpStep.cMCUSL = 0, ColorNeed, 0)}};
//------------------------------------------------------------------------------
  KatParty.Name
                ('Наименование партии для МЦ', , sci1378Esc)
                : Protect, QuickChoice;
//------------------------------------------------------------------------------
  SpStep.Kol
                ('Количество по документу для оплаты', , sci178Esc)
                : [prSignsInKol], NoProtect;
//------------------------------------------------------------------------------
  KatOtpEd.Name
                ('Единица измерения', , sci1378Esc)
                : Protect, QuickChoice,
                {Font = {BackColor = if (SpStep.cOtpEd = 0, ColorNeed, 0)}};
//------------------------------------------------------------------------------
  SpStep.KolSkl
                ('Количество для списания по складу', , sci178Esc)
                : [prSignsInKol], NoProtect,
                {Font = {Bold = TRUE}};
//------------------------------------------------------------------------------
  SpStep.ProcUb
                ('Процент на естественную убыль', , sci178Esc)
                : [7.4], LessNull;
//------------------------------------------------------------------------------
  SpStep.Price
                ('Цена за единицу', , sci178Esc)
                : [brForPrice, '\2p[|-]36`666`666`666`666.88'];
//------------------------------------------------------------------------------
  SimVolB
                : Skip, left,
                {Font = {Italic = TRUE}};
//------------------------------------------------------------------------------
  SummaTov
                : [brForSumma, '\2p[|-]36`666`666`666`666.88'],
                {Font = {Bold = TRUE}}, Protect;
//------------------------------------------------------------------------------
  SpStep.Summa
                : [brForSumma, '\2p[|-]36`666`666`666`666.88'],
                {Font = {Bold = TRUE}}, Protect;
//------------------------------------------------------------------------------
  ManTax
                : Skip,
                {Font = {Bold = TRUE}};
//------------------------------------------------------------------------------
  SpStep.NDS
                : [brForSumma, '\2p[|-]36`666`666`666`666.88'], Protect;
//------------------------------------------------------------------------------
  SpStep.Reserv
                ('Фон красный при просроченном резерве, зеленый - когда резерв продлен при формировании накладных', , sci178Esc)
                : [prSignsInKol],
                {Font = {Bold = TRUE; BackColor = CalcColorReserv}};
//------------------------------------------------------------------------------
  SpStep.SrokRes
                ('Фон красный при просроченном резерве, зеленый - когда резерв продлен при формировании накладных', , sci178Esc)
                : ['DD/MM/YYYY'],
                {Font = {BackColor = CalcColorReserv}};
//------------------------------------------------------------------------------
  SpStep.Garant
                ('Срок гарантии в месяцах', , sci178Esc)
                : [5.2], LessNull;
//------------------------------------------------------------------------------
  KlPrice.Name
                ('Ссылка на прайс-лист', , sci1378Esc)
                : Protect;
//------------------------------------------------------------------------------
  FactoryPrice      ('Заводская(контрактная) цена', , sci1378Esc): [brForPrice], noprotect;
  [SkidVal ''] SimVolB + '': skip, left;
  fSpSoprProcNac    ('Процент надбавки', , sci1378Esc): noprotect;
//------------------------------------------------------------------------------

Buttons
  cmValue9  , , , 'Скидка к позиции документа-основания', , sci178Esc;
  cmValue12 , , , 'Скидки/надбавки', , sci178Esc;
  cmValFld8 , , , 'Справка по резерву товара на складах', , sci178Esc;

<<
.@@`Относится к позиции`.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@.@@@@@@@@@@@@@@@@@@@@@@@@@
`Номенклатурный номер`  .@@@@@@@@@@@@@@@@@@@@@         `МЦ/услуга`.@@@@@@@@@@@@@.@@@@@@@@@@@@@@@@@@@@@@@@@
`Наименование`          .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
`Партия`                .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
`Количество к оплате`            .@@@@@@@@@@@@ `Единица измерения`.@@@@@@@@@@@@@
`Количество к списанию по складу`.@@@@@@@@@@@@        `% на убыль`.@@@@@@@@@@@@@
`Цена`                  .@@@@@@@@@@@@@@@@@@@@@.@@@@@@@@@@@@@
`Стоимость            ` .@@@@@@@@@@@@@@@@@@@@@
`Сумма с учетом скидок` .@@@@@@@@@@@@@@@@@@@@@ <. Скидка к позиции  .> <. Скидки / надбавки за качество .>
`Налоги`.@@@@@@@@@@@@@@@.@@@@@@@@@@@@@@@@@@@@@
`Зарезервировано`.@@@@@@@@@@@@`до`.@@@@@@@@@@@ <. Резервы по складам.>
`Гарантия (мес)`        .@@@@@@
`Прайс-лист`            .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
`Заводская цена`        .@@@@@@@@@@@@@@@@@@@@@.@@@@@`%`.@@@@@@@@@@
>>
end;// Screen

TabbedSheet Bottom tsSpecifInfo
  Show at (, 15, , );

Screen scSpStepMCEx 'Спецификация' (, , sci1378Esc);
  Table SpStep;

Fields
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
  TTNResOtgr.Name
                ('Ресурс отгрузки', , sci1378Esc)
                : Protect, QuickChoice;
//------------------------------------------------------------------------------
  TTNMoveCell.Name
                ('Единица подвижного состава', , sci1378Esc)
                : Protect, QuickChoice;
//------------------------------------------------------------------------------
  SpStep.NVagon
                ('Номер единицы подвижного состава', , sci1378Esc);
//------------------------------------------------------------------------------
  SpStep.KolGrM
                ('Количество грузовых мест', , sci178Esc)
                : [prSignsInKol];
//------------------------------------------------------------------------------
  KatOtpEdGrM.Name
                ('Единица измерения грузовых мест', , sci1378Esc)
                : Protect, QuickChoice;
//------------------------------------------------------------------------------
  SpStep.Netto
                ('Вес нетто', , sci178Esc)
                : [prSignsInKol], LessNull;
//------------------------------------------------------------------------------
  SpStep.NKvit
                ('Номер ж/д квитанции', , sci178Esc);
//------------------------------------------------------------------------------
  SpStep.mTara
                ('Вес тары', , sci178Esc)
                : [prSignsInKol], LessNull;
//------------------------------------------------------------------------------
#ifdef _RETTARA_
  SpStep.PrVoz
                ('Признак возврата/невозврата тары', , sci1378Esc)
                : [LIST 1 'возвратная', 'невозвратная'], Protect;
#end
//------------------------------------------------------------------------------
  SpStep.SumAvt
                ('Ж/д тариф', , sci178Esc)
                : [18.2, '\3p[|-]36`666`666`666`666.888'], LessNull;
//------------------------------------------------------------------------------
  ValutAvt
                ('Символ валюты.', , sci1378Esc)
                : Protect;
//------------------------------------------------------------------------------
  TTN_massa_all
                ('Вес брутто', , sci178Esc)
                : [prSignsInKol], LessNull;
//------------------------------------------------------------------------------
  TTNKatEd.Name
                ('Единица веса', , sci1378Esc)
                : Protect, QuickChoice;
//------------------------------------------------------------------------------
  TTNMetMassa.Name
                ('Способ определения веса', , sci1378Esc)
                : Protect, QuickChoice;
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------

Buttons
  cmValue7  , , , 'Редактирование товарно-транспортной информации по позиции', hcKouDocBTTI, sci178Esc;

<<
`Ресурс отгрузки`                 .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ <.Товарно-транспортная информация.>
`Единица подвижного состава`      .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
`Номер единицы подвижного состава`.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
`Количество груз.мест`     .@@@@@@@ `ЕдИзм`       .@@@@@@@@@@@
`Нетто`       .@@@@@@@@@@@@@@@@@@@@                           `Номер ж/д квитанции`    .@@@@@@@@@@@@@@@@@@@
#ifdef _RETTARA_
`Тара`        .@@@@@@@@@@@@@@@@@@@@.@@@@@@@@@@@@@@@@@@@@@@@@@@`Сумма ж/д тарифа`       .@@@@@@@@@@@@@@.@@@@
#else
`Тара`        .@@@@@@@@@@@@@@@@@@@@                           `Сумма ж/д тарифа`       .@@@@@@@@@@@@@@.@@@@
#end
`Брутто`      .@@@@@@@@@@@@@@@@@@@@ `Единица веса`.@@@@@@@@@@@`Способ определения веса`.@@@@@@@@@@@@@@@@@@@
>>
end;// Screen

Browse scNalEdit 'Налоги по позиции' (, , sci178Esc);
  Table SpDocNal;
Fields
  KatNalog.Name   #3'Налог'
                  : [10], Skip;

  SpDocnal.Nalog  #3'%'
                  : [5, 2];

  NalOrg.Name     #3'Контрагент'('Контрагент- получатель суммы данного налога', hcKouDocFSpNal, sci1378Esc)
                  : [25], protect;

  SpDocNal.SumVal #3'Сумма налога'('При необходимости уточните сумму налогов для позиции', hcKouDocFSpNal)
                  : [14], [brForSumma, '\2p[|-]36`666`666`666`666.88'];

  SimVolB         #3'Вал.'
                  : [4], Skip, NoAutoSize;

  SpDocNal.SumNal #3'Сумма налога'('Сумма налога в валюте налога', , )
                  : [14], [brForSumma, '\2p[|-]36`666`666`666`666.88'], protect;

  SimvNal         #3'Вал.'
                  : [4], skip, NoAutoSize;

end; // browse

Embedded scKauEdit 'Целевой учет' Interface;
end;

//******************************************************************************
#include longnamemcdo.pan
//******************************************************************************

end; // TabbedSheet

//******************************************************************************

Procedure SetMyFormat;
{
  Exit;
}

//******************************************************************************
Function GetAttrDouble(nRecTable: comp; str: string): double;
{
  GetAttrDouble := piExAttr.doGetAttr(coKatOtpEd,nRecTable,str);
}

Procedure SetAttrDouble(nRecTable : comp; str : string; Value : double);
{
  piExAttr.doSetAttr(coKatOtpEd,nRecTable,str,Value);
}

function ReadGrMDO ( pKolFact, pKolGrM : double; var cEdGrM : comp ) : double;
var
  tKolGrM
, dKoef   : double;

{
  tKolGrM := GetAttrDouble(KatOtp2.NRec, 'ГРУЗОВЫЕ МЕСТА, ФИКСИРОВАННОЕ КОЛИЧЕСТВО');

  if (tKolGrM = 0)
  {
    dKoef := GetAttrDouble(KatOtp2.NRec, 'ГРУЗОВЫЕ МЕСТА, КОЭФФИЦИЕНТ')
    tKolGrM := pKolFact / dKoef;
    if dKoef <> 0
      cEdGrM := KatOtp2.nRec;
    pKolGrM := tKolGrM;
  }

  if (tKolGrM <> 0)
  {
    pKolGrM := tKolGrM;

    //округление до большего целого количества грузовых мест
    if (Trunc(pKolGrM) <> pKolGrM)
      pKolGrM := Trunc(pKolGrM) + 1;
  }
  ReadGrMDO := pKolGrM;
}


procedure ProcKolGrMDO ( pMcUsl, pOtpEdGrM, pOtpEd : comp ; pKolFact, pKolGrM : double );
var
  cEdGrM : comp;
{
  if SpStep.cOwner <> comp(0)
    if ( wGetTune('Tara.GrTara') = 0 AND
         SpStep.cOwner - SpStep.nRec <> 0 )
       OR (
         wGetTune('Tara.GrTara') = 1 AND
         KatMC.kGroupMC = sGetTune('Tara.KodGrMcTara'))
      if (pOtpEdGrM = comp(0))
      {
        set SpStep.KolGrM := double(0);
        Exit;
      }

  // сначала пытаемся перечитать из единицы грузовых мест
  if (pOtpEdGrM <> comp(0))
  {
    if GetFirst KatOtp2 where (( pOtpEdGrM == KatOtp2.nRec )) = tsOk
      {
        pKolGrM := ReadGrMDO (pKolFact, pKolGrM, cEdGrM );
        if pKolGrM <> 0
          {
            set SpStep.KolGrM := pKolGrM;
            Exit;
          }
      }
    // если ничего не перечитано - значит был ручной ввод - сохраним его
    // при ручном вводе оставим пока неокругленные значения
    EXIT;
  }
  // затем пытаемся перечитать из отпускной единицы спецификации
  if (pOtpEd <> comp(0))
    if GetFirst KatOtp2 where (( pOtpEd == KatOtp2.nRec )) = tsOk
    {
      pKolGrM := ReadGrMDO (pKolFact, pKolGrM, cEdGrM );
      if pKolGrM <> 0
        {
          set SpStep.KolGrM := pKolGrM;
          set SpStep.cOtpEdGRM := pOtpEd;
          Exit;
        }
    }

  // ищем по всем отпускным единицам
  _LOOP KatOtp2 where (( pMcUsl  ==  KatOtp2.cMCUSL ))
  {
    pKolGrM := ReadGrMDO (pKolFact, pKolGrM, cEdGrM );
    if pKolGrM <> 0
      {
        set SpStep.KolGrM := pKolGrM;
        set SpStep.cOtpEdGRM := KatOtp2.nRec;
        Exit;
      }
  }

  // если значения для кол-ва грузовых мест не задано - берем фактическое
  pKolGrM := pKolFact;
  if pKolGrM = 0 AND cEdGrM <> 0
    set SpStep.cOtpEdGRM := cEdGrM;
  else
    set SpStep.cOtpEdGRM := pOtpEd;

  //округление до большего целого количества грузовых мест
  if (Trunc(pKolGrM) <> pKolGrM)
    pKolGrM := Trunc(pKolGrM) + 1;
  set SpStep.KolGrM := pKolGrM;
}

Procedure SStSetFieldCellVal;
{
  var b: boolean;
  b := ( BaseDoc.Status <= 2 ) AND ( BaseDoc.TypeDoc = 0 );

  SetFieldSelectable(#TTNMoveCell.Name, b);
  SetFieldSelectable(#SpStep.NVagon,    b);
}


//******************************************************************************

Procedure ChangeStateFields;
{
  cfsSetCurrentContainer('VSchet');
  SetFieldSelectable(#KlPrice.Name, TRUE);

  #ifdef _RETTARA_
  SetFieldVisible(#SpStep.PrVoz, (SpStep.PrVoz <> 0) and (SpStep.PrMC = 1))
  cfsSetProp('L_SCSPSTEPMC_Тара#1', 'Visible', (SpStep.PrMC = 1));
  #end

  SetFieldVisible(#KatMC2.Name, (SpStep.PrMC <> 1));
  cfsSetProp('L_SCSPSTEPMC_Относится_к_позиции', 'Visible', (SpStep.PrMC <> 1));
}

//******************************************************************************

Procedure ChangeNamMC;
{
  if SpStep.cMCUsl <> 0
    if Message('При изменении типа обнулится уже выбранная позиция.'#13'Продолжить?', YesNo)<>Yes
      {
        Abort;
        Exit;
      }

  case SpStep.PrMC of
  //-----------------
    1:   SpStep.PrMC := 2;
  //-----------------
    2:   SpStep.PrMC := 7;
  //-----------------
    else SpStep.PrMC := 1;
  //-----------------
  end;

  if ((BaseDoc.VidDoc = 201) AND (SpStep.PrMC = 2))  // для ДО на продажу
    SpStep.PrUsNkl := wGetTune('Doc.UslDoSell');

  if ((BaseDoc.VidDoc = 1420) AND (SpStep.PrMC = 2))  // для ДО на продажу
    SpStep.PrUsNkl := wGetTune('Doc.Wood.Schet.UslDoSell');

  SpStep.cMCUsl := 0;
  SpStep.cOtpEd := 0;
  set SpStep.cSpMC  := 0;

  ChangeStateFields;
  RescanPanel(#SpStep);
}

//******************************************************************************

HandleEvent

//------------------------------------------------------------------------------

#include stepttn.vpp //-- обработка полей весовых характеристик

//------------------------------------------------------------------------------

cmPositionChanged:
  {
    ChangeStateFields;
    SetTabbedSheetVisible(scLongName, boGetTune(if (SpStep.PrMC = 1, 'McUsl.VarNameMC_IsUse', 'McUsl.VarNameUsl_IsUse')));
  }
//------------------------------------------------------------------------------

cmPick:
{
  case CurField of
  //--------------
    #KatParty.Name,
    #fSpSoprProcNac,
    #FactoryPrice:
      if ((SpStep.cParty <> 0) AND (IsValid(#DoRes)))
        Message('Перед изменением партии необходимо снять резерв по позиции!', Information)
      else
        {
          var NRecParty: comp;     NRecParty := SpStep.cParty;

          if (RunInterface(GetPar__, SpStep.cParty,
                        if (SpStep.PrMC = 1, SpStep.cMCUSL, comp(0)))<>cmCancel )
            {
              if boGetTune('Oper.MultiCurrReg')
                case BaseDoc.TipMoney of
                //----------------------
                  1:
                    if (KatParty.cValPar<>0)
                      {
                        Message('При многовалютном учете и рублевом ДО валюта у партии должна отсутствовать!!',
                                Information);
                        set SpStep.cParty := NRecParty;
                        Exit;
                      }
                //----------------------
                  2
                , 3:
                    if (KatParty.cValPar<>BaseDoc.cVal)
                      {
                        Message('При многовалютном учете валюта партии должна соответствовать документу!',
                                Information);

                        set SpStep.cParty := NRecParty;
                        Exit;
                      }
                //----------------------
                end;

              if ((NrecParty<>0)AND(SpStep.PrMc = 1)AND(NrecParty<>SpStep.cParty))
                {
                  var SrPrice: double;

                  InitMCInfo(BaseDoc.dDoc);

                  StepMCInfo(SpStep.cMCUsl, 0, 0, 0, NRecParty);

                  SrPrice := froundrub2(AveragePrice);

                  StepMCInfo(SpStep.cMCUsl, 0, 0, 0, SpStep.cParty);

                  if (SrPrice <> froundrub2(AveragePrice))
                    if ( Message('Учетная цена выбранной партии отличается от исходной!'#13+
                                 'Продолжить!', Confirmation + YesNo) <> cmYes )
                      {
                        DoneMCInfo;
                        set SpStep.cParty := NRecParty;
                        Exit;
                      }

                  DoneMCInfo;
                }
            }
        }
  //--------------
    #NamMC,
    #NamMC1:
      ChangeNamMC;
  //--------------
    #UslNakl:
      if SpStep.PrUsNkl <> 0
        set SpStep.PrUsNkl := 0;
      else
        if (SpStep.PrMC = 2)
          set SpStep.PrUsNkl := 1;
        else
          Message('Изменение поля доступно для услуг!', Information);
  //--------------
    #TTNMoveCell.Name:
       SetMyFormat;
  //--------------
    #SpStep.nVagon:
      {
        var tmpVagon, pickrec: comp;
        var ret: word;
        var VagonMarker: longint;
        var IndexMarker: longint;
        var i: longint;
        var firstSpNRec: comp;    firstSpNRec := 0;
        var firstSpDocNal: comp;


        var cEdRec: comp;  cEdRec := if (IsValid(#TTNMoveCell), TTNMoveCell.NRec, 0);

        if (RunInterface('GetVagon', 1, tmpVagon, SpStep.cMCUsl, cEdRec, comp(0)) = cmDefault)
          {
            VagonMarker := InitMarker('VagonMarker', 8, 10, 10);
            IndexMarker := GetMarkerCount(VagonMarker)-1;

            StartNewVisual(vtIndicatorVisual, vfTimer+vfBreak+vfConfirm,
                           'Копирование позиции для выбранных вагонов', IndexMarker);

            For (i := 0;i<= IndexMarker;i := i+1)
              {
                if (not NextVisual)
                  Break;

                if GetMarker(VagonMarker, i, pickrec)
                  {
                    if (i = 0)
                      {
                        UpdateTable;
                        oDOfuns.VagFun_ConnectSpStep(pickrec, SpStep.NRec, BaseDoc.cGrPol);
                        RereadRecord(#SpStep);
                        firstSpNRec := SpStep.NRec;
                        firstSpDocNal := SpDocNal.NRec;
                      }
                    else
                      { // надо создать новую запись SpStep
                        SpStep.NRec := 0;
                        SpStep.Npp  := oSpNext.GetSpNppNext(SpStep.cStepDoc, coSpStep);
                        ret := insert current SpStep;
                        if (ret = tsOk)
                          {
                            oDOfuns.VagFun_ConnectSpStep(pickrec, SpStep.NRec, BaseDoc.cGrPol);
                            RereadRecord(#SpStep);
                            //-- копируем налог
                            if (firstSpDocNal <> 0)
                              {
                                ret := GetFirst SpDocNal where
                                                ((firstSpDocNal == SpDocNal.NRec));
                                if (ret = tsOk)
                                  {
                                    SpDocNal.NRec   := 0;
                                    SpDocNal.cSpDoc := SpStep.NRec;
                                    ret := insert current SpDocNal;
                                  }
                              }

                            //-- копируем факт параметры расч услуги.
                            oCalcFuns.ClcUsl_CopyFactPar(firstSpNRec , coSpStep,
                                               SpStep.NRec , coSpStep);
                            //-- копируем ValNac
                            oCalcFuns.ValNac_Copy(firstSpNRec , coSpStep,
                                        SpStep.NRec , coSpStep, TRUE);

                          }
                      }

                    // Привязка удостоверения качества к ДО
                    PushPos(#Vagon);
                    ResetBounds(#Vagon);
                    if (GetFirst Vagon where ((pickrec == Vagon.NRec)) = tsOk)
                      {
                        Vagon.cOrg := BaseDoc.cOrg;
                        Vagon.cSpStep := SpStep.NRec;
                        SpStep.nVagon := Vagon.Num;
                        SpStep.cNMOVECELL := Vagon.NRec;
                        SpStep.cCellVal := Vagon.cMoveCell;
                        SpStep.cTransp := Vagon.ctransp;
                        update current Vagon;
                        update current SpStep;
                      }

                    SetBounds(#Vagon);
                    PopPos(#Vagon);
                  } //if (GetMarker)
              } // For (i)

            GetTotalSkid(FALSE);

            if (firstSpNRec <> 0)
              ret := GetFirst SpStep where ((firstSpNRec == SpStep.NRec));

            DoneMarker(VagonMarker, 'VagonMarker');
            StopVisual('', 0);
            RescanPanel(#SpStep);
          } // if ( = cmDefault)
      }
  //--------------
    #KatMC2.Name:
      {
        if (RunInterface(GetDOMC, BaseDoc.NRec, SpStep.cSpMC) <> cmCancel)
          {
#ifndef __MTR_TO_SPEC__
            Set SpStep.cUKS := SpStepMC.cUKS;
            if (IsValid(#SpecZatr2)) // с МЦ связана затрата
              {
                if (IsValid(#SpecZatr))
                  update current SpecZatr Set SpecZatr.cAddSumTune := SpecZatr2.cAddSumTune;
                else
                  {
                    ClearBuffer(#SpecZatr);
                    SpecZatr.coTable := coSpStep;
                    SpecZatr.cAddSumTune := SpecZatr2.cAddSumTune;
                    SpecZatr.cUKS := SpStep.cUKS;
                    insert current SpecZatr;
                  }
              }
            else
              if (IsValid(#SpecZatr))
                delete current Speczatr;
#else
            oMTRFun.CopySpecMTR(coSpStep, SpStepMC.NRec, coSpStep, SpStep.NRec);
#end

            UpdateTable;
            RereadRecord(#SpStep);
          }
      }
  //--------------
    #SpStep.KolSkl:
      {
        Pick_KolDopEd(1, 'Ввод количества к списанию по складу', SpStep.KolSkl, longint(0), BaseDoc.VidDoc);
        ProcessCommand(cmCheckField);
      }
  //--------------
    #SpStep.Kol:
      {
        Pick_KolDopEd(2, 'Ввод количества к оплате', SpStep.Kol, longint(0), BaseDoc.VidDoc);
        ProcessCommand(cmCheckField);
      }
  //--------------
  end;
}
//------------------------------------------------------------------------------

cmDelOnProtect:
  case CurField of
  //--------------
    #KatOtpEd.Abbr
  , #KatOtpEd.Name:
      Abort;
  //--------------
    #TTNMoveCell.Name:
      {
        set SpStep.nVagon := '';
        set SpStep.cNMoveCell := 0;
        set SpStep.cTransp := 0;
      }
  //--------------
    #SpStep.nVagon:
      {
        set SpStep.nVagon := '';
        set SpStep.cNMoveCell := 0;
        set SpStep.cTransp := 0;
        Stop;
      }
  //--------------
    #KatMC2.Name:
      set SpStep.cSpMC := 0;
  //--------------
    #TTNMoveCell.Name:
      SetMyFormat;
  //--------------
    #SpStep.nVagon:
      {
        oDOfuns.VagFun_DisConnectSpStep(SpStep.NRec);

        PushPos(#Vagon);
        ResetBounds(#Vagon);
        if (GetFirst Vagon where ((SpStep.cNMoveCell == Vagon.NRec)) = tsOk)
          {
            Vagon.cOrg := 0;
            Vagon.cSpStep := 0;
            update current Vagon;
          }

        SetBounds(#Vagon);
        PopPos(#Vagon);
        set SpStep.nVagon := '';
        set SpStep.cNMoveCell := 0;
        set SpStep.cTransp := 0;
      }
  //--------------
  end; // case CurField

//------------------------------------------------------------------------------

cmPositionChanged:
  {
    OldRes := SpStep.Reserv;
    SetMyFormat;
    SStSetFieldCellVal;
  }

//------------------------------------------------------------------------------

cmCheckField:
  {
    if (CurField = #SpStep.KolGrM)
      if boGetTune ('Doc.Sell.DO.CalcGrMForDO')
        if (SpStep.PrMc = 1)
          ProcKolGrMDO ( SpStep.cMCUsl, SpStep.cOtpEdGrM, SpStep.cOtpEd, SpStep.KolSkl, SpStep.KolGrM );

    if (CurField = #SpStep.cCellVal)
      SetMyFormat;

    // вставлен из-за возможной не стыковки с KUZBASS
    if (CurField = #SpStep.cCellVal OR CurField = #SpStep.NVagon)
       SStSetFieldCellVal;

    #ifdef _RETTARA_
    if (CurField = #SpStep.PrVoz)
      if UpdateTable
        {
          ServtObj1.UpdatePrVozTara(SpStep.NRec);
          if (SpStep.PrVoz = 2)
            SpStep.ManualTax := 0;

          GetTotal(FALSE);
          RereadRecord;
        }
    #end
  }

//------------------------------------------------------------------------------

cmSetCurField:
  {
    case Target of
      #SpStep.Reserv:
        OldRes := SpStep.Reserv;
    end;

    OldKolSklDEI := SpStep.KolSkl;
    OldKolDEI    := SpStep.Kol;
    OldKolOplDEI := SpStep.KolOpl;
  }

end;
end; //Panel

//******************************************************************************

HandleEvent

//------------------------------------------------------------------------------

cmInit:
  {
    ChangeStateFields;
    SStSetFieldCellVal;
  }

//------------------------------------------------------------------------------

cmChangeTabbedSheetFormat:
  {
    if ( (GetFirst spdocnal <> tsOk) and (Target = scNalEdit) )
      {
        Message('Налоги по позиции отсутствуют!', Information);
        Abort;
      }

    if ( (not IsValid(#SpStep)) and (Target = scKauEdit) )
      {
        Message('Укажите для позиции наименование МЦ/услуги либо удалите запись!',
                          Warning + OkButton);

        Abort;
      }
  }

//------------------------------------------------------------------------------

cmDone:
  UpdateTable;

//------------------------------------------------------------------------------

cmSaveDoc:
  OnCmSaveDoc;

//------------------------------------------------------------------------------

cmValFld8:
  {
    if ( SpStep.PrMC <> 1 )
      {
        Message('Резервирование доступно только для товарных позиций!', Information);
        Exit;
      }

    if (RecordExists KatSopr = tsOk)
      {
        Message('По документу были отгрузки!'#13#3'Резервирование невозможно!', Information + CancelButton);
        Exit;
      }

    if ( not IsValid(#DoRes) AND (wGetTune('Reserv.PrSchSklad') = 2) )
      if (Message('Нет складских резервов по позиции !'#13'Зарезервировать?', YesNo+CancelButton) <> cmYes)
        Exit
      else
        {
          DoInitResTunes;

          delete all tNalF;
          var NeOtgr, OtgrKol: double;

          if boGetTune('Oper.AvtoRaschKolMc')
            {
              OtgrKol := GetOtgr;
              NeOtgr  := SpStep.Kol - OtgrKol;
            }

          PushBounds(if(wGetTune('Reserv.PriorParty') = 1, tbTekSal02, tbTekSal01));

          _LOOP TekSaldo
            {
              if Not AllowedToReservOnParty
                Continue;

              if NOT CheckRestrictRazrez(TekSaldo.cPodr, TekSaldo.cMOL, TekSaldo.cParty)
                Continue;

              ClearBuffer(#TNalF);
              TNalF.NRec    := SpStep.nRec;
              TNalF.cMC     := SpStep.cMCUsl;
              TNalF.cMOL    := TekSaldo.cMOL;
              TNalF.cPodr   := TekSaldo.cPodr;
              TNalF.cParty  := TekSaldo.cParty;
              TNalF.cSpStep := SpStep.NRec;
              TNalF.Kol     := (TekSaldo.Kol-TekSaldo.Res)/KatOtpEd.Koef;
              if boGetTune('Oper.AvtoRaschKolMc')
                {
                  TNalF.KolF := if(NeOtgr <= TNalF.Kol, NeOtgr, TNalF.Kol);
                  DoCorrentTaraKol(TNalF.KolF, TNalF.Kol);
                  NeOtgr := NeOtgr - TNalF.KolF;

                  if ( NeOtgr < 0.0 )
                    NeOtgr := 0.0;
                }

              if (insert current TNalF = tsOk)
                { }
            }

          PopBounds(if(wGetTune('Reserv.PriorParty') = 1, tbTekSal02, tbTekSal01));

          if (
              (NeOtgr > 0.0) AND
              boGetTune('Oper.AvtoRaschKolMc') AND
              NOT ( boGetTune('Reserv.ReservWithoutOst') OR boGetTune('Reserv.PartReserv') )
             )
            {
              Message('Свободный остаток '+KatMC.Name+' меньше требуемого!', Information);
              Exit;
            }

          if (RunInterface('GetNalF', SpStep.cMCUsl,
                                     SpStep.Kol+0,
                                     BaseDoc.dDoc,
                                     SpStep.NRec,
                                     SpStep.Kol - OtgrKol,
                                     word(1)) <> cmCancel)
            DoChangeReservInOneSpStep
          else
            Exit;
        }

    if (RecordExists DoRes = tsOk)
      {
        RunWindow(wReserv);
        RereadRecord(#BaseDoc);
        RereadRecord(#SpStep);
      }
    else
      if ((wGetTune('Reserv.PrSchSklad') <> 1) OR (SpStep.PrMC <> 1)) //резервирование по предприятию/скл разрезу
        Message('Нет складских резервов по позиции !', Information)
      else
        SpravTov;
  }

//------------------------------------------------------------------------------

cmValue18: // пересчет налогов по выбранной группе
  proc18;

//------------------------------------------------------------------------------

cmNal:
  SpravTov;

//------------------------------------------------------------------------------

cmRestoreDoc:
  if (wGetTune('Pick.SelKatMc') <> 1)
    ProcessCommand(cmValue8)
  else
    Message('Выбор из каталога МЦ/услуг недоступен!', Information);

//------------------------------------------------------------------------------

cmValue9:
  if (wGetTune('Oper.AlgSkid') <> 1)
    {
      if (BaseDoc.cNalog = 0)
        RunWindow(wSkidka);
      else
        Message('Ручные скидки запрещены настройкой!'#13+GetTuneName('Oper.AlgSkid'), Information)
    }
  else
    {                                   // работаем по сложным скидкам для ДО на продажу
      var TmpSid_: double;
      var TmpSid_2: boolean;
      TmpSid_2 := ((BaseDoc.Status = 1) OR (BaseDoc.Status = 2))

      if NotEditPosStatus(FALSE)
        TmpSid_2 := FALSE;

      if (((tipDO = 101)  AND boGetTune('Doc.Buy.NotEditDO'))
          or
          ((tipDO = 201)  AND boGetTune('Doc.Sell.NotEditDO'))
          or
          ((tipDO = 1410) AND boGetTune('Doc.Wood.NarAkt.NotEditDO'))
          or
          ((tipDO = 1420) AND boGetTune('Doc.Wood.Schet.NotEditDO')))
        if (IsValid(tnBaseFin) OR IsValid(tnKatSopr))
          TmpSid_2 := FALSE;

      if (TmpSid_2)
        IsNeedReCalcSloznSkid := TRUE;

      RunInterface('SkidSum', word(1), SpStep.NRec, TmpSid_2);
      if (TmpSid_2)
        {
          TmpSid_ := piCalcSkid.RePasteInDocSkid(SpStep.NRec, word(1));

          RereadRecord(#BaseDoc);
          RereadRecord(#SpStep);

          if (IsValid(#SpStep))
            GetTotalSkid(FALSE); // пересчет всех позиций

          IsNeedReCalcSloznSkid := FALSE;

          RescanPanel(#BaseDoc);
        }
    }

//------------------------------------------------------------------------------

cmPickClass  :
  if (BaseDoc.cNalog <> 0) // невозможность скидок вручную
    Message('Ручные скидки запрещены настройкой!', Information)
  else
    RunWindow(wSkidka);

//------------------------------------------------------------------------------

cmOpenSearch:
  case CurField of
  //--------------
    #SpStep.Nds: // ввод вручную налогов
      if (SpStep.ManualTax = 1)
        {
          if (IsValid(#SpDocNal))
            RunWindow(wSpDocNal)
          else
            Message('Необходимо определить в настройке налоги для учета!', InFormation);
        }
  //--------------
     #SpStep.Price:
       Abort;
  //--------------
     #KatParty.Name:
       if ((SpStep.cParty <> 0) AND (IsValid(#DoRes)))
         Message('Снимите резерв по позиции, а затем измените партию!', Information)
       else
         QuickChoiceName := 'qcKatPartyName';
  //--------------
     #NamMC,
     #NamMC1:
       ChangeNamMC;
  //--------------
  end;

//------------------------------------------------------------------------------

cmValFld11: // вызов функции перенаправления резервов
  CallReReserv;

//------------------------------------------------------------------------------

cmShowAll:
  if ((CurTable = #SpStep) AND (SpStep.cMCUSL <> 0) AND (SpStep.PrMC = 1))
     RunInterface(GSaldDat,
                   BaseDoc.dDoc,
                   word(0),
                   SpStep.cMCUSL,
                   BaseDoc.cParty,        // склад отгрузки
                   comp(-1),              // МОЛ
                   SpStep.cParty,         // партия товара
                   SpStep.cOtpEd);

//------------------------------------------------------------------------------

cmValue7:      //-- интерфейс с товарно-транспортной информацией по позиции
  if (not UpdateTable)
    Exit
  else
    {
      SaveMyDSK(NOT IsProtected(#BaseDoc), '_CanEditTTNDoc_');
      RunInterface(SpTTNDoc, word(coSpStep), SpStep.NRec);
    }
//------------------------------------------------------------------------------

cmValue12:
  RunInterface(ValNac, SpStep.NRec, word(coSpStep));

//------------------------------------------------------------------------------

cmHotKeys:
  PutHotCommand(RunMenu('mnuVSchetSpStep'));

//------------------------------------------------------------------------------

#ifdef __MTR_TO_SPEC__
cmIerarchy :
{
  var vcSp: comp;

  if (CurTable = #SpStep and IsValid(#SpStep))
    RunInterface('EditMtr2Spec', if(not EditDOPosEnabled(false, false) and if(not CanEditInClosePeriod(true), not CanEditInClosePeriod(false), true), 1, if(SpStep.cSpMC = 0, if(IsValid(#SmetaStroy), 2, 0), 1))
                               , 0, word(coSpStep), SpStep.nRec);

  vcSp := SpStep.nRec;

  PushPos(#SpStep);

  _LOOP SpStep where ((vcSp == SpStep.cSpMC))
    oMTRFun.CopySpecMTR(coSpStep, vcSp, coSpStep, SpStep.NRec);

  PopPos(#SpStep);
}
#end

//------------------------------------------------------------------------------

#include spstep.qc

//------------------------------------------------------------------------------

cmAttrib:
  SetFormat(scNalEdit);

//******************************************************************************

end;
end; // Window
