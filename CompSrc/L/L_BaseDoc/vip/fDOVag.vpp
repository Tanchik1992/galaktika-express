function ReCreateTmpTbl(VagNo: string): boolean;
{
  ReCreateTmpTbl := true;
  delete all DocOnVagon;
  StartNewVisual(vtNumericVisual, vfTimer + vfBreak + vfConfirm,
             ''#3'Поиск документов-оснований'#13#3, 1);
  _loop SpStep where (( VagNo            == SpStep.nVagon and
                        SpStep.cStepDoc  == StepDoc.nRec  and
                        StepDoc.cBaseDoc == BaseDoc.nRec
                      ))
    if not NextVisual {
      ReCreateTmpTbl := false;
      Break;
    }
    else
      if (insert DocOnVagon set DocOnVagon.nRec   := BaseDoc.nRec,
                               DocOnVagon.NoDoc  := BaseDoc.NoDoc,
                               DocOnVagon.VidDoc := BaseDoc.VidDoc) <> tsOK {};
  StopVisual('',0);
}

procedure DoFindDocOnVagon;
var
  s: string;
  Res: word;
  fndVagNo: string[36];
{
  fndVagNo := '';
  s := '';
  while true do {
    Res := RunDialog(GetVagonFnd, fndVagNo);
    if (s <> fndVagNo) and ((Res = cmValue1) or (Res = cmValue2)) {
      if not ReCreateTmpTbl(fndVagNo) Break;
      s := fndVagNo;
      Res := cmValue1;
    }
    case Res of
      cmValue1: {
        if GetFirst DocOnVagon where (( TipDo == DocOnVagon.VidDoc )) <> tsOK {
          message('Документ не найден!', Information);
          Break
        }
        else {
          GetFirst BaseDoc where (( DocOnVagon.nRec == BaseDoc.nRec ));
          ReReadRecord(#BaseDoc);
          ReReadRecord(#SpStep);
        }
      }
      cmValue2: {
        if GetNext DocOnVagon where (( TipDo == DocOnVagon.VidDoc )) <> tsOK {
          message('Поиск закончен!', Information);
          Break;
        }
        else {
          GetFirst BaseDoc where (( DocOnVagon.nRec == BaseDoc.nRec ));
          ReReadRecord(#BaseDoc);
          ReReadRecord(#SpStep);
        }
      }
    else
      Break;
    end
  }
  ReReadRecord(#BaseDoc);
  ReReadRecord(#SpStep);
}