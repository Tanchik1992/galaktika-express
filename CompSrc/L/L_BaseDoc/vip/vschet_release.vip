//******************************************************************************
//                                                      (c) корпорация Галактика
// Галактика 7.12 - Логистика
// ДО на продажу
//******************************************************************************

#include xlReport.Vih
#define __vschet__
#define _AkcisNalog_
#define _RETTARA_
#define __NewOFP__
#define __ObjEdit__
#define EX_ATTR_OKED 'КОД ОКЭД'
#define _LINKMTR2SPEC_

#include Actualit.vih   // Объектный интерфейс Поддержки актуальности сальдо
#include aOfpOut.vih    // iOfpOut (Платежный календарь)
#include arhkart.vih
#include CalcSkid.vih   // функции по сложным скидкам контрагентов
#include CalcTipSkid.vih// для "Расчет типовой скидки по фактическим продажам Контрагента"
#include Dolg_BD.vih
#include fndVag.tbl
#include fpCO.vih
#include FpSHOb.Vih
#include getdbase.vih
#include GetMol.vih
#include KatSopr.vih    // подключение объектных интерфейсов, общих для сопроводительных документов
#include ObjEdit.vin
//#include objintpl.vin
#include osreal.vih     // iOsReal
#include servtara.vih
#include soprdoc.vih
#include soprdocb.vih
#include TrDoRes.vih
#include vschet.vih
#include PlanDog.vih
#include AllowedDepartmentGroupList.vih // работа со списком разрешенных групп подразделений
#include chkschem.vih
#include SoprHoz.vih
#include ExtAttrClass.vih
#include FactoryPrice.Vih
#include reestrbdoc.vih
#include linkmtr2spec.vih
#include SDfuns.vih
#include DOfuns.vih
#include prndocs.vih
#include DOTara.vih
#include oiJSWork.vih
#include FpSHOb.Vih     // Финоперации по SoprHoz
#include FpCO.Vih       // Центры ответственности
#include SeeAktRem.vih
#include GetKau.vih
#include setsmeta.vih
#include SpecDO.vih
#include ResProc.Vih
#include MTTS.vih

//******************************************************************************

#doc
Интерфейс ДО на продажу
#end

Interface VSchet_Release 'Основания на продажу' ('', hcSellM1DocDog) EscClose, cyan;
  Show at (, , 110, 31);

//******************************************************************************

#include KatSopr.var    // объектные переменные, общие для сопр.документов
#include Actualit.var   // Переменная типа VipInterface SaldoActuality
#include aOfpOut.var    // piOFPOut. iOfpOut
#include Dolg_BD.var
#include InsTblSr.var   // переменная oInsTblSource
#include TrDoRes.var    // oTrDoRes
#include CalcSkid.var   // piCalcSkid   набор функций для расчета сложных скидок (CalcSkid.vih)
#include CalcTipSkid.var// piCalcSk_0   для "Расчет типовой скидки по фактическим продажам Контрагента"
#include chkschem.var
#include FactoryPrice.var
#include LinkMtr2Spec.var // аналитики целевого учета
#include SDfuns.var
#include DOfuns.var
#include DOTara.var
#include SeeAktRem.var
#include MTTS.var

//******************************************************************************

#include tmpPicked.tbl  // Временные таблицы для сохранения пометок

//******************************************************************************
Function GetKAUField(pNum : integer) : string; Forward;
Function GetTotalNDS(pDoc: comp): double; Forward;
//******************************************************************************
// По проекту для Метизного
//
Function GetKoefVolume1 : double; forward;
Function GetKoefVolume2 : double; forward;
Function GetKolTara     : integer; forward;
//******************************************************************************

Var
  pJavaAlg : oiJSWork;

//******************************************************************************

Create view
Var
  pSetSmeta : iSetSmeta;
//------------------------------------------------------------------------------
  przap
, fNal
, IsFilter
, ResIs
, IsNeedReCalcSloznSkid
, Chrust_Mode
, IsObjInt
, bFilterOD
                : boolean;
//------------------------------------------------------------------------------
  dCursa
, d1
, d2
, d3
, myDate
                : Date;
//------------------------------------------------------------------------------
  myCourse
, __Change_price
, KolCmpl
, CursSumR
, CursSumV
, tmpKoef
, Nlg
, PriceR
, OldTotal
, PriceV
, OldRes
, mySumma
, AllPlat
, AllNoPlat
, oldKolSklDEI
, oldKolDEI
, oldKolOplDEI
, DolgPlat
, AllNakl
, NewTotal
, NaklPrih
, NaklRash
, PlatPrih
, PlatRash
, Old_Kol
, RCP_Value
, MinQuantityRes
, CursV
, CenaTr
                : double;
//------------------------------------------------------------------------------
  WordPv
, TM
, wTmp
, RVhod
, w1
, curvisib
, IsInPr
, tipDo
, pnrec
, prFormat
, mydirect
, naltype
, NastrVypRes
, NastrSrokReserv
, ForPrice
, ForVPrice
, ForSumma
, ForVSumma
, old_PrVoz
, wDateInp
, OldTypeDoc
, RCP_TipClc
, RCP_TipSkid
, wTimerCount
, wSortField
, vidReestr    // 0-отчеты в бизнес-тексте, 1 FastReport
, typsoprhoz
                : word;
//------------------------------------------------------------------------------
  nzap
, prnrec
, BVal
, a1
, a2
, a3
, myValNo
, NRecSp
, NRecOtp
, BaseNrec
, cGrDo
, SaveR
, pOwner
, pmc_
, SavedNRec
, CopyStep
, BaseDocRec
, docNo
, stepNo
                : comp;
//------------------------------------------------------------------------------
  myField1
                : string[9];
//------------------------------------------------------------------------------
  CurDescr
                : string[20];
//------------------------------------------------------------------------------
  CurDesGr
                : string[4];
//------------------------------------------------------------------------------
  ProcTxt
, SklOtgr
, StrNum
, StrCurse
, s_SimvRub
, OldNVagon
, sType
                : string;
//------------------------------------------------------------------------------
  addallmc
                : byte;
//------------------------------------------------------------------------------

  VidReport   : word;          // 0-отчеты в бизнес-тексте, 1 - FastReport


//------------------------------------------------------------------------------
  #include copydo.var
//------------------------------------------------------------------------------
  #include tranvars.vpp
//------------------------------------------------------------------------------
  #include FltFld.var

//******************************************************************************

As select
//------------------------------------------------------------------------------
  if ((SpStep.Reserv = 0) OR (SpStep.PrMC <> 1),
   // если не зарезервировано, цвет не менять
    0,
    if(Cur_Date > SpStep.SrokRes,
     // текущая дата превышает установленный срок резерва? - красный цвет
      ColorError,
      if(SpStep.SrokRes > Add_Day(BaseDoc.dDoc,
                                     if(NastrVypRes>NastrSrokReserv, NastrVypRes-1, NastrSrokReserv)),
                                      // максимальное значение из срока резервирования по умолчанию
                                      // и добавляемое количество дней при выписке накладных
                                        ColorSysLime, 0)))
    ( FieldName = CalcColorReserv )
//------------------------------------------------------------------------------
, if ( SpStep.PrMC = 1, KatMC.Name, KatUsl.Name)
    ( FieldName = NamTovar )
//------------------------------------------------------------------------------
, if ( SpStep.PrMC = 1, KatMC.BarKod, KatUsl.Kod)
    ( FieldName = Nomenkl )
//------------------------------------------------------------------------------
, if ( SpStep.PrMC = 1, 'товар', if ( SpStep.PrMC = 7, 'скидка', 'услуга'))
    ( FieldName = NamMC )
//------------------------------------------------------------------------------
, if ( SpStep.PrMC = 1, 'Т', if ( SpStep.PrMC = 7, 'С' , 'У'))
    ( FieldName = NamMC1 )
//------------------------------------------------------------------------------
, oDOfuns.DoRound(BaseDoc.cVal, tipDo, SpStep.Kol*SpStep.Price)
    ( FieldName = SummaTov )
//------------------------------------------------------------------------------
, if ( BaseDoc.cVal = 0,    s_SimvRub,   KlVal.SimVolV)
    ( FieldName = SimVolB )
//------------------------------------------------------------------------------
, if ( SpDocNal.cVal = 0,    s_SimvRub,   KlVal1.SimVolV)
    ( FieldName = SimvNal )
//------------------------------------------------------------------------------
, if ( BaseDoc.VhSkid = 1, '%', SimVolB)
    ( FieldName = SkidVar )
//------------------------------------------------------------------------------
, PrintNumber(BaseDoc.Descr, BaseDoc.NoDoc)
    ( FieldName = NomDes )
//------------------------------------------------------------------------------
, if ( (SpStep.Reserv = 0) OR (SpStep.PrMC <> 1), '-',
       if( (SpStep.Kol - SpStep.Reserv) <= MinQuantityRes, 'Р', 'Ч'))
    ( FieldName = SostRes )
//------------------------------------------------------------------------------
, if ( IsValid(tnPick2), '√', '')
    ( FieldName = Picked )
//------------------------------------------------------------------------------
, if ( (SpStep.PrMC = 1 OR SpStep.PrMC = 7), '',
   if ( SpStep.PrUsNkl = 1, 'Переносится в накладную', 'Закрывается актом'))
    ( FieldName = UslNakl )
//------------------------------------------------------------------------------
, if (IsValid(tnBaseFin),
    if (IsValid(tnKatSopr), '√', 'П'),
    if (IsValid(tnKatSopr), 'Н', ' '))
    ( FieldName = NakFin )
//------------------------------------------------------------------------------
, if (IsValid(tnBaseFin),
    if (IsValid(tnKatSopr), 'есть платежи и отгрузки', 'есть только платежи'),
    if (IsValid(tnKatSopr), 'есть только отгрузки', ''))
    ( FieldName = NakFin2 )
//------------------------------------------------------------------------------
, if (((BaseDoc.Total>0.0001) AND
       (BaseDoc.Total = tmpSaldo3.Kol) AND
       (BaseDoc.Total = tmpSaldo3.Price)), '+',
          if( tmpSaldo3.Kol>tmpSaldo3.Price, '!',
          if( tmpSaldo3.Kol<tmpSaldo3.Price, '*', '-')))
    ( FieldName = NakFinDop )
//------------------------------------------------------------------------------
, if ( SpStep.ManualTax = 0, 'расчетные', 'ручные')
    ( FieldName = ManTax )
//------------------------------------------------------------------------------
, if (BaseDoc.cNalog = 0, 'ручная', if (BaseDoc.cNalog = 1, 'по итогу', 'для покупателя'))
    ( FieldName = SkidFunc )
//------------------------------------------------------------------------------
, if (SpStep.cValAvt = 0,
    if (s_SimvRub <> '', s_SimvRub, 'руб.'),
    TTNKlVal.SimVolV)
    ( FieldName = ValutAvt )
//------------------------------------------------------------------------------
, (SpStep.mTara + SpStep.Netto)
    ( FieldName = TTN_massa_all )
//------------------------------------------------------------------------------
, if(IsValid(tnSmetaStroy), SmetaStroy.NoSmet + ': ' + SmetaStroy.Name, '')
    ( FieldName = SmetaMy )
//------------------------------------------------------------------------------
, if(IsValid(tnSmetaSpec), String(SmetaSpec.NPP) + ' (' + SmetaSpec.Code + ') '
                        + SmetaSpec.Name, '')
    ( FieldName = SmetaSpMy )
//------------------------------------------------------------------------------
, if (BaseDoc.cDogovor <> 0, 'Получатель платежей по договору', '')
    ( FieldName = MyOrgDogRole )
//------------------------------------------------------------------------------
, if (BaseDoc.cAppDogovor <> 0, MyOrgSogl.Name,
    if (BaseDoc.cDogovor <> 0, MyOrgDog.Name, ''))
    ( FieldName = MyOrgDogName )
//------------------------------------------------------------------------------
, if (BaseDoc.cDogovor <> 0, 'Покупатель по договору', '')
    ( FieldName = KatOrgDogRole )
//------------------------------------------------------------------------------
, if (BaseDoc.cAppDogovor <> 0, KatOrgSogl.Name,
    if (BaseDoc.cDogovor <> 0, KatOrgDog.Name, ''))
    ( FieldName = KatOrgDogName )
//------------------------------------------------------------------------------
, if(wGetTune('Doc.BrAbbrEd') = 0, KatOtpEd.ABBR, KatOtpEd.Name)
    ( FieldName = OtpEd )
//------------------------------------------------------------------------------
, oFPrice.GetValFactoryPriceDO (SpStep.NRec, CursV, TRUE)
        ( FieldName = FactoryPrice )
//------------------------------------------------------------------------------
, oFPrice.FormatSpStepProcNac (SpStep.NRec)
        ( FieldName = fSpSoprProcNac )
//------------------------------------------------------------------------------
, BaseDoc.Total - GetTotalNDS(BaseDoc.nRec)
    ( FieldName = BaseDoc_TotalWithoutNDS )
//------------------------------------------------------------------------------
#define __HozOperViewName__
, if (IsValid(tnSoprHoz), iTxoBind.ShowName(SoprHoz.BufferP), '')
        ( FieldName = HozOperViewName )
//-----------------------------------------------------------------------------

//********************************************************************************
// По проекту для Метизного
//
, (GetKoefVolume1)
    (FieldName = sEdVolume1)
//-------------------------------
, (GetKoefVolume2)
    (FieldName = sEdVolume2)
//-------------------------------
, (GetKolTara)
    (FieldName = sKolTara)
//********************************************************************************

,
#include ofpdof1.vpp // модуль OFP

  BaseDoc.*
, BaseDocUKS.nRec
, StepDocUKS.cBaseDoc
, StepDocUKS.nRec
, KatStroy.Name
, KatStroy.cMC
, SpStep.cUKS
, KatStroy.nRec
, KatStroy1.cMC
, AddSumTune.*
, SpecZatr.*
, SpecZatr2.*
, LISTPAR.*
, FromOrg.Name
, ToOrg.Name
, SpStep.nRec
, StepDoc.*
, KatSopr.cStepDoc
, KatSopr.VidSopr
, KatSopr.dSopr
, KatSopr.NSopr
, KatOtpEd.PrMC
, KatOtpEd.cMCUsl
, KatOtpEd.Akt
, KatMC.nRec
, KatUsl.nRec
, GroupSch.*
, OtvPodr.Name

, GetKAUField(1)  ( FieldName = vsKau1 )
, GetKAUField(2)  ( FieldName = vsKau2 )
, GetKAUField(3)  ( FieldName = vsKau3 )
, GetKAUField(4)  ( FieldName = vsKau4 )
, GetKAUField(5)  ( FieldName = vsKau5 )
, GetKAUField(6)  ( FieldName = vsKau6 )
, GetKAUField(7)  ( FieldName = vsKau7 )
, GetKAUField(8)  ( FieldName = vsKau8 )
, GetKAUField(9)  ( FieldName = vsKau9 )
, GetKAUField(10) ( FieldName = vsKau10 )

, if (IsValid(tnBaseDocRem),
    if (isValid(tnBaseDocZ), PrintNumber(BaseDocZ.Descr, BaseDocZ.NoDoc), ''), '')
  (FieldName = ZRemNoDoc)

//******************************************************************************

From
  BaseDoc
, BaseDoc BaseDocC
, BaseDoc BaseDocZ
, BaseDoc BaseDocZ2

, BaseDocRem
, BaseDocRem BaseDocRemZ2

, StepDoc
, StepDoc StepDocC
, StepDoc StepDocZ
, StepDoc StepDocZ2

, SpStep (SpStep02)
, SpStep SpStepZ2 (SpStep02)
, KatUsl
, KlVal
, KatOtpEd
, KatOtpEd KatOtpEd2
, SpDocs
, KatSopr
, KatSopr KatSoprZ
, SpSopr
, DoRes
, KlShtraf
, KatCompl
, SpCompl
, SpCompl SpCompl2
, KatCUsl
, SpCUsl
, SpCUsl  SpCUsl2
, Skidka
, KlPrice
, GrPrice
, Prices(Prices02)
, tempNo(tempNo01)
, BaseFin
, Pick(Pick02)
, PickPric(PickPric02)
, Pick Pick2
, Pick Pick3
, Pick Pick4SpStep(Pick02)
, SpStep SpStepC
, KatBank
, KatBank MyBank
, KatBank PickBank
, KatOrg
, KatOrg ToOrg
, KatOrg FromOrg
, KatOrg MyOrg
, KatOrg NalOrg
, KatOrg FltKatOrg
, KatOrg MyOrgDog
, KatOrg MyOrgSogl
, KatOrg KatOrgDog
, KatOrg KatOrgSogl
, KlVal KlVal1
, KatMol
, KatMol KatMol3
, KatPodr
, KatPodr KatPodr1
, KatPodr KuratPodr
, KatParty
, KatParty KatParty1
, KlShtraf KlShtraf1
, KatOrgDescr
, KatOrgDescr KatOrgDescr1
, TekMC
, SklOst
, DsgOtpr
, DSNastr
, TekSaldo
, KatOtpEd KatOtp2
, SpDocs SpCalPln
, SpDocs SpDog
, SpGrSch SpGrSch2
, TTNDoc TTNDoc2
, Dogovor DogApp
, Dogovor FltDogovor
, KatOtpEd KatOtpEdGrM
, LISTPAR
, KATED
, Dogovor
, Dogovor AppDogovor
, CalPlan
, TTNDoc
, KatPayment
, KatNazna
, Filial
, MoveCell TTNMoveCell
, MoveCell BDMoveCell
, CellVal  TTNCellVal
, Vagon
, Vagon VagonSP
, SpStep SpStepMC
, Dogovor SpDogovor
, Dogovor SpAppDogovor
, CalPlan SpCalPlan
, KatMC
, KatMC KatMC2
, KlVal    TTNKlVal
, KatED    TTNKatED
, ResOtgr  TTNResOtgr
, MetMassa TTNMetMassa
, SoprHoz
, KatNalog
, SpDocNal
, GroupSch
, SpGrSch
, SpGrSch SpGrSchC
, KatNotes
, SpOtpEd
, DocInfo
, KlPrice KlPrice1
, KlPrice KlPrice2
, KlPrice KlPriceTara
, FPCO OtvPodr
, KatStroy
, KatStroy KatStroy1
, StepDoc StepDocUKS
, BaseDoc BaseDocUKS
, SpecZatr
, SpecZatr SpecZatr2
, AddSumTune
, AttrVal AttrVKaz
, AttrNam AttrNKaz
, tmpPicked
, tmpSaldo3
, KatOtpEd KatOtpEdSmeta
, PickSmeta
, SpDocSmeta
, SpDocSmeta SpDocSmeta1
, SmetaStroy
, SmetaSpec
, SpStep SpStepSmet
, DocOnVagon
, AttrNam
, PlPor
, AppVeks
, klskidka
, AttrDog
, AttrDog AttrDogD
, AttrDog AttrDogS
, PlanPays
, TempPart
, Statlog
#ifdef __LIMIT__
, KatActiv
, KatPodr Poluch
#end
, WayMove
, GroupParty
, GroupMC
, GroupUsl
, tmpPickCompl
, SpecMTR
, SaldTune
, SpDopEd    SpDopEd1
, SpDopEd    SpDopEd2
, KatDopEd   KatDopEd1
, KatDopEd   KatDopEd2
, KatSopr KatSoprA
, SpSopr SpSoprA

//******************************************************************************

Where
((

      word(0)             ==  SpGrSch.wList
AND   BaseDoc.Nrec        ==  SpGrSch.cBaseDoc
AND   SpGrSch.cGroupSch   ==  GroupSch.Nrec
AND   BaseDoc.Nrec        ==  StepDoc.cBaseDoc
AND   BaseDoc.cParty      ==  KatPodr.Nrec
AND   BaseDoc.cStatDoc    ==  StatDoc.Nrec
AND   BaseDoc.cGrPol      ==  ToOrg.Nrec
AND   BaseDoc.cGrOtpr     ==  FromOrg.Nrec
AND   BaseDoc.Nrec        ==  tmpSaldo3.cMC
AND   BaseDoc.cNote       ==  KatNOtes.nRec
AND   StepDoc.Nrec        ==  SpStep.cStepDoc
AND   StepDoc.cShtrafP    ==  KlShtraf.Nrec
AND   StepDoc.cShtrafG    ==  KlShtraf1.Nrec
AND   StepDoc.Nrec        ==  KatSopr.cStepDoc
AND   word(0)             ==  BaseFin.TiDkBase
AND   StepDoc.Nrec        ==  BaseFin.cStepDoc
AND   KatSopr.Nrec        ==  SpSopr.cSopr
AND   SpStep.cMCUSL       ==  KatMC.Nrec
AND   SpStep.cMCUSL       ==  KatUsl.Nrec
AND   KatMC.cGroupMC      ==  GroupMC.NRec
AND   KatUsl.cGroupUSL    ==  GroupUsl.NRec
AND   SpStep.cOtpEd       ==  KatOtpEd.Nrec
AND   SpStep.cParty       ==  KatParty.Nrec
AND   KatParty.cGroupParty == GroupParty.NRec //пир 180.1500
AND   SpStep.cPriceList   ==  KlPrice.Nrec
AND   KlPrice.cGrPrice    ==  GrPrice.NRec
AND   SpStep.Nrec         ==  DoRes.cSpStep
AND   SpStep.Nrec         ==  SpDocNal.cSpDoc
AND   naltype             ==  SpDocNal.TipDoc
AND   SpDocNal.cNalog     ==  KatNalog.Nrec
AND   SpDocNal.cOrg       ==  NalOrg.Nrec
AND   SpDocNal.cVal       ==  Klval1.Nrec
AND   DoRes.cPodr         ==  KatPodr1.Nrec
AND   DoRes.cMol          ==  KatMol.Nrec
AND   DoRes.cParty        ==  KatParty1.Nrec
AND   BaseDoc.cVal        ==  KlVal.Nrec
AND   BaseDoc.cOrg        ==  KatOrg.Nrec
AND   BaseDoc.cOrg        ==  Filial.cOrg
AND   BaseDoc.cBank       ==  KatBank.Nrec
AND   BaseDoc.cMyBank     ==  MyBank.Nrec
AND   KatCompl.Nrec       ==  SpCompl.cCompl
AND   KatCUsl.Nrec        ==  SpCUsl.cCUsl
AND   SpStep.cMCUSL       ==  SklOst.cMC        // подцепка текущего
AND   BaseDoc.cParty      ==  SklOst.cPodr      // остатка и резерва по складу
AND   KatMC.Nrec          ==  TekMC.cMC
AND   coGetTune('MyOrg')  ==  MyOrg.Nrec
AND   word(800)           ==  Pick4SpStep.wList
AND   word(15)            ==  Pick2.wList
AND   BaseDoc.nrec        ==  Pick2.cRec        // для пометки ДО
AND   BaseDoc.cDogovor    ==  Dogovor.nRec      // ссылка на договор
AND   BaseDoc.cAppDogovor ==  AppDogovor.nRec   // ссылка на со   глашение
AND   BaseDoc.cCalPlan    ==  CalPlan.nRec      // ссылка на пункт кал.плана

AND   word(403)           ==  SpCalPln.tiDk
AND   CalPlan.nRec        ==  SpCalPln.cDoc
AND   word(3)             >>  SpCalPln.PrMC

AND   Dogovor.cPol        ==  MyOrgDog.nRec
AND   AppDogovor.cPol     ==  MyOrgSogl.nRec
AND   Dogovor.cOrg        ==  KatOrgDog.nRec
AND   AppDogovor.cOrg     ==  KatOrgSogl.nRec
AND   Dogovor.cCurPodr    ==  KuratPodr.nRec

AND   BaseDoc.cDogovor    ==  AttrDogD.cDogovor
AND   BaseDoc.cAppDogovor ==  AttrDogS.cDogovor

AND   BaseDoc.cNazna      ==  KatNazna.NRec
AND   coKatSopr           ==  TTNDoc.wTable
AND   KatSopr.nRec        ==  TTNDoc.cDoc
AND   BaseDoc.cPayment    ==  KatPayment.nRec

AND   cMCPrice            ==  KlPrice1.NRec
AND   cUSLPrice           ==  KlPrice2.NRec

AND   SpStep.cDogovor     ==  SpDogovor.nRec    // ссылка на договор
AND   SpStep.cAppDogovor  ==  SpAppDogovor.nRec // ссылка на соглашение
AND   SpStep.cCalPlan     ==  SpCalPlan.nRec    // ссылка на пункт кал.плана

AND   SpStep.cSpMC        ==  SpStepMC.nRec
AND   SpStepMC.cMCUSL     ==  KatMC2.Nrec
AND   SpStepMC.nRec       ==  SpecZatr2.cSpec
AND   coSpStep            ==  SpecZatr2.coTable

AND   BaseDoc.cCellVal    ==  BDMoveCell.NRec
AND   SpStep.cCellVal     ==  TTNMoveCell.NRec
AND   word(0)             ==  TTNCellVal.PrMC
AND   SpStep.cMCUSL       ==  TTNCellVal.cMC
AND   TTNMoveCell.NRec    ==  TTNCellVal.cMoveCell
AND   SpStep.cValAvt      ==  TTNKlVal.NRec
AND   SpStep.cMasEd       ==  TTNKatED.NRec
AND   SpStep.cResOtgr     ==  TTNResOtgr.NRec
AND   SpStep.cMasVid      ==  TTNMetMassa.NRec

AND   typsoprhoz            ==  SoprHoz.TipDoc
AND   BaseDoc.NRec        ==  SoprHoz.cSoprDoc
AND   SpStep.cOtpEdGRM    ==  KatOtpEdGrM.NRec

AND  BaseDoc.NRec         ==  DocInfo.cDoc
AND  word(1102)           ==  DocInfo.DocType
AND  BaseDoc.cNMoveCell   ==  Vagon.nRec
AND  SpStep.cNMoveCell    ==  VagonSP.nRec
AND  BaseDoc.cOtvPodr     ==  OtvPodr.nRec
AND  SpStep.cUKS          ==  KatStroy.Nrec
AND  SpStep.cStepDoc      ==  StepDocUKS.nRec
AND  StepDocUKS.cBaseDoc  ==  BaseDocUKS.nRec
AND  KatMC.nRec           ==  KatStroy1.cMC
AND  SpStep.nRec          ==  SpecZatr.cSpec
AND  coSpStep             ==  SpecZatr.coTable
AND  SpecZatr.cAddSumTune ==  AddSumTune.nRec

AND  coBaseDoc            ==  AttrNKaz.wTable
AND  #EX_ATTR_OKED        ==  AttrNKaz.Name
AND  coBaseDoc            ==  AttrVKaz.wTable
AND  BaseDoc.nRec         ==  AttrVKaz.cRec
AND  AttrNKaz.nRec        ==  AttrVKaz.cAttrNam
AND  coSpStep             ==  SpDocSmeta.coTable
AND  SpStep.nRec          ==  SpDocSmeta.cSpec
AND  SpDocSmeta.cSmeta    ==  SmetaStroy.NRec
AND  SpDocSmeta.cPosition ==  SmetaSpec.NRec
AND  SpStepSmet.cOtpEd    ==  KatOtpEdSmeta.Nrec

#ifdef __LIMIT__
AND  BaseDoc.cAnalit[1]   ==  KatActiv.Nrec
AND  BaseDoc.cAnalit[2]   ==  Poluch.Nrec
#end

AND  coSpStep             ==  SpecMTR.coTable
AND  SpStep.nRec          ==  SpecMTR.cSpec
AND  SpecMTR.cSaldTune    ==  SaldTune.nRec

AND  coSpStep              ==  SpDopEd1.wTable
AND  SpStep.nRec           ==  SpDopEd1.cRec
AND  1                     ==  SpDopEd1.wTipKol
AND  1                     ==  SpDopEd1.Npp
AND  SpDopEd1.cDopEd       ==  KatDopEd1.nRec

AND  coSpStep              ==  SpDopEd2.wTable
AND  SpStep.nRec           ==  SpDopEd2.cRec
AND  1                     ==  SpDopEd2.wTipKol
AND  2                     ==  SpDopEd2.Npp
AND  SpDopEd2.cDopEd       ==  KatDopEd2.nRec

AND  BaseDoc.NRec           == BaseDocRem.cBaseDoc
AND  word(0)                == BaseDocRem.TipDoc
AND  BaseDocRem.cBaseDocRem == BaseDocZ.NRec

))

//******************************************************************************

#include dobnd.vpp     //  баундсы ДО
;

//******************************************************************************

Parameters
  BaseNrec;

//******************************************************************************

Procedure OnCmSaveDoc; forward;

var oChkLink: CheckLinksObj;

#ifdef ComponentVersion
ToolBar
    F_Common::tbBuhFilter
  , F_Common::tbPrintDoc
  , F_Common::tbSaveRestoreDoc
  , F_Common::tbAttrClass
;
#else
ToolBar
    tbBuhFilter
  , tbPrintDoc
  , tbSaveRestoreDoc
  , tbAttrClass
;
#end

//******************************************************************************

var _CanModify
  , _CanModifyQuery: boolean;

//******************************************************************************
var piOsReal: iOsReal;
var piExAttr : iExtAttr;
//******************************************************************************

form sprdo          ('sprDo.OUT',    'sprDo'   ) with novisual;
form frmInvoice     ('Invoice.OUT',  'Invoice' ) with novisual;
form Protocol       ('Protocol.OUT', 'errr'    ) with novisual;
form frmDublBaseDoc ('DublBase.OUT', 'dublsopr') with novisual;

//******************************************************************************

File FFLst;

//******************************************************************************

var UseDEI     : boolean;       // признак использования ДЕИ
var AutoDEI    : boolean;       // автоформирование ДЕИ
var ArhObj1: ArhkartObj1;
var ServtObj1: ServtaraObj1;
var _cOwner: comp;

var CK: CalcKol;

//******************************************************************************

#doc
Окно установки параметров пересчета цены
#end
Window DeltaPrice 'Цену уменьшить на' DoAccept, EscClose, Cyan;
  Show at (25, 5, 60, 10)
Screen scrDeltaPrice (, , sci1Esc)
Fields
  __Change_price ('Уменьшить цену на'): [prSignsInKol], noprotect;
Buttons
  cmOk, Default, , 'Ввод', , sci1Esc;
<<

     .@@@@@@@@@@@@@@@@@@@@@@@@
          <.~П~родолжить.>
>>
end;

HandleEvent

cmOk:
  PutCommand(cmDefault);

cmDefault:
  {
  }
end;
end;

//------------------------------------------------------------------------------

Function AktByDirect(Direct: word): word;
{
  AktbyDirect := if (Direct = 101, 553, 557);
}

//******************************************************************************

Procedure ChangeEnabledCommands(SetEnable: boolean);
{
  SetCommandEnabled(cmAccording, SetEnable); //Рассчитать стоимость услуги как % от стоимости МЦ
  SetCommandEnabled(cmValue17  , SetEnable); //Параметры расчетной услуги
  SetCommandEnabled(cmValue20  , SetEnable); //Расчет стоимости услуги
}

//******************************************************************************

Function isModifZhostkReserv (isMess: boolean): boolean;
// если применяется жесткое резервирование, то проверяем возможность
// модификации резерва по текущему документу для данного пользователя
{
  isModifZhostkReserv := TRUE;

  if ((coGetTune('Reserv.ZhostkGrOrg') <> 0) AND (BaseDoc.cOrg <> 0))
    if (GetFirst FastFirstRow KatOrgDescr1 where ((BaseDoc.cOrg == KatOrgDescr1.cRec )) = tsOk)
      if  (coGetTune('Reserv.ZhostkGrOrg') = KatOrgDescr1.cGroup)
        if (CurDesGr <> sGetTune('Reserv.GrDescr'))
          {
            isModifZhostkReserv := FALSE;
            if (isMess)
              Message('Для данного контрагента применяется "жесткое" резервирование.'#13+
                      'Вы не можете модифицировать резерв.', Information);
          }
}

//******************************************************************************

#include modprpar.wnd
#include dosoprh.vpp  // функции для работы с SoprHoz
#include copydo.wnd
#include SoprAll.vpp  // общие функции сопроводительных документов
#include fDOVag.vpp
#include FpRSHOb.Vpp  // связь с книгой финансовых операций (Sanny)
#include dodescr.vpp
#include dofilt_w.vpp // установка/снятие фильтра

//******************************************************************************
#doc
Окно ввода стоимости транспортировки
#end
Window winTrPrice 'Изменение цены' EscClose, DoAccept, Gray;
  Show at (, , 38, 7);

Screen scrTrPrice;
  Fields
    CenaTr ('Введите сумму') :[10.2], NoProtect;
  Buttons
    cmOk , Default;
    cmCancel;
<<

  Введите величину изменения цены для
  одной учетной единицы в валюте ДО
  .@@@@@@@@@@@

  <.  Принять  .>      <.  Отмена  .>
>>
end;

HandleEvent

cmOk:
  PutCommand(cmDefault);

cmDefault:
  {
  }
end;
end;

//******************************************************************************

#doc
Окно пересчета цены
#end
Window winRCPrice 'Пересчет цен' (, hcKouDocLocMCalcPriceSkidka, sci1EnEsc) EscClose, DoAccept, Gray;
  Show at (21, 7, 58, 10);
  var d: double;

Screen scrRCPrice;
  Fields
   RCP_TipSkid  ('Тип', , ): [LIST 'Скидка(сумма)', 'Надбавка(сумма)', 'Скидка(%)', 'Надбавка(%)'], protect;
   RCP_Value ('', , ): [10.4], NoProtect;
<<

 .@@@@@@@@@@@@@@@@@@ .@@@@@@@@@@@@@@@
>>
end;

HandleEvent
end; // of HandleEvent Window winSerach
end; // of Window winSerach

//******************************************************************************

#include wsortnom.vpp  // Окно установки полей для пересортировки спецификации
#include invoice.vpp   //Процедура вывода на печать Инвойса для __UZBEK__

#include PrnSertif.vpp // Печать сертификатов партий

#include resproc.vpp   // резервирование
#include gettot.vpp    // функции документов
#include skidtot.vpp   // функции документов
#include modprice.fun  // пересчет цен из одной валюты в другую
#include modifdo.vpp
#include incostat.vpp  // для коррекции остатка МЦ в договоре
#define __ExSumEnter__
#include schfunc.vpp   // функции документов
#include spvagon.vpp
#include copySpSopr.vpp // копирование спецификации из приходной накладной

//******************************************************************************

Procedure DoCorrentTaraKol(var TaraKol: double; MaxKol: double);
{
  if Not f_KolIsPositive(TaraKol)
    TaraKol := 0.0
  else
    if (KatOtpEd.Diskret = 1)
      if (trunc(TaraKol) <> TaraKol)
        {
          TaraKol := trunc(TaraKol) + 1;
          if (TaraKol > MaxKol)
            TaraKol := TaraKol - 1;
        }
}

//******************************************************************************

#include reswin.vpp //Window резервы спецификации документа
#include resdef.vpp // функция определения резерва
#include pwSpStep.vpp //Window анкета спецификации документа
#ifdef _CheckKon_VIH_
var oCheckKon: CheckKonObj;
#else
#include checkkon.vpp //проверка максимальной задолженности
#end
#include cellv_do.vpp  // процедуры для типа ДО - на маршрут/повагонная
#include specdo.vpp  // функции объединения спецификаций
#include ctrldog.vpp

#define __DOPRICE_VPP__
#include doprice.fun
#include DublBase.vpp // Функция печати дублирующихся позиций

//******************************************************************************

Procedure MakeReservEx;
var
  Flag: boolean;
  OtgrKol: double;
{
  if ( RecordExists KatSopr = tsOk )
    {
      if ( Message('По документу были отгрузки!'#13#13
                 + 'Резервировать неотгруженное количество?'
                 , Confirmation + YesNo + mfSwapButtons) <> cmYes )
        Exit;
    }
  else
    if ( Message('Производить резервирование?', Confirmation + YesNo) <> Yes)
      Exit;

  var ShowRaspr, PartResRaspr: word;

  if (RunDialog(GetFormRes, ShowRaspr, PartResRaspr) = cmCancel)
    Exit;

  DoInitResTunes;

  PushBounds(if(wGetTune('Reserv.PriorParty') = 1, tbTekSal02, tbTekSal01));

  _LOOP SpStep
    {
      if (SpStep.PrMC <> 1)
        Continue;

      if ((PartResRaspr = 0) AND (SpStep.Reserv > 0.0))
        Continue;

      OtgrKol := 0.0;

      delete all tNalF;

      var NeOtgr: double;

      // для тары распределяем количество в том же разрезе,
      // что и МЦ, которая транспортируется в этой таре
      if ((SpStep.cOwner <> SpStep.nRec)
      AND (SpStep.cOwner <> 0)
      AND (SpStep.cOwner <> 1))
        {
          SubResTov(SpStep.Reserv); // Снятие резерва по товару
          SubResRazrez; // Снятие резерва по складу
          DelPosDORES;

          set SpStep.Reserv := 0;
          SpStep.SrokRes := longint(0);
          update current SpStep;

          NeOtgr := 0.0;

          if (GetFirst FastFirstRow SpStepC where (( SpStep.cOwner == SpStepC.nRec )) = tsOk)
            NeOtgr := SpStepC.Reserv;

          if (NeOtgr <= 0.0)
            Continue;

          var KoefSpOtpEd: double; KoefSpOtpEd := 1.0;

          if (GetFirst FastFirstRow SpOtpEd
                 where (( SpStepC.cOtpEd == SpOtpEd.cOtpEd AND
                          SpStep.cMcUsl  == SpOtpEd.cMCTara )) = tsOk)
            {
              KoefSpOtpEd := SpOtpEd.Koef;
            }

          NeOtgr := SpStepC.Reserv/KoefSpOtpEd;

          var kk, Ost: double;
          var pMOL, pParty: comp;

          _LOOP DoRes where (( SpStep.cOwner == DoRes.cSpStep ))
            {
              Ost := 0.0;

              if (GetFirst FastFirstRow TekSaldo
                     where ((
                              SpStep.cMcUsl == TekSaldo.cMC   AND
                              DoRes.cPodr   == TekSaldo.cPodr AND
                              DoRes.cMOL    == TekSaldo.cMOL  AND
                              DoRes.cParty  == TekSaldo.cParty )) = tsOk)
                {
                   Ost  := (TekSaldo.Kol-TekSaldo.Res)/GetKoefOtpEdT(KatOtpEd.NRec, SpStep.NRec);
                   pMOL := DoRes.cMOL; pParty := DoRes.cParty;
                }
              else
                {
                  if (GetFirst FastFirstRow TekSaldo
                         where ((
                                  SpStep.cMcUsl == TekSaldo.cMC   AND
                                  DoRes.cPodr   == TekSaldo.cPodr AND
                                  DoRes.cMOL    == TekSaldo.cMOL  AND
                                  comp(0)       == TekSaldo.cParty )) = tsOk)
                    {
                      Ost  := (TekSaldo.Kol-TekSaldo.Res)/GetKoefOtpEdT(KatOtpEd.NRec, SpStep.NRec);
                      pMOL := DoRes.cMOL; pParty := 0;
                    }
                  else
                    {
                      if (GetFirst FastFirstRow TekSaldo
                             where ((
                                      SpStep.cMcUsl == TekSaldo.cMC   AND
                                      DoRes.cPodr   == TekSaldo.cPodr AND
                                      comp(0)       == TekSaldo.cMOL  AND
                                      comp(0)       == TekSaldo.cParty )) = tsOk)
                        {
                          Ost  := (TekSaldo.Kol-TekSaldo.Res)/GetKoefOtpEdT(KatOtpEd.NRec, SpStep.NRec);
                          pMOL := 0; pParty := 0;
                        }
                    }
                }

              if (Ost > 0.0)
                {
                  kk := DoRes.Kol / KoefSpOtpEd;

                  if (KatOtpEd.Diskret = 1)
                    {
                      DoCorrentTaraKol(kk, if(trunc(NeOtgr) <> NeOtgr, trunc(NeOtgr) + 1, NeOtgr));
                      DoCorrentTaraKol(kk, Ost);
                    }

                  insert TNalF set
                    TNalF.NRec    := SpStep.nRec,
                    TNalF.cMC     := SpStep.cMCUsl,
                    TNalF.cPodr   := DoRes.cPodr,
                    TNalF.cMOL    := pMOL,
                    TNalF.cParty  := pParty,
                    TNalF.KolF    := kk,
                    TNalF.cSpStep := SpStep.nRec;

                  NeOtgr := NeOtgr - kk;
                }
            }
        }
      else // позиция спецификации не является тарой
        {
          // накладные на отпуск минут возврат
          OtgrKol := GetOtgr;
          // нераспределенное и незарезервированное количество
          NeOtgr  := SpStep.Kol - OtgrKol - SpStep.Reserv;

          if (NeOtgr <= 0.0)
            Continue;

          // перенос уже существующего резерва в TNalf
          if (PartResRaspr = 1)
            _LOOP DoRes
              {
                var Ost: double;  Ost := 0.0;

                if (GetFirst FastFirstRow TekSaldo
                       where ((
                                SpStep.cMcUsl == TekSaldo.cMC   AND
                                DoRes.cMOL    == TekSaldo.cMOL  AND
                                DoRes.cPodr   == TekSaldo.cPodr AND
                                DoRes.cParty  == TekSaldo.cParty )) = tsOk)
                  Ost := (TekSaldo.Kol-TekSaldo.Res)/GetKoefOtpEdT(KatOtpEd.NRec, SpStep.NRec)+DoRes.Kol;

                insert TNalF set
                  TNalF.NRec    := SpStep.nRec,
                  TNalF.cMC     := SpStep.cMCUsl,
                  TNalF.cMOL    := DoRes.cMOL,
                  TNalF.cPodr   := DoRes.cPodr,
                  TNalF.cParty  := DoRes.cParty,
                  TNalF.Kol     := Ost,
                  TNalF.KolF    := DoRes.Kol,
                  TNalF.cSpStep := SpStep.nRec;
              }
        }

      // просмотр остатков
      _LOOP TekSaldo
        {
          if Not AllowedToReservOnParty
            Continue;

          if NOT CheckRestrictRazrez(TekSaldo.cPodr, TekSaldo.cMOL, TekSaldo.cParty)
            Continue;

          if ((SpStep.cOwner <> SpStep.nRec) AND
              (GetFirst FastFirstRow TNalF
                  where (( SpStep.cMcUsl   == TNalF.cMC   AND
                           TekSaldo.cMOL   == TNalF.cMOL  AND
                           TekSaldo.cPodr  == TNalF.cPodr AND
                           TekSaldo.cParty == TNalF.cParty )) = tsOk))
            {
              TNalF.Kol := (TekSaldo.Kol - TekSaldo.Res)/GetKoefOtpEdT(KatOtpEd.NRec, SpStep.NRec);

              if (GetFirst FastFirstRow DoRes
                     where (( TNalF.cPodr   == DoRes.cPodr  AND
                              TNalF.cMol    == DoRes.cMol   AND
                              TNalF.cParty  == DoRes.cParty AND
                              TNalF.cSpStep == DoRes.cSpStep )) = tsOk)
                TNalF.Kol := TNalF.Kol+DoRes.Kol;

              update current TNalF;
            }
          else
            {
              if (GetFirst FastFirstRow TNalF
                     where (( SpStep.cMcUsl   == TNalF.cMC   AND
                              TekSaldo.cMOL   == TNalF.cMOL  AND
                              TekSaldo.cPodr  == TNalF.cPodr AND
                              TekSaldo.cParty == TNalF.cParty )) = tsOk)
                {
                  var kk: double; kk := TNalF.KolF;

                  TNalF.Kol  := (TekSaldo.Kol - TekSaldo.Res)/GetKoefOtpEdT(KatOtpEd.NRec, SpStep.NRec);
                  TNalF.KolF := if ( (NeOtgr + TNalF.KolF) <= TNalF.Kol,
                                     NeOtgr + TNalF.KolF,
                                     if ( TNalF.Kol >= TNalF.KolF, TNalF.Kol, TNalF.KolF ) );

                  DoCorrentTaraKol(TNalF.KolF, TNalF.Kol);

                  if (update current TNalF = tsOk)
                    NeOtgr := NeOtgr + (kk - TNalF.KolF);
                }
              else
                {
                  // проверка на доступность для резервирования МЦ (Управление качеством)
                  if (not oTransferDoRes.NotDostupForReserv(SpStep.cMCUsl,
                                                            TekSaldo.cPodr,
                                                            TekSaldo.cMOL,
                                                            TekSaldo.cParty))
                    {
                      ClearBuffer(#TNalF);

                      TNalF.NRec    := SpStep.nRec;
                      TNalF.cMC     := SpStep.cMCUsl;
                      TNalF.cMOL    := TekSaldo.cMOL;
                      TNalF.cPodr   := TekSaldo.cPodr;
                      TNalF.cParty  := TekSaldo.cParty;
                      TNalF.Kol     := (TekSaldo.Kol - TekSaldo.Res)/GetKoefOtpEdT(KatOtpEd.NRec, SpStep.NRec);
                      TNalF.KolF    := if (NeOtgr <= TNalF.Kol, NeOtgr, TNalF.Kol);

                      DoCorrentTaraKol(TNalF.KolF, TNalF.Kol);

                      TNalF.cSpStep := SpStep.nRec;

                      if (insert current TNalF = tsOk)
                        NeOtgr := NeOtgr - TNalF.KolF;
                    }
                }
            }
        }

      case ShowRaspr of
      //---------------
        0:
        {
          if ((NeOtgr > 0.0)
              AND not (boGetTune('Reserv.ReservWithoutOst') OR boGetTune('Reserv.PartReserv'))
              AND boGetTune('Oper.AvtoRaschKolMc'))
            {
              Message('Свободный остаток '+KatMC.Name+' меньше требуемого!', Information);
              Continue;
            }

          Flag := TRUE;
        }
      //---------------
      else
        {
          Flag := TRUE;
          if ((ShowRaspr = 1) OR (RecordsInTable(#TNalF) > 1))
            Flag := (RunInterface('GetNalF', SpStep.cMCUsl,
                                            SpStep.Kol+0,
                                            BaseDoc.dDoc,
                                            SpStep.Nrec,
                                            SpStep.Kol-OtgrKol, // неотгружено
                                            word(1)) <> cmCancel);
        }
      //---------------
      end;

      if Flag
        DoChangeReservInOneSpStep;
    }

  PopBounds(if(wGetTune('Reserv.PriorParty') = 1, tbTekSal02, tbTekSal01));

  if (GetFirst SpStep = tsOk) {};
  RescanPanel(#SpStep);

  epAfterMakeReserv(BaseDoc.nRec);
}

//******************************************************************************

Create view LT111;

//******************************************************************************

Function MakeReserv: boolean;
{
  MakeReserv := FALSE;

  if not UpdateTable
    Exit;

  ResIs := FALSE;

  proc20;

  MakeReserv := ResIs;

  if ResIs
  AND (wGetTune('Reserv.PrSchSklad') <> 0)
  AND boGetTune('Reserv.Sklad')
    {
      StartNewVisual(vtNumericVisual, vfTimer, 'Проверка полноты резервирования ', 1);
      ResIs := FALSE;
      _LOOP SpStep
        if NextVisual
          if ( ( SpStep.Reserv < SpStep.Kol ) AND ( SpStep.PrMC = 1 ) )
            {
              ResIs := TRUE;
              Break;
            }

      StopVisual('', 0);

      if ( ResIs = TRUE) // есть незарезервированные позиции
        if (message('Произвести перенаправление резервов?', YesNo) = Yes)
          {
            delete all tNalF;
            ResIs := FALSE;
            _LOOP SpStep
              if (SpStep.Reserv < SpStep.Kol)
                if (RunInterface( 'ResNalF', SpStep.cOtpEd, SpStep.Kol-SpStep.Reserv,
                                  SpStep.cMCUSL, SpStep.Nrec, BaseDoc.cParty)<>cmCancel)
                  ResIs := TRUE;
                else
                  if (message('Прервать процесс перенаправления резервов?', YesNo) = Yes)
                    Break;

            if (ResIs = TRUE)
              {
                Proc14; // снятие резерва по текущему ДО

                _LOOP tnalF
                  {
                    PushPos(#BaseDoc);
                    ResetBounds(#BaseDoc);
                    if (GetFirst FastFirstRow BaseDoc
                                         where (( tNalF.cMol == BaseDoc.Nrec)) = tsOk)
                      {
                        ResetBounds(#SpStep);
                        if (GetFirst FastFirstRow SpStep
                                        where (( tNalF.cSpStep == SpStep.Nrec)) = tsOk)
                          {
                            SubResTov(tNalF.KolF * tNalF.Kol);  // с учетом коэфф пересчета
                            SpStep.Reserv := SpStep.Reserv - tNalF.KolF * tNalF.Kol;
                            update current spstep;
                          }

                        SetBounds(#SpStep);                 // снятие
                      }

                    SetBounds(#BaseDoc);
                    PopPos(#BaseDoc);
                  }

                Proc20;
             }
       }
    }

  if (GetFirst spstep = tsOk) {};
  RescanPanel(#SpStep);
}

//******************************************************************************

Function DoSpStepDeleteForSmeta: boolean;
{
  if (GetFirst SpStep where ((SpDocSmeta1.cSpec == SpStep.nRec)) = tsOk)
    {}

  if (GetFirst SpOtpEd where ((SpStep.cOtpEd == SpOtpEd.cOtpEd)) = tsOk)
    oDOTara.DeleteTara(SpStep.cStepDoc, SpStep.cOtpEd, SpStep.NRec, SpStep.KolSkl);

  SubResTov(SpStep.Reserv); // Снятие резерва по товару

  SubResRazrez;              // Снятие резерва по складу

  DelPosDORES;

  DelPosSpDocNal;

  oInsTblSource.DeleteSpEnviroment(toSpStep, SpStep.NRec);

  SetBounds(#SpStep);
  PopPos(#SpStep);

  DoSpStepDeleteForSmeta := oDOfuns.SpStep_Delete(SpDocSmeta1.cSpec) = tsOk;
}

//******************************************************************************

Function DoSpStepDelete: boolean;
{
  delete SpDocSmeta where (( coSpStep == SpDocSmeta.coTable and SpStep.nRec == SpDocSmeta.cSpec ));

  if (GetFirst SpOtpEd where ((SpStep.cOtpEd == SpOtpEd.cOtpEd)) = tsOk)
    oDOTara.DeleteTara(SpStep.cStepDoc, SpStep.cOtpEd, SpStep.NRec, SpStep.KolSkl);

  SubResTov(SpStep.Reserv);  // Снятие резерва по товару
  SubResRazrez;              // Снятие резерва по складу
  DelPosDORES;
  DelPosSpDocNal;

  oInsTblSource.DeleteSpEnviroment(toSpStep, SpStep.NRec);
  DoSpStepDelete := oDOfuns.SpStep_Delete(SpStep.nRec) = tsOk;

  oInsTblSource.DeleteSpEnviroment(toSpStep, SpStep.NRec);
}

//******************************************************************************

#include savedoc.fun

//******************************************************************************

Function DoBaseDocDelete(DelSoprDoc: boolean): boolean;
var
  SoprInt       : SoprDocObj4;
  wModeDeleteSopr: word;
{
  DoBaseDocDelete := FALSE;

  if boGetTune('Doc.Sell.NotEditDO')
    if ( IsValid(tnBaseFin) OR IsValid(tnKatSopr) )
      {
        Message('Редактирование документа-основания при наличии '+
                'сопроводительных или платежных документов запрещено настройкой'#13+
                GetTuneName('Doc.Sell.NotEditDO'), Information);
        Exit;
      }

  if ( not DelSoprDoc )
    {
      if ( RecordExists BaseFin = tsOk )
        if ( Message('По документу есть платежи.'#13'Продолжить удаление ДО?', YesNo + mfSwapButtons) <> cmYes )
          Exit;

    }
  else
    {
      if ( RecordExists BaseFin = tsOk )
        {
          Message('Удаление невозможно.'#13'По документу есть платежи.', Information);
          Exit;
        }

      if (IsValid(#KatSopr)) // По ДО есть сопроводительные документы
        {
          wModeDeleteSopr := 1;   // Удалить ДО и обнулить ссылки

          if (boGetTune('Oper.SynchrDONakl'))  // Синхронизировать данные в ДО и накладных
            {
              GetVipRef(SoprInt, 'SoprDoc');

              if (SoprInt.CanDeleteSoprDocumentOnBaseDoc(StepDoc.nRec))
                wModeDeleteSopr := 2;   // Удалить сопроводительные документы.
              else
                wModeDeleteSopr := 3;   // Удалять сопроводительные документы нельзя.
            }

          case wModeDeleteSopr of
          //---------------------
            1:
              {
                if (Message('По ДО № ' + BaseDoc.NoDoc + ' созданы сопроводительные документы.'#13 +
                            'Удалить ДО и ссылки на него в сопроводительных документах?',
                            YesNo + mfSwapButtons) <> cmYes)
                  Exit;
              }
          //---------------------
            2:
              {
                if (Message('По ДО № ' + BaseDoc.NoDoc + ' созданы сопроводительные документы.'#13 +
                            'Удалить ДО и сопроводительные документы?', YesNo + mfSwapButtons) = cmYes)
                  {
                    // Удаление сопроводительных документов
                    _LOOP KatSopr
                      SoprInt.DeleteSoprDocument(KatSopr.nRec);
                  }
                else
                  {
                    if (Message('Продолжить удаление ДО?', YesNo + mfSwapButtons) <> cmYes)
                      Exit;
                  }
              }
          //---------------------
            3:
              {
                if (Message('По ДО № ' + BaseDoc.NoDoc + ' созданы сопроводительные документы, ' +
                            'которые нельзя удалять.'#13 +
                            'Удалить только ДО?', YesNo + mfSwapButtons) <> cmYes)
                  Exit;
              }
          //---------------------
          end;
        }
    }

  StartNewVisual(vtRotateVisual, vfTimer, 'Удаление документа...', 1);

  if oDOfuns.CheckFinCanDelDO(BaseDoc.VidDoc, BaseDoc.NRec)
    {
      oDOfuns.DelRaznPlt(BaseDoc.NRec);

      var nextBaseDoc: comp;  nextBaseDoc := 0;

      piOFPOut.OnChangeBaseDoc(TBaseDoc(BaseDoc.buffer), cgCom_BaseDocDelete);
      NextVisual;

      PushPos(#BaseDoc);

      if (GetNext BaseDoc = tsOk)
        nextBaseDoc := BaseDoc.nRec
      else
        if (GetPrev BaseDoc = tsOk)
          nextBaseDoc := BaseDoc.nRec;

      PopPos(#BaseDoc);

      oSDfuns.DeleteSoprHoz(BaseDoc.NRec, typsoprhoz);

      // Удаление связей
      oInsTblSource.DeleteEnviroment(toBaseDoc, BaseDoc.NRec);

      iNextVisual('Удаление спецификации...'#13#3);

      While (GetFirst SpStep = tsOk)
      do
        {
          NextVisual;
          if not DoSpStepDelete
            Break;
        }

      iNextVisual('Обновление ссылок...'#13#3);

      While (GetFirst katsopr where (( stepdoc.nrec == katsopr.cstepdoc)) = tsOk)
      do
        {
          NextVisual;
          set katsopr.cstepdoc := 0;

          Update_Current_KatSopr;
        }

      NextVisual;

      delete safe SpGrSch;

      if delete current DocInfo <> tsOk
        { }

      iNextVisual('Удаление документа...'#13#3);

      oStatLog.StatLog_Delete(word(40), BaseDoc.nRec);

      DelLastNumDOnBaseDoc;

      oChkSchem.RemoveDocFromSpSchem(BaseDoc.nRec, typsoprhoz);

      if (BaseDoc.VidDoc = 201 OR BaseDoc.VidDoc = 1420)
        piOsReal.OnDeleteDoc(cgOsReal_DO, BaseDoc.nRec);

      oDOfuns.BaseDoc_Delete(BaseDoc.nRec);

      if (IsValid(#Pick2))
        delete current Pick2;

      if (nextBaseDoc <> 0)
        if (GetFirst BaseDoc
            where ((Comp(nextBaseDoc) == BaseDoc.NRec)) = tsOk)
          {}

      DoBaseDocDelete := TRUE;
    }

  StopVisual('', 0);
}

//******************************************************************************

Procedure PickcBuildingDO;
{
  var cbuilding: comp;
  var ch: boolean; ch := FALSE;

  if RunInterface(GetBuilding, cBuilding, 0, 0) = cmCancel
    Exit;

  if cBuilding = 0
    Exit;

  PushPos(#SpStep);

  _LOOP SpStep
    if SpStep.cUKS = 0
      {
        if (IsValid(#SpDocSmeta))
          {
            ch := TRUE;
            Continue;
          }

        SpStep.cUKS := cBuilding;
        if update current SpStep<>tsOK{};
      }

  if ch
    Message('Операция выполнена не для всех позиций из-за наличия сметных спецификаций.', Information);

  PopPos(#SpStep);
  RescanPanel(#SpStep);
}

//******************************************************************************

Procedure PickZatr;
{
  var cnr, cZatr: comp;
  var ch: boolean;        ch := FALSE;

  if (RunInterface(GetZatrForSp, cZatr) <> cmDefault)
    Exit;

  if (cZatr = 0)
    Exit;

  cnr := SpStep.nRec;

  _LOOP SpStep
    if (not IsValid(#SpecZatr))
      {
        if (not boGetTune('Oper.Smeta.StZatr'))
          if (IsValid(#SpDocSmeta))
            {
              ch := TRUE;
              Continue;
            }

        ClearBuffer(#SpecZatr);
        SpecZatr.coTable := coSpStep;
        SpecZatr.cAddSumTune := cZatr;
        SpecZatr.cUKS := SpStep.cUKS;
        insert current SpecZatr;
      }

  if ch
    Message('Операция выполнена не для всех позиций из-за наличия сметных спецификаций.', Information);

  if (GetFirst SpStep where ((cnr == SpStep.nRec)) = tsOk)
    { }

  RereadRecord(#SpStep);
}

//******************************************************************************
// По проекту для Метизного
//
Function GetKoefVolume1 : double;
{
  GetKoefVolume1 := 0;

  if (NOT ExistTune('Doc.ChTaraVolume.Used'))
    Exit
  else
    if (NOT boGetTune('Doc.ChTaraVolume.Used'))
      Exit;

  if (IsValid(#SaldTune)) AND (UpCase(Trim(SaldTune.Name)) = 'ТАРА')
    if (IsValid(#KatMC) AND IsValid(#KatOtpEd))
      if (GetFirst SpOtpEd where ((KatOtpEd.NRec == SpOtpEd.cOtpEd
                               AND SpecMTR.cObj  == SpOtpEd.cMCTara)) = tsOk)
        GetKoefVolume1 := SpOtpEd.Koef;
}

Function GetKoefVolume2 : double;
{
  GetKoefVolume2 := 0;

  if (NOT ExistTune('Doc.ChTaraVolume.Used'))
    Exit
  else
    if (NOT boGetTune('Doc.ChTaraVolume.Used'))
      Exit;

  if (IsValid(#SaldTune)) AND (UpCase(Trim(SaldTune.Name)) = 'ТАРА')
    if (IsValid(#KatMC))
      if (GetFirst KatOtpEd2 where ((word(1)    == KatOtpEd2.PrMC
                                 AND KatMC.NRec == KatOtpEd2.cMCUsl
                                 AND word(1)    == KatOtpEd2.Akt)) = tsOk)
        if (KatOtpEd2.NRec = KatOtpEd.NRec)
          {
            if (GetFirst KatOtpEd2 where ((word(1)    == KatOtpEd2.PrMC
                                      AND  KatMC.NRec == KatOtpEd2.cMCUsl
                                      AND  word(0)    == KatOtpEd2.Akt)) = tsOk)
              if (GetFirst SpOtpEd where ((KatOtpEd2.NRec == SpOtpEd.cOtpEd
                                      AND  SpecMTR.cObj   == SpOtpEd.cMCTara)) = tsOk)
                GetKoefVolume2 := SpOtpEd.Koef;
          }
        else
          if (GetFirst SpOtpEd where ((KatOtpEd2.NRec == SpOtpEd.cOtpEd
                                  AND  SpecMTR.cObj   == SpOtpEd.cMCTara)) = tsOk)
            GetKoefVolume2 := SpOtpEd.Koef;
}

Function GetKolTara : integer;
var koef : double;
{
  GetKolTara := 0;

  if (NOT ExistTune('Doc.ChTaraVolume.Used'))
    Exit
  else
    if (NOT boGetTune('Doc.ChTaraVolume.Used'))
      Exit;

  koef := GetKoefVolume1;

  if (koef = 0)
    Exit;

  GetKolTara := (SpStep.Kol / koef);

  if (Round(SpSopr.KolFact / koef, 6) > GetKolTara)
    GetKolTara := GetKolTara + 1;
}

//******************************************************************************

#include delproc.vpp
#include bdrip2.vpp

//******************************************************************************

#doc
Окно редактирования ДО на продажу
#end
Window  wVSchetZ 'Основание на продажу' escClose;
  Show at (, , 110, 31);

HandleEvent

cmInit:
{
  if (GetFirst SpStep = tsOk)
    {}

  if ( (not ExistTune('Doc.DEI.ViewDoc')) or (not UseDEI) )
    {
      SetFieldVisible(#KatDopEd1.ShortName, false);
      SetFieldVisible(#KatDopEd2.ShortName, false);
      SetFieldVisible(#SpDopEd1.Kol, false);
      SetFieldVisible(#SpDopEd2.Kol, false);
    }
  else
    case wGetTune('Doc.DEI.ViewDoc') of

      0:
        {
          SetFieldVisible(#KatDopEd1.ShortName, false);
          SetFieldVisible(#KatDopEd2.ShortName, false);
          SetFieldVisible(#SpDopEd1.Kol, false);
          SetFieldVisible(#SpDopEd2.Kol, false);
        }

      1:
        {
          SetFieldVisible(#KatDopEd1.ShortName, true);
          SetFieldVisible(#KatDopEd2.ShortName, false);
          SetFieldVisible(#SpDopEd1.Kol, true);
          SetFieldVisible(#SpDopEd2.Kol, false);
        }

      2:
        {
          SetFieldVisible(#KatDopEd1.ShortName, true);
          SetFieldVisible(#KatDopEd2.ShortName, true);
          SetFieldVisible(#SpDopEd1.Kol, true);
          SetFieldVisible(#SpDopEd2.Kol, true);
        }

    end;
}

cmDone:
{
  if (UpdateTable)
    SelectPanel(#BaseDoc);
  else
    {
      Abort;
      Exit;
    }

  oUKSfuns.JoinDO(BaseDoc.nRec);

  KillPick2;

  ResetBounds(tnPick2);

  _LOOP tmpPicked
    {
      ClearBuffer(tnPick2);
      Pick2.wList  := tmpPicked.wList;
      Pick2.PickNum := tmpPicked.PickNum;
      Pick2.pickkol := tmpPicked.pickkol;
      Pick2.cRec   := tmpPicked.cRec;
      insert current Pick2;
    }

  SetBounds(tnPick2);
  RereadRecord(tnBaseDoc);
}

cmInsert:
{
  _CanModify := TRUE;

  if NotEditpos(false)
    {
      Abort;
      Exit;
    }

  if (((_wFltBaseDoc AND 4) = 4) AND (sFltDescr <> CurDescr))
    {
      Message('Установлен фильтр по отличному от Вашего дескриптору.'#13+
              'Создание нового документа невозможно');
      Abort;
      Exit
    }
}


#ifdef __LIMIT__
cmLimits:
  RunInterface('ILimitIndents', 0, BaseDoc.Nrec);
#end //__LIMIT__

end;

//******************************************************************************

Procedure MyPass;
{
  Stop;               // чтобы не вызывалось дважды

  case CurTable of
  //--------------
    #BaseDoc:
      case CurWindow of
      //---------------
        wnMainWindow:   // если в главном окне - зайти в запись
          PutCommand(cmDefault)
      //---------------
        wDopAttr:       // если в расширенной информации - закрыть окно
          CloseWindow(wDopAttr)
      //---------------
        else            // иначе открыть расширенную информацию
          RunWindow(wDopAttr);
      //---------------
       end;
  //--------------
    #SpStep:
      case CurWindow of
      //---------------
        pwSpStep:       // если в расширенной информации - закрыть окно
          CloseWindow(pwSpStep);
      //---------------
        else            // если на бравзере спецификации - открыть окно расширенной информации
          {
            SetWindowHelpCtx(hcKouDocISpecSell, pwSpStep);

            oLinkMTR2Spec.SetObjParam( word(coSpStep)
                                     , SpStep.nRec
                                     , if( not EditDOPosEnabled(false, false) and if( not CanEditInClosePeriod(true)
                                                                                    , not CanEditInClosePeriod(false)
                                                                                    , true
                                                                                    )
                                         , 1
                                         , if( SpStep.cSpMC = 0
                                             , if( IsValid(#SmetaStroy)
                                                 , 2
                                                 , 0
                                                 )
                                             , 1
                                             )
                                         )
                                     );

            oLinkMTR2Spec.SelFormat(IsValid(#SpStep));

//            if (NOT IsProtected(#BaseDoc)) AND (NOT IsProtected(#SpStep))
//              SetModified(true); // чтобы сработал cmCheckRecord

            RunWindow(pwSpStep);
            SelectField(if (wGetTune('Pick.SortMC') = 0, #NamTovar, #Nomenkl));
            RescanPanel(#SpStep);
          }
      //---------------
      end;
  //--------------
  end;
}

//******************************************************************************

Function NewNotModified: boolean;
{
  NewNotModified := FALSE;

  if (IsNew)
    if (not IsModified)
      {
        NewNotModified := TRUE;
        Message('Переход невозможен, так как не заполнен документ.', OkButton);
      }
}

//******************************************************************************

Function NotEditDO: boolean;
{
  NotEditDO := FALSE;

  if (boGetTune('Doc.Sell.NotEditDO'))
    if (IsValid(tnBaseFin) OR IsValid(tnKatSopr))
      {
        NotEditDO := TRUE;
        Message('Редактирование документа-основания при наличии '+
                'сопроводительных или платежных документов запрещено настройкой'#13+
                GetTuneName('Doc.Sell.NotEditDO'), Information);
      }
}

//******************************************************************************

Function IsSlozhSkid: boolean;
{
  IsSlozhSkid := TRUE;

  if (wGetTune('Oper.AlgSkid') <> 1)
    {
      IsSlozhSkid := FALSE;
      Message('Работа со сложными скидками не предусмотрена в настройке'#13+
              GetTuneName('Oper.AlgSkid'), Information);
    }
}

//******************************************************************************

#include ShowKau.vpp

Function GetKAUField(pNum : integer) : string;
{
  GetKAUField := #ShowKau(if(pNum = 1, SaldTune.wObj, SaldTune.wKau[pNum - 1]), if(pNum = 1, SpecMTR.cObj, SpecMTR.cKau[pNum - 1]));
}

//******************************************************************************

Panel pnVSchet;
  Table BaseDoc;

Screen scVSchet;
  Show at (, , , 15) fixed_Y;

Fields
  BaseDoc.DesGr ('Дескриптор группы пользователей', hcSellM1DocDog, sci1378Esc): protect, QuickChoice;
  BaseDoc.Descr ('Дескриптор (идентификатор менеджера)', hcSellM1DocDog, sci1378Esc): protect, QuickChoice;
  BaseDoc.NoDoc ('Номер документа на продажу', hcKouDocFNum, sci178Esc);
  BaseDoc.dDoc  ('Дата выписки документа', hcKouDocFBegDate, sci178Esc): [10, 'DD/MM/YYYY'], Centered;
  BaseDoc.KolDn ('Количество дней действия документа', hcKouDocFPeriod, sci178Esc): Centered,
    {font = {BackColor = if(BaseDoc.KolDn = 0, ColorError, 0)}};
  BaseDoc.TipMoney ('Тип документа по отношению к денежной единице', hcKouDocFValTyp, sci1378Esc):
    [LIST 1 'в НДЕ', 'вал-НДЕ', 'валютный'], protect, Centered;
  KatNotes.Name ('Статус документа: его текущее состояние', hcKouDocFSost, sci1378Esc): protect, QuickChoice, Centered;
  BaseDoc.Name ('Примечания к документу-основанию на продажу', hcKouDocFNote, sci1378Esc);
  KatOrgDogRole: skip;
  KatOrgDogName: skip,
    {Font = {Bold = TRUE}};
  KatOrg.Name ('Наименование организации-плательщика', hcKouDocFOrg, sci1378Esc): protect, QuickChoice,
    {Font = {BackColor = if (BaseDoc.cOrg = 0, ColorNeed, 0)}};
  KatBank.Name ('Наименование банка плательщика', hcKouDocFBank, sci1378Esc): protect, QuickChoice;
  sGetTune('KatOrg.FldView.MFO'): skip;
  KatBank.MFO1 ('Код МФО/БИК банка', hcKouDocFMFO, sci1378Esc): protect, QuickChoice;
  KatBank.SchET1 ('Расчетный счет плательщика', hcKouDocFSch1, sci1378Esc): protect;
  SklOtgr ('', hcSkladFOstSklad, sci1378Esc): skip;
  KatPodr.Name ('Наименование склада отгрузки', hcSkladFOstSklad, sci1378Esc): protect, QuickChoice;
  KatBank.MFO2 ('Код МФО/БИК банка', hcKouDocFRKC, sci1378Esc): protect;
  KatBank.SchET2 ('Расчетный счет плательщика', hcKouDocFSch2, sci1378Esc): protect;
  BaseDoc.Summa ('Сумма по документу', , sci178Esc): [brForSumma, '\2p[|-]36`666`666`666`666.88'], skip;
  SkidFunc ('Правило учета скидки для ДО', hcKouDocFSkidkaSum, sci178Esc): skip, Centered, {font = {italic = TRUE}};
  BaseDoc.Skidka ('Скидка к сумме по документу', hcKouDocFSkidkaSum, sci1378Esc): [brForSumma]
        , {Font = {Color = if (IsNeedReCalcSloznSkid, ColorError, 0)}};
  SkidVar ('Учет скидки в суммовой либо %-ной величине', hcKouDocFSkidkaTyp, sci1378Esc): protect, PickButton;
  KolKompl ('Скидка к сумме по документу', hcKouDocFSkidka, sci1378Esc): [brForSumma], skip;
  BaseDoc.Nds ('Сумма налогов', hcKouDocFNDS, sci1378Esc): [brForSumma, '\2p[|-]36`666`666`666`666.88'], protect, PickButton;
  BaseDoc.Total ('Сумма к оплате с учетом процента к курсу', hcKouDocFDogSum, sci178Esc): [brForSumma, '\2p[|-]36`666`666`666`666.88'];
  SimVolB ('Базовая валюта документа', hcKouDocFDogVal, sci1378Esc): protect;
  NakFin2: skip;
  BaseDoc.VhodNal ('Входимость налогов в цену МЦ/услуги', hcKouDocFNalog, sci1378Esc):
    [LIST 1 'входят', 'не входят'], protect, Centered;
  ProcTxt: skip;
  BaseDoc.DopProc ('Процент к курсу на момент оплаты', hcKouDocFDopProc, sci178Esc): [6.2];

  myField1 : skip;
  HozOperViewName ('Типовая хозяйственная операция',,sci1378Esc): protect;

  KatPayment.Name ('Форма расчета', hcGTDPaymentField, sci1378Esc): protect, QuickChoice;
  BaseDoc.TaraVoz         ('Тара', hcKouDocFTara, sci13Esc):
    [LIST 1 'возвратная', 'невозвратная'], protect;
#ifdef __LIMIT__
  Poluch.Name   ('Подразделение-получатель', hcNoContext, sci1378Esc): protect;
  KatActiv.Name ('Вид деятельности', hcNoContext, sci1378Esc): protect;
  BaseDoc.wMode ('Превышение лимита', hcNoContext, sci1378Esc): [LIST 0 'запрещено', 'разрешено'], protect;
#end //__LIMIT__
  BaseDoc.TypeDoc ('тип документа', hcSellM1DocDog, sci1378Esc): [List 'на маршрут', 'повагонная'], protect;
  BDMoveCell.Name  ('Единица подвижного состава', hcKouDocMoveCell, sci1378Esc): protect, QuickChoice;
  BaseDoc.NVagon   ('Номер единицы подвижного состава', hcKouDocFVagon, sci1378Esc);
Buttons
  cmValFld1  , , , 'Накладные/акты по документу',          hcKouDocBNakl,  sci178Esc;
  cmValFld2  , , , 'Платежные документы по документу',     hcKouDocBPlat,  sci178Esc;
  cmValFld20 , , , 'Резервирование товаров по ДО',         hcKouDocBRezerv, sci178Esc;
  cmValFld13 , , , 'Просмотр налогов',                     hcKouDocFNDS,   sci178Esc;
  cmTextWind , , , 'Произвольное примечание',              hcKouDocBPrim,  sci178Esc;
  cmValue6   , , , 'Ввод спецификации набором товаров',    hcKouDocBCompl, sci178Esc;
  cmValue5   , , , 'Вызов окна с транспортной информацией', hcKouDocBTTI,   sci178Esc;
  cmAttrib   , , , 'Расширенная информация к документу',   hcKouDocBExt,   sci178Esc;
<<
 Группа&Деск.&Номер      &  Выписан  &На срок& Тип по валюте &Текущий статус
 .@@@@@@.@@@@@.@@@@@@@@@@@.@@@@@@@@@@@.@@@дней.@@@@@@@@@@@@@@@.@@@@@@@@@@@@@@  <.Сопроводительные ~д~окументы.>
`Примечания`.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 .@@@@@@@@@@@@@@@@@@@@@.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@  <.   Плате~ж~и по документу   .>
`Плательщик`.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
`Банк`.@@@@@@@@@@@@@@@@@@@@@@@@@.@@@@@@@@@@.@@@@@@@@@@`Р/с`.@@@@@@@@@@@@@@@@@  <.      Резервирование      .>
 .@@@@@@@@@@@@@@@@@@.@@@@@@@@@@@@@@@@@@@@@@.@@@@@@@@@@     .@@@@@@@@@@@@@@@@@
`Стоимость позиций`.@@@@@@@@@@@@@@@@`Скидка`.@@@@@@@@@.@@@@@@@@@@@.@@@@.@@@@@  <.  Налоги  .>  <.Примечание.>
`Сумма налогов`    .@@@@@@@@@@@@@@@@
`Сумма к оплате`   .@@@@@@@@@@@@@@@@`в`.@@@@@@@ .@@@@@@@@@@@@@@@@@@@@@@@@@@@@  <.       Продать набор      .>
`Налоги`.@@@@@@@@@`в цену позиций`      .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ .@@@@@
 .@@@@@@@@@.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@  <.Товарно-трансп. информация.>
`Форма расчета`.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@`Тара`.@@@@@@@@@@@@@@@@
#ifdef __LIMIT__
`Получатель`                       `Вид деятельности`      `Превышение лимита`
 .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ .@@@@@@@@@@@@@@@@@@@@@@ .@@@@@@@@@@@@@@@@
#end
`Транспортировка`.@@@@@@@@@@`Единица подвижного состава`.@@@@@@@@@@@@@@@@@@@@  <.  Расширенная информация  .>
                            `Номер единицы подв.состава`.@@@@@@@@@@@@@@@@@@@@
>>
end; // Screen

//******************************************************************************

HandleEvent

cmPositionChanged:
  { // проверка возможности редактирования записи
    IsNeedReCalcSloznSkid := FALSE;

    if ( CurWindow = wVSchetZ )
      _CanModifyQuery := oSDfuns.CanModifyDocument(BaseDoc.NRec, typsoprhoz, TRUE);

    _CanModify := _CanModifyQuery;

    var NeedProtect: boolean;

    NeedProtect := FALSE;

    if ( Not EditDOPosEnabled(FALSE, FALSE) )
      NeedProtect := TRUE
    else
      if (boGetTune('Doc.Sell.NotEditDO'))
        if (IsValid(tnBaseFin) OR IsValid(tnKatSopr))
          NeedProtect := TRUE;

    ProtectRecord(#BaseDoc, NeedProtect);
    ProtectRecord(#StepDoc, NeedProtect);
    ProtectRecord(#SpStep , NeedProtect);

    SetCommandEnabled(cmValFld20     , BaseDoc.Status = 2);
    SetCommandEnabled(cmBuhCalculator, BaseDoc.Status = 2);
  }

cmSetCurField:
  case Target of
  //------------
    #BaseDoc.Total:
      OldTotal := BaseDoc.Total;
  //------------
    #KatOrg.Name:
      if (BaseDoc.cOrg = 0)
//        if (CurWindow > 0)
        if boGetTune('Pick.AutoPickinInterface')
          PutCommand(cmPick);
  //------------
    #KatPayment.Name:
      if ( not IsValid ( tnKatPayment ))
        if (CurWindow > 0) AND boGetTune('Pick.AutoPickinInterface')
          PutCommand(cmPick);
  //------------
    #BaseDoc.TypeDoc:
      OldTypeDoc := BaseDoc.TypeDoc;
  //------------
    #BaseDoc.NVagon:
      OldNVagon := BaseDoc.NVagon;
  //------------
  end;

cmPass:
  MyPass;

cmDelOnProtect:
  case CurField of
  //--------------
    #SimVolB:
      {
        if ((BaseDoc.TipMoney <> 1) AND (coGetTune('BaseCurrency') = 0))
          {
            ShowTune('Не установлена базовая валюта в настройке!', 'BaseCurrency');
            Abort;
            Exit;
          }

        var cVal_Old: comp;
        cVal_Old := BaseDoc.cVal;

        var CrossCurce: double;

        set BaseDoc.cVal := if (TipMoney <> 1, coGetTune('BaseCurrency'), 0);

        BVal := BaseDoc.cVal;

        BaseDoc.ValCurse := 0;
        BaseDoc.dValCurse := 0;

        StrCurse := 'Курс на '+string(BaseDoc.dValCurse) + ' за 1 ' + SimVolB;

        if (IsValid(tnSpStep) AND (cVal_Old <> BaseDoc.cVal))
          if (message('Пересчитать цены по документу?',
                      YesNo+mfSwapButtons) = yes)
            {
              if not (boGetTune('Doc.Sell.CrossCurseDO'))
                ModPriceNewVal(BaseDoc.nRec, cVal_Old, BVal);
              else
                if (RunDialog('GetCrossCurse', CrossCurce) = cmCancel)
                  ModPriceNewVal(BaseDoc.nRec, cVal_Old, BVal)
                else
                  ModPriceNewVal2(BaseDoc.nRec, BVal, CrossCurce);

              GetTotalSkid(false);
            }

        Abort;
      }
  //--------------
    #KatPodr.Name:
      if (BaseDoc.cParty <> 0)
        if IsValid(#SpStep)
          {
            var wasres: boolean; wasres := FALSE;
            PushPos(#SpStep);

            _LOOP SpStep
              if SpStep.Reserv > 0
                {
                  wasres := TRUE;
                  Break;
                }

            PopPos(#SpStep);

            if wasres
              {
                Message('В спецификации есть позиции с резервом - склад отгрузки убирать нельзя!', Warning+CancelButton);
                Abort;
              }
          }
  //--------------
    #KatPayment.Name:
      {
        BaseDoc.cPayment := 0;
        if (IsValid(#SpStep))
          GetTotalSkid(false);
      }
  //--------------
    #KatOrg.Name,
    #KatNotes.Name,
    #KatNotes.sName:
      Abort;
  //--------------
    #BDMoveCell.Name:
      {
        BaseDoc.cCellVal := 0;
        AllSpStepCellVal(3);
        set BaseDoc.cTransp  := 0;

        BaseDoc.nVagon := '';
        BaseDoc.cNMoveCell := 0;
        RedrawPanel(#BaseDoc);
      }
  //--------------
    #BaseDoc.nVagon:
      {
        set BaseDoc.nVagon := '';
        set BaseDoc.cNMoveCell := 0;
        set BaseDoc.cTransp  := 0;
        RedrawPanel(#BaseDoc);
        Stop;
      }
  //--------------
    #BaseDoc.skidka:
      {
        BaseDoc.VhSkid := 1;             // установить скидку в % (ПИР 2.237)
        Set BaseDoc.Skidka := 0;
        if (IsValid(#SpStep))
          GetTotalSkid(false);
      }
  //--------------
#ifdef __HozOperViewName__
    #HozOperViewName :
      {
        if ( UpDateTable )
        {
          ReReadRecord(#BaseDoc);

          iTxoBind.ResetServer;
          iTxoBind.UnBind(SoprHoz.bufferp);

          iTxoBind.ProcessProtokol;
          ReReadRecord;
        }
      }
#end

  end;

cmNullStep:
  {
    dOplMax  := 0;
    dOplFact := 0;
    cDogAgr  := 0;
    dIzvMax  := 0;
    dIzvFact := 0;
    cShtrafP := 0;
    dOtgr    := 0;
    dZabor   := 0;
    cShtrafG := 0;
    Nstep    := '1';

    StepDoc.Status := BaseDoc.Status;
  }

cmCheckField:
  case CurField of
  //--------------
    #BaseDoc.TaraVoz:
      {
        if (IsNew)
          UpdateTable;

        if (old_PrVoz <> BaseDoc.TaraVoz)
          {
            PushPos(#SpStep);

            _LOOP SpStep
              if (SpStep.PrVoz <> word(0))
                {
                  SpStep.PrVoz := BaseDoc.TaraVoz;
                  update current SpStep;

                  ServtObj1.UpdatePrVozTara(SpStep.NRec);

                  if (SpStep.PrVoz = 2)
                    SpStep.ManualTax := 0;
                }

            PopPos(#SpStep);

            GetTotal(false);

            old_PrVoz := BaseDoc.TaraVoz;
          }
      }
  //--------------
    #BaseDoc.NoDoc:
      {
         var lNoDoc : word;

         lNoDoc := if (ExistTune('Doc.Sell.DO.NoDoc'), wGetTune('Doc.Sell.DO.NoDoc'), 6);

         set BaseDoc.Nodoc := LPadCh(trim(BaseDoc.Nodoc), '0', lNoDoc);

         if (BaseDoc.Nodoc = LPadCh('0', '0', lNoDoc))
           { Message('Не задан номер документа.'#13+
                     'Определите значение поля или удалите запись.', CancelButton);
              Abort;
           }

         var pr: boolean;
         var NoDoc_New: string[20];
         var NRecDO: comp;
         var YearDoc_New: word;

         if (wGetTune('Oper.UniqNoDOsell') = 0)
           Exit;

         NRecDO      := BaseDoc.nRec;
         NoDoc_New   := BaseDoc.NoDoc;
         YearDoc_New := BaseDoc.YearDoc;

         PushPos(#BaseDoc);

         pr := FALSE;
         if (wGetTune('Oper.UniqNoDOsell') = 1) // во всем диапазоне дат
           {
             if (GetFirst BaseDoc
                    where (( word(201) == BaseDoc.VidDoc AND
                             NoDoc_New == BaseDoc.NoDoc      )) = tsOk)
               {
                 if (BaseDoc.nRec = NRecDO)
                   {
                     if (GetNext BaseDoc
                         where (( word(201) == BaseDoc.VidDoc AND
                                  NoDoc_New == BaseDoc.NoDoc      )) = tsOk)
                       pr := TRUE;
                   }
                 else
                   pr := TRUE;

                 if pr Message('Документ-основание с таким номером уже существует!');
               }
           }
         else
           if (GetFirst BaseDoc
                  where (( word(201)   == BaseDoc.VidDoc  AND
                           YearDoc_New == BaseDoc.YearDoc AND
                           NoDoc_New   == BaseDoc.NoDoc    )) = tsOk)
             {
               if (BaseDoc.nRec = NRecDO)
                 {
                   if (GetNext BaseDoc
                       where (( word(201)   == BaseDoc.VidDoc  AND
                                YearDoc_New == BaseDoc.YearDoc AND
                                NoDoc_New   == BaseDoc.NoDoc    )) = tsOk)
                     pr := TRUE;
                 }
               else
                 pr := TRUE;

               if pr Message('Документ-основание с таким номером в этом году уже существует!');
             }

         PopPos(#BaseDoc);
         if pr
           Abort;
      }
  //--------------
    #BaseDoc.dDoc:
      {
        var TmpBool_2: boolean;  TmpBool_2 := FALSE;

        if ( not CanEditInClosePeriod(false) )
          set BaseDoc.dDoc := StrToDate(OldFieldValue, 'DD/MM/YYYY');

        PushPos(#SpStep);

        _LOOP SpStep
          {
            if (SpStep.SrokRes<>ZeroDate)
             if (not TmpBool_2)
              if (SpStep.SrokRes < BaseDoc.dDoc)
                TmpBool_2 := TRUE
            SpStep.dDoc := BaseDoc.dDoc;
            update current SpStep;
          }

        PopPos(#SpStep);

        BaseDoc.YearDoc := Year(BaseDoc.dDoc);
        BaseDoc.dEnd := Add_Day(BaseDoc.dDoc, BaseDoc.KolDn);

        if ( BaseDoc.dDoc <> ZeroDate ) AND not IsNew AND not IsValid(#Dogovor)
          {
            if ( wGetTune('Oper.Sell.DO.dOplMaxDef') <> 0 )
              if ( Message('Изменить поле "Оплатить до" в соответствии с настройкой?'#13#13
                         + GetTuneName('Oper.Sell.DO.dOplMaxDef'), Confirmation + YesNo) = cmYes )
                set StepDoc.dOplMax := Add_Day(BaseDoc.dDoc, wGetTune('Oper.Sell.DO.dOplMaxDef'));

            if ( wGetTune('Oper.Sell.DO.dOtgrDef') <> 0 )
              if ( Message('Изменить поле "Доставить до" в соответствии с настройкой?'#13#13
                         + GetTuneName('Oper.Sell.DO.dOtgrDef'), Confirmation + YesNo) = cmYes )
                set StepDoc.dOtgr := Add_Day(BaseDoc.dDoc, wGetTune('Oper.Sell.DO.dOtgrDef'));
          }

        if ((BaseDoc.TipMoney > 1) AND
            (BaseDoc.dValCurse = Date(0, 0, 0)) AND
            (BaseDoc.cOrg <> comp(0)))
          if (UpDateTable)
            GetTotalSkid(false);

        if (TmpBool_2)
          Message('Дата выписки документа превышает срок действия резерва по позиции спецификации.', Information);
      }
  //--------------
    #BaseDoc.KolDn:
      {
        BaseDoc.YearDoc := Year(BaseDoc.dDoc);
        BaseDoc.dEnd := Add_Day(BaseDoc.dDoc, BaseDoc.KolDn);
      }
  //--------------
    #BaseDoc.Total  :
      {
        if (VhSkid = 1)
          set Skidka := 100 * (1-(Total * (1-Skidka / 100)) / OldTotal);
        else
          set Skidka := Skidka + (OldTotal-Total);

        if (IsNew)
          if not UpdateTable
            {
              BaseDoc.Total := 0;
              Skidka := 0;
              exit;
            }

        GetTotalSkid(false);
      }
  //--------------
    #BaseDoc.Skidka:
      if (IsValid(#SpStep))
        GetTotalSkid(false); // пересчет всех позиций
  //--------------
    #BaseDoc.TipMoney:
      if (IsValid(tnSpStep)) AND (BaseDoc.TipMoney <> word(OldFieldValue))
        {
          Message('Изменение типа документа возможно только до ввода позиций!', CancelButton + Information)
          set BaseDoc.TipMoney := word(OldFieldValue);
          Abort;
        }
      else
        {
          if NOT CheckAndSetCurrency
            {
              set BaseDoc.TipMoney := word(OldFieldValue);
              Abort;
              Exit;
            }

          #include rsv.vpp // изменение видимости полей

          oDOfuns.SetRoundFormat(tipDO, BaseDoc.cVal <> 0);
          RescanPanel(#BaseDoc);
          RescanPanel(#SpStep);
        }
  //--------------
    #BaseDoc.VhodNal:
      if (IsValid(tnSpStep)) AND (BaseDoc.VhodNal <> word(OldFieldValue))
          if (message('Документ-основание содержит спецификацию!'#13+
                      'Вы действительно хотите изменить входимость '+
                      'налогов в цену МЦ/услуги?', YesNo+mfSwapButtons) = cmYes)
            GetTotalSkid(false);
          else
            set BaseDoc.VhodNal := word(OldFieldValue);
  //--------------
    #BaseDoc.TypeDoc:
      BDTypeDoc(OldTypeDoc);
  //--------------
    #BaseDoc.NVagon:
      if ( BaseDoc.NVagon <> OldNVagon )
        AllSpStepCellVal(2);
  //--------------
  end; // case CurField

cmPick:
  case CurField of
  //--------------
    #BaseDoc.Nds: // вывод налогов по документу
      ShowNalogsDO;
  //--------------
    #BaseDoc.Descr:
      RunInterface('GetDescr', BaseDoc.Descr, BaseDoc.DesGr, word(0));
  //--------------
    #BaseDoc.DesGr:
      RunInterface('GetGrDescr', BaseDoc.DesGr, FALSE, FALSE, comp(0));
  //--------------
    #KatPodr.Name:
      {
        var cNewSklad: comp; cNewSklad := 0;

        if ( wGetTune('Reserv.PrSchSklad') = 2 ) AND ExistTune('Reserv.DO_Sklad_Enabled')
          if ( wGetTune('Reserv.DO_Sklad_Enabled') > 0 )
            if ExistTune('ResRestrict.cSklad')
              if ( coGetTune('ResRestrict.cSklad') <> 0 )
                {
                  cNewSklad := coGetTune('ResRestrict.cSklad');
                  ShowTune('Установлен склад из настройки', 'ResRestrict.cSklad');
                }

        if ( cNewSklad = 0 )
          {
            cNewSklad := BaseDoc.cParty;

            if (RunInterface('GetSklad', cNewSklad) = cmCancel)
              Exit;
          }

        if (cNewSklad <> BaseDoc.cParty) AND (cNewSklad <> 0)
          {
            case wGetTune('Reserv.PrSchSklad') of
              1:
                {
                  if ((BaseDoc.cParty <> 0) AND ResDef)
                    proc14;  // снятие резервов
                }
              2:
                {
                  if ResDef
                    proc14;  // снятие резервов
                }
            end;

            set BaseDoc.cParty := cNewSklad;

            if boGetTune('Reserv.SchReserv')  //автоматическое резервирование?
              if IsValid(#SpStep)
                proc20; // резервирование

            if ( RecordsInTable(#SklOst) = 0 )
              Message('Нет информации о наличии МЦ на складах!'#13+
                      'Выполните "Расчет текущих остатков"!', Warning + OkButton);
          }
      }
  //--------------
    #BaseDoc.Name:
      if (BaseDoc.VidDoc = 1420)
        RunInterface('GetBDName', word(1420), BaseDoc.Name)
      else
        RunInterface('GetBDName', word(201), BaseDoc.Name);
  //--------------
    #BaseDoc.skidka:
      if (RunInterface('GetSkid', comp(0), curssumv) <> cmCancel)
        {
          BaseDoc.VhSkid := 1;             // установить скидку в % (ПИР 2.237)
          Set BaseDoc.Skidka := curssumv;
          if (IsValid(#SpStep))
            GetTotalSkid(false);
        }
  //--------------
    #SkidVar:
      {
        set BaseDoc.VhSkid := if (BaseDoc.VhSkid = 1, 2, 1)
        if (Abs(BaseDoc.Skidka) > 0.00001)
          {
            set BaseDoc.Skidka :=
              if (BaseDoc.VhSkid = 1,           // будет - поцент (было-сумма)?
                   BaseDoc.Skidka / (BaseDoc.Summa + BaseDoc.Skidka) * 100,
                   BaseDoc.Summa / ((1 - BaseDoc.Skidka/100)) - BaseDoc.Summa);

            if (IsValid(#SpStep))
              GetTotalSkid(false);
          }
      }
  //--------------
    #SimVolB:
      {
        var cVal_Old: comp;  cVal_Old := BaseDoc.cVal;

         if (TipMoney <> 1)
           ChangeCurseVal;
         else
           {
             Message('Для данного типа документа базовая валюта не предусмотрена!', Confirmation);
             Stop;
           }
      }
  //--------------
    #KatPayment.Name:
      if RunInterface('GetPayment', BaseDoc.cPayment) <> cmCancel
        if (IsValid(#SpStep))
          GetTotalSkid(false);
  //--------------
    #BDMoveCell.Name:
      if (RunInterface ('GetMoveCellMC', BaseDoc.cCellVal) <> cmCancel)
        {
          BaseDoc.cCellVal := BaseDoc.cCellVal;
          if (Vagon.cMoveCell <> BaseDoc.cCellVal)
            {
              set BaseDoc.cNMoveCell := 0;
              set BaseDoc.nVagon := '';
              set BaseDoc.cTransp  := 0;
            }

          if (UpDate current BaseDoc = tsOk)
            AllSpStepCellVal(1);
        }
  //--------------
    #BaseDoc.nVagon:
      {
        var cEdRec: comp;  cEdRec := if ( IsValid(#BDMoveCell), BDMoveCell.nRec, 0);

        if (RunInterface('GetVagon', 3, BaseDoc.cNMoveCell, comp(0), cEdRec, comp(0)) <> cmCancel)
          {
            set BaseDoc.cNMoveCell := BaseDoc.cNMoveCell;
            set BaseDoc.nVagon     := Vagon.Num;
            set BaseDoc.cCellVal   := Vagon.cMoveCell;
            set BaseDoc.cTransp    := Vagon.cTransp;
            if (UpDate current BaseDoc = tsOk)
              AllSpStepCellVal(1);
          }
      }
  //--------------
#ifdef __LIMIT__
    #KatActiv.Name,
    #Poluch.Name:
      {
        if (CurField = #KatActiv.Name)
          RunInterface('IActivity', cgiPick, BaseDoc.cAnalit[1]);
        else
          RunInterface('GetAnyPodr', BaseDoc.cAnalit[2], word(0));

        if (BaseDoc.cAnalit[1] <> 0) AND (BaseDoc.cAnalit[2] <> 0)
          BaseDoc.wState := 1;
        else
          BaseDoc.wState := 0;
      }
#end //__LIMIT__
  //--------------
    #include dokontr.vpp
  //--------------
     end; // case CurField

#ifdef __LIMIT__
cmLimits:
  RunInterface('ILimitIndents', 0, BaseDoc.Nrec);
#end //__LIMIT__

end; // HandleEvent
end; // Panel p1

//******************************************************************************

Panel p2;   // in Window
  Show at (, 16, , );
  Table SpStep;

Browse brSpSchet ('Расширенная информация - <Ctrl><Enter>', hcKouDocISpecSell, sci1378Esc); // спецификация документа

Fields
  SpStep.Npp    #3'№пп'
                ('Порядковый номер. Расширенная информация - <Ctrl><Enter>', , sci178Esc)
                : [3], noprotect, NoAutoSize;

  NamMC1        #3'*'
                ('Товар/Услуга/Скидка. Расширенная информация - <Ctrl><Enter>')
                : [1], protect, NoPickButton, NoAutoSize, Centered;

  SpStep.wMcProp #3'С/Н'
                ('Собственная/Несобственная - принадлежность МЦ собственной организации')
                : [3], [LIST 0 'С', 'Н'], protect, NoAutoSize, Centered;

  NamTovar      #3'Наименование'
                ('Выбор из каталога - <Ctrl><F3>.  Расширенная информация - <Ctrl><Enter>')
                : [16] , protect, QuickChoice,
                {Font = {BackColor = if (SpStep.cMCUSL = 0, ColorNeed, 0)}};

  Nomenkl       #3'Ном.номер'
                ('Выбор из каталога - <Ctrl><F3>.  Расширенная информация - <Ctrl><Enter>')
                : [13], protect, QuickChoice, NoAutoSize,
                {Font = {BackColor = if (SpStep.cMCUSL = 0, ColorNeed, 0)}};

  OtpEd         #3'ЕдИзм'
                ('Сокращенное наименование единицы измерения. Расширенная информация - <Ctrl><Enter>')
                : [5], protect, NoAutoSize, QuickChoice,
                {Font = {BackColor = if (SpStep.cOtpEd = 0, ColorNeed, 0)}};

  fSpSoprProcNac  #3'%' ('Процент скидки/надбавки по текущей позиции документа(входящий/исходящий)', , sci1378Esc)
                                : [6], noprotect, Centered, NoAutoSize;
  FactoryPrice    #3'Заводская'#13#3'цена' ('Заводская(контрактная) цена по текущей позиции документа', , sci1378Esc)
                                : [12], [brForPrice], noprotect, NoAutoSize;

  SpStep.KolSkl #3'Количество'
                (, , sci178Esc)
                : [10], [prSignsInKol, '\3p[|-]36`666`666`666`666.888'], noprotect, NoAutoSize;

  KatDopEd1.ShortName  #3'ДЕИ 1'
                ('Расширенная информация - <Ctrl><Enter>', , sci178Esc)
                : [5], protect, NoAutoSize, NoPickButton;

  SpDopEd1.Kol  #3'Количество'
                ('Расширенная информация - <Ctrl><Enter>')
                : [10], [prSignsInKol], Protect, NoAutoSize, NoPickButton;

  KatDopEd2.ShortName  #3'ДЕИ 2'
                ('Расширенная информация - <Ctrl><Enter>', , sci178Esc)
                : [5], protect, NoAutoSize, NoPickButton;

  SpDopEd2.Kol  #3'Количество'
                ('Расширенная информация - <Ctrl><Enter>')
                : [10], [prSignsInKol], Protect, NoAutoSize, NoPickButton;

  SostRes       #3'Р'
                : [1], skip, NoAutoSize, Centered,
                {Font = {BackColor = CalcColorReserv}};

//******************************************************************************
//!!!
//******************************************************************************
// Не меняйте название колонки SpStep.Price - используется в DoClear.vpp
//******************************************************************************
  SpStep.Price  #3'Цена за единицу'
                (, , sci178Esc)
                : [12], [brForPrice, '\2p[|-]36`666`666`666`666.88'], NoAutoSize;

  SummaTov      #3'Стоимость'
                (, , sci178Esc)
                : [16], [brForSumma, '\2p[|-]36`666`666`666`666.88'], protect, NoAutoSize;

  SpStep.NDS    #3'Налоги'
                (, , sci178Esc)
                : [12], [brForPrice, '\2p[|-]36`666`666`666`666.88'], protect, NoAutoSize;

  KlPrice.Name  #3'Прайс-лист'
                ('Ссылка на прайс-лист')
                : [15], protect, NoAutoSize;

  SaldTune.Name #3'Объект ЦУ' (,, sci1378Esc): [10], Protect, NoAutoSize, PickButton;
  vsKau1        #3'КАУ 1' ('',, sci1378Esc): [12], Protect, NoAutoSize, PickButton;
  vsKau2        #3'КАУ 2' ('',, sci1378Esc): [12], Protect, NoAutoSize, PickButton;
  vsKau3        #3'КАУ 3' ('',, sci1378Esc): [12], Protect, NoAutoSize, PickButton;
  vsKau4        #3'КАУ 4' ('',, sci1378Esc): [12], Protect, NoAutoSize, PickButton;
  vsKau5        #3'КАУ 5' ('',, sci1378Esc): [12], Protect, NoAutoSize, PickButton;
  vsKau6        #3'КАУ 6' ('',, sci1378Esc): [12], Protect, NoAutoSize, PickButton;
  vsKau7        #3'КАУ 7' ('',, sci1378Esc): [12], Protect, NoAutoSize, PickButton;
  vsKau8        #3'КАУ 8' ('',, sci1378Esc): [12], Protect, NoAutoSize, PickButton;
  vsKau9        #3'КАУ 9' ('',, sci1378Esc): [12], Protect, NoAutoSize, PickButton;
  vsKau10       #3'КАУ 10' ('',, sci1378Esc): [12], Protect, NoAutoSize, PickButton;
  SmetaMy       #3'Смета'
                ('Локальная смета: "Номер": "Наименование"', , sci1378Esc)
                : [15], protect, NoAutoSize, PickButton;

  SmetaSpMy     #3'Спецификация сметы'
                ('Спецификация сметы: "№ п/п" ("Код") "Наименование"', , sci1378Esc)
                : [15], protect, NoAutoSize, PickButton;
end; // Browse

//******************************************************************************

Procedure CheckSpStepKolSkl;
{
  var tmpMyIsSmetPos   : boolean;  tmpMyIsSmetPos := FALSE;
  var tmpMyIsSmetPosKf: double;
  var MySm_SmetDoc     : comp;
  var MySm_SmetJob     : comp;
  var MySm_SmetSpec    : comp;

  if (GetFirst SpDocSmeta = tsOk)
    {
      if (SpStep.KolSkl = 0)
        {
          Message('Количество для сметной позиции не может быть нулевым!'#13+
                  'Для отмены изменений нажмите <Alt><BkSpace>', Information);
          Abort;
          Exit;
        }

      /*
      //корректировка кол-ва по другим сметным позициям для этой же работы
      if (Message('Сметная позиция связана с другими позициями спецификации.'#13+
                  'При изменении количества необходимо будет модифицировать количество '+
                  'по другим позициям спецификации текущей сметной работы.'#13+
                  'Продолжить?', YesNo) <> Yes)
        Set SpStep.KolSkl := double(OldFieldValue);
      else
        {
          tmpMyIsSmetPosKf := SpStep.KolSkl/double(OldFieldValue);
          tmpMyIsSmetPos   := TRUE;
          MySm_SmetDoc     := SpDocSmeta.cDoc;
          MySm_SmetJob     := SpDocSmeta.cPosition;
          MySm_SmetSpec    := SpDocSmeta.cSpec;
        }
      */
    }


  if (SpStep.PrMC = 1) AND UKS_Used
    {
      PushPos(#KatStroy);
      ResetBounds(#KatStroy);

      if (GetFirst KatStroy where ((SpStep.cMCUsl == KatStroy.cMC(NoIndex))) = tsOk)
        if (not IsNew)
          {
            Message('МЦ соответствует объекту строительства!'#13#13+
                    'Количество может быть равно только 1!', Information);
            update current SpStep Set SpStep.KolSkl := 1;
          }

      SetBounds(#KatStroy);
      PopPos(#KatStroy);
    }

  if (tmpMyIsSmetPos)
    {
      PushPos(#SpStep);
      ResetBounds(#SpStep);
      PushPos(#SpDocSmeta);
      ResetBounds(#SpDocSmeta);

      _LOOP SpDocSmeta where ((coSpStep     == SpDocSmeta.coTable
                           AND MySm_SmetDoc == SpDocSmeta.cDoc
                           AND MySm_SmetJob == SpDocSmeta.cPosition
                             ))
        {
         //корректировка спецификации дока
          if (MySm_SmetSpec <> SpDocSmeta.cSpec)
            if (GetFirst FastFirstRow SpStep where ((SpDocSmeta.cSpec == SpStep.NRec)) <> tsOk)
              Continue;
            else
              {
                Set SpStep.KolSkl := SpStep.KolSkl*tmpMyIsSmetPosKf;
                if (KatOtpEd.Diskret = 1)
                  if NOT fEdIzm.IsKolDiskret(SpStep.KolSkl)
                    set SpStep.KolSkl := trunc(SpStep.KolSkl);

                if ((boGetTune('Reserv.SchReserv') OR(SpStep.Reserv > 0))
                AND (SpStep.PrMC = 1)
                AND (BaseDoc.Status = 2))
                  if (not IsValid(tnKatSopr))
                    {
                      if (SpStep.Reserv > 0)
                        {
                          if (wGetTune('Reserv.PrSchSklad') = 2)
                            {
                              SubResRazrez; // снятие резерва
                              delete safe dores;
                            }

                          SubResTov(SpStep.Reserv); // снятие резерва
                        }

                      set SpStep.Reserv := 0;

                      if (wGetTune('Reserv.PrSchSklad') <= 1)
                        ResPoTov(0, FALSE);
                    }

                CheckKolSkl;
                Update Current SpStep;
              }

          //корректировка объема работы (SpDocSmeta)
          SpDocSmeta.Kol   := SpDocSmeta.Kol*tmpMyIsSmetPosKf;
          Update Current SpDocSmeta;
        }

      SetBounds(#SpDocSmeta);
      PopPos(#SpDocSmeta);

      SetBounds(#SpStep);
      PopPos(#SpStep);
    }

  fEdIzm.CheckKolDiskret(SpStep.KolSkl, KatOtpEd.NRec, TRUE, TRUE);

  if (SpStep.PrMC = 1)
    if (BaseDoc.Status = 2)
      if (boGetTune('Reserv.SchReserv') OR (SpStep.Reserv > 0))
        if (not IsValid(tnKatSopr))
          {
            if (SpStep.Reserv > 0)
              {
                if (wGetTune('Reserv.PrSchSklad') = 2)
                  {
                    SubResRazrez; // снятие резерва
                    delete safe dores;
                  }

                SubResTov(SpStep.Reserv); // снятие резерва
              }

            set SpStep.Reserv := 0;

            if (wGetTune('Reserv.PrSchSklad') <= 1)
              {
                ResPoTov(0, FALSE);
                RereadRecord(#SpStep);
              }
            else
              if ExistTune('Reserv.SpStepAuto')
                if boGetTune('Reserv.SpStepAuto')
                  if (update current SpStep = tsOk)
                    {
                      oResProc.ProcSklResEx(BaseDoc.nRec, SpStep.BufferP, TRUE);
                      RereadRecord(#SpStep);
                    }
          }

  CheckKolSkl;
}

//******************************************************************************

Procedure KillPosClones;
{
  if (Message('Удалить всякое упоминание "'+if(SpStep.PrMC = 1, KatMC.Name, KatUsl.Name)
              +'" в данном документе?', YesNo+mfSwapButtons) <> yes)
    Exit;

  var MCNrec: comp;     MCNrec := SpStep.cMCUSL;
  var MCpr: word;       MCpr := SpStep.PrMC;
  var ch: boolean;      ch := FALSE;

  ResetBounds(#SpStep);

  _LOOP spstep where ((
               stepdoc.nrec == spstep.cstepdoc AND
               MCpr         == spstep.prmc     AND
               MCNrec       == spstep.cmcusl
                     ))
    if (IsValid(#SpDocSmeta))
      {
        ch := TRUE;
        Continue;
      }
    else
      {
        SubResTov(SpStep.Reserv); // Снятие резерва по товару
        SubResRazrez;             // Снятие резерва по складу
        DelPosDORES;
        DelPosSpDocNal;
        oDOfuns.SpStep_Delete(SpStep.nRec);
      }

  if ch
    Message('Некоторые позиции не были удалены, т.к. созданы по смете.', Information);

  SetBounds(#SpStep);

  GetTotalSkid(false);

  RescanPanel(#SpStep);

}

//******************************************************************************

HandleEvent

//******************************************************************************

cmDelOnProtect:
{
  case CurField of
    #SmetaMy,
    #SmetaSpMy:
      {
        delete SpDocSmeta where (( coSpStep    == SpDocSmeta.coTable and
                                   SpStep.nRec == SpDocSmeta.cSpec  ))

        ReScanPanel(#SpStep);
      }
  //--------------
    #SaldTune.Name
  , #vsKau1
  , #vsKau2
  , #vsKau3
  , #vsKau4
  , #vsKau5
  , #vsKau6
  , #vsKau7
  , #vsKau8
  , #vsKau9
  , #vsKau10 :
      {
        PutCommand(cmIerarchy);
        RereadRecord(#SpStep);
      }

    #KatDopEd1.ShortName
  , #SpDopEd1.Kol
  , #KatDopEd2.ShortName
  , #SpDopEd2.Kol :
      {
        Abort;
      }

  end;
}

//******************************************************************************

cmPositionChanged:
  {  // проверка возможности редактирования записи
    _CanModify := _CanModifyQuery;

   if ( not EditDOPosEnabled(false, false) )
     ProtectRecord(#SpStep, TRUE);
   else
     if (boGetTune('Doc.Sell.NotEditDO'))
       if (IsValid(tnBaseFin) OR IsValid(tnKatSopr))
         ProtectRecord(#SpStep, TRUE);

   Old_Kol := SpStep.KolSkl;

   SetFieldVisible   (#SpStep.PrVoz , (SpStep.PrVoz <> 0));
   SetFieldSelectable(#NamTovar     , (SpStep.PrVoz  = 0));
   SetFieldSelectable(#Nomenkl      , (SpStep.PrVoz  = 0));
   SetFieldSelectable(#KatOtpEd.ABBR, (SpStep.PrVoz  = 0));
   SetFieldSelectable(#KatOtpEd.Name, (SpStep.PrVoz  = 0));
   SetFieldSelectable(#OtpEd        , (SpStep.PrVoz  = 0));

   if (SpStep.PrVoz <> 0)
     SetFieldSelectable(#SpStep.PrVoz, TRUE);
  }

//******************************************************************************

cmPass:
  MyPass;

//******************************************************************************

cmSetCurField:
  if (Target = #SpStep.KolSkl)
    Old_Kol := SpStep.KolSkl;

//******************************************************************************

cmSetDefault:
  {
    SetFieldSelectable(#NamTovar     , TRUE);
    SetFieldSelectable(#Nomenkl      , TRUE);
    SetFieldSelectable(#KatOtpEd.ABBR, TRUE);
    SetFieldSelectable(#KatOtpEd.Name, TRUE);
    SetFieldSelectable(#OtpEd        , TRUE);

    if IsProtected(#BaseDoc)
      {
        Message('Документ доступен только для просмотра!', Information);
        ProtectRecord(#SpStep, TRUE);
        Abort;
        Exit;
      }

    if ( BaseDoc.cParty = 0 )
      if ( wGetTune('Reserv.PrSchSklad') = 1 )
        Message('Для резервирования по складу необходимо выбрать склад отгрузки!', Information)
      else
        if (wGetTune('Reserv.PrSchSklad') = 2) AND ExistTune('Reserv.DO_Sklad_Enabled')
          if wGetTune('Reserv.DO_Sklad_Enabled') = 2
            {
              Message('Для резервирования по складу необходимо выбрать склад отгрузки!', Information);
              SelectField(#KatPodr.Name);
              Abort;
              Exit;
            }

    SpStep.dDoc := BaseDoc.dDoc;
    SpStep.PrSkid := 1;
    SpStep.PrMC := wGetTune('Doc.TypeSpSell') + 1;
    SpStep.cVal := StepDoc.cVal;
    SpStep.nRec := GetNextNRec(#SpStep, 0);

    oLinkMTR2Spec.SetVal(word(coSpStep), SpStep.nRec, coGetTune('CelUchForModul.SELL'));

    SelectField(#NamTovar);

    PutCommand(cmValue3);
  }

//******************************************************************************

cmCheckRecord:
  if (SpStep.cMCUSL = 0)
    {
      Message('Укажите для позиции наименование МЦ/услуги либо удалите запись!',
                        Warning + OkButton);
      Abort;
    }

//******************************************************************************

cmInsertRecord:
  if (addallmc = 1)
    addallmc := 0
  else
    {
      SpStep.dDoc := BaseDoc.dDoc;
      SpStep.Npp  := oSpNext.GetSpNppNext(SpStep.cStepDoc, coSpStep);
      ChangePos(comp(0));
      insert current SpStep;
      ModifDo;
      if boGetTune ('Doc.Sell.DO.CalcGrMForDO')
        if (SpStep.PrMc = 1)
          ProcKolGrMDO ( SpStep.cMCUsl, SpStep.cOtpEdGrM, SpStep.cOtpEd, SpStep.KolSkl, SpStep.KolGrM );
    }

//******************************************************************************

cmDeleteRecord:
{
  _CanModify := _CanModifyQuery;

  if ( not EditDOPosEnabled(true, true) )
    Abort;
  else
   {
    if ( message('Удалить текущую запись?', YesNo+mfSwapButtons ) <> yes )
      Abort;
    else
      {
        DoSpStepDelete;

        if (GetNext SpStep <> tsOk)
          if( GetLast SpStep <> tsOk)
            {}

        ModifDo;
      }
   }

   if ( RecordExists SpStep <> tsOK )
     #include rsv.vpp // изменение видимости полей
}

//******************************************************************************

cmUpdateRecord:
  {
    IncOstatokSpDocs2;
    ChangePos(comp(0));

    update current SpStep;

    if (CurField = #SpStep.KolSkl)
      if (GetFirst SpOtpEd where ((SpStep.cOtpEd == SpOtpEd.cOtpEd)) = tsOk)
      {
        oDOTara.UpdateKolTara(SpStep.cStepDoc, SpStep.cOtpEd, SpStep.NRec, SpStep.KolSkl, Old_Kol);
        ReReadRecord(#SpStep);
        GetTotalSkid(FALSE);
      }

    ModifDo;
  }

//******************************************************************************

cmPick:
{
  case CurField of
    #SmetaMy,
    #SmetaSpMy:
      {
        RunInterface(iVSmeta, SpStep.nRec, word(coSpStep));
        ReReadRecord(#SpStep);
      }
  //--------------
    #SaldTune.Name
  , #vsKau1
  , #vsKau2
  , #vsKau3
  , #vsKau4
  , #vsKau5
  , #vsKau6
  , #vsKau7
  , #vsKau8
  , #vsKau9
  , #vsKau10 :
      {
        PutCommand(cmIerarchy);
      }
  //--------------
    #Summatov:
      if ((BaseDoc.Direct = 1) AND (BaseDoc.cNalog = 2))
        {
          Message('Не допускается изменять цену/стоимость при работе в режиме "Скидка к контрагенту"!', Information);
          Abort;
        }
      else
        if (SpStep.KolSkl = 0)
          {
            Message('Введите количество!', Information);
            SelectField(#SpStep.KolSkl);
          }
        else
          CheckSumma;
  //--------------
    #KatOtpEd.Name
  , #KatOtpEd.Abbr
  , #OtpEd:
      {
        var tmpOtpEd: comp;
        tmpOtpEd := SpStep.cOtpEd;

        tmpKoef := if (IsValid(#KatOtpEd), KatOtpEd.Koef, 1);

        if (RunInterface('GetOtpEd', SpStep.cMCUSL,
             SpStep.cOtpEd, if(SpStep.prMC = 1, 1, 2)) <> cmCancel)
         {
           if (SpStep.cOtpEd = tmpOtpEd)
             EXIT;

           if (wGetTune('Doc.UchEd') = 1)
             if (KatOtpEd.Koef = 1.0)
               {
                  Message('Установлен запрет на использование в документах учетных единиц измерения.'#13+
                          'см. настройку'#13 +
                          GetTuneName('Doc.UchEd'), Warning+CancelButton);

                  set SpStep.cOtpEd := tmpOtpEd;
                  Abort;
               }

           if (GetFirst SpOtpEd where ((tmpOtpEd == SpOtpEd.cOtpEd)) = tsOk)
             oDOTara.DeleteTara(SpStep.cStepDoc, tmpOtpEd, SpStep.NRec, SpStep.KolSkl);

           if (wGetTune('Doc.ChangeOtpEd') = 0)
             {
               SpStep.Kol := SpStep.Kol * (tmpKoef / KatOtpEd.Koef);
               SpStep.Reserv := SpStep.Reserv * (tmpKoef / KatOtpEd.Koef);

               fEdIzm.CheckKolDiskret(SpStep.Kol, SpStep.cOtpEd, TRUE, TRUE);
               fEdIzm.CheckKolDiskret(SpStep.Reserv, SpStep.cOtpEd, FALSE, TRUE);

               SpStep.ProcUb := 0;
               SpStep.KolSkl := SpStep.Kol;
               if UseDEI
                 {
                   oDEIfuns.UpdateDEIKolSpStep(SpStep.NRec, SpStep.PrMC, SpStep.cMCUsl, 1, 0, SpStep.KolSkl, 0, BaseDoc.VidDoc);
                   oDEIfuns.UpdateDEIKolSpStep(SpStep.NRec, SpStep.PrMC, SpStep.cMCUsl, 2, 0, SpStep.Kol, 0, BaseDoc.VidDoc);
                 }
             }

           update DoRes set DoRes.Kol := DoRes.Kol * (tmpKoef / KatOtpEd.Koef);

           if (BaseDoc.cVal <> 0)
             SpStep.Price := oDOfuns.froundval2_1(SpStep.Price * (KatOtpEd.Koef / tmpKoef))
           else
             SpStep.Price := oDOfuns.froundrub2_1(SpStep.Price * (KatOtpEd.Koef / tmpKoef));

           UpdateTable;

           if ((BaseDoc.Direct = 1) AND boGetTune('Tara.AutoPaste')) OR
              ((BaseDoc.Direct = 2) AND boGetTune('Tara.AutoPaste_Buy'))
           {
             oDOTara.InsertTara(SpStep.cOtpEd, SpStep.NRec, SpStep.cStepDoc, SpStep.KolSkl, SpStep.cParty);
             oDOTara.ChangeNppStepDoc(SpStep.cStepDoc);
             ReReadRecord(#SpStep);
             GetTotalSkid(FALSE);
           }
         }
      }
  //--------------
    #KatOtpEdGRM.Name:
      {
        var cRecOtpEdGrM: comp;  cRecOtpEdGrM := if(SpStep.cOtpEdGRM<>comp(0), SpStep.cOtpEdGRM, -123456);

        if (RunInterface('GetOtpEd', SpStep.cMCUSL,
             cRecOtpEdGrM, if(SpStep.prMC = 1, 1, 2)) <> cmCancel)
          set SpStep.cOtpEdGrM := cRecOtpEdGrM;

        if boGetTune ('Doc.Sell.DO.CalcGrMForDO')
          if (SpStep.PrMc = 1)
            ProcKolGrMDO ( SpStep.cMCUsl, SpStep.cOtpEdGrM, SpStep.cOtpEd, SpStep.KolSkl, SpStep.KolGrM );
      }
  //--------------
    #NamTovar
  , #Nomenkl:
      {
        #include doprice.vpp // выбор из прайса

        Old_Kol := SpStep.KolSkl;
        AllSpStepCellVal(1);

        oLinkMTR2Spec.SelFormat(IsValid(#SpStep));
      }
  //--------------
    #KlPrice.Name:
      {
        #include modpric3.vpp
      }
  //--------------
  end; // case CurField
}
//******************************************************************************

cmCheckField:
{
  case CurField of
  //--------------
    #SpStep.Reserv:
      {
        if (SpStep.Reserv > SpStep.KolSkl)
          {
            Message('Нельзя резервировать больше заданного количества!', Information);
            SpStep.Reserv := SpStep.KolSkl;
          }

        if (not IsValid(tnKatSopr))
          {
            if NOT fEdIzm.CheckKolDiskret(SpStep.Reserv, SpStep.cOtpEd, FALSE, TRUE)
              Abort;

            SubResTov(OldRes); // снятие с резерва

            OldRes := SpStep.Reserv;
            SpStep.Reserv := 0;

            ResPoTov(OldRes, FALSE);
          }
        else
          {
            set SpStep.Reserv := OldRes;
            if (message('Были отгрузки товара!'#13#13'Резервировать неотгруженное количество?', YesNo) = Yes)
              {
                var CalcOtgr: double; CalcOtgr := 0;

                _LOOP katsopr
                  _LOOP SpSopr
                    if (    (SpStep.cMCUSL = SpSopr.cMCUSL)
                        AND (  (SpStep.cParty = 0)
                             or((SpStep.cParty <> 0)AND(SpStep.cParty = SpSopr.cParty))
                            )
                       )
                        CalcOtgr := CalcOtgr + SpSopr.KolFact;

               if (CalcOtgr >= SpStep.KolSkl)
                 Message('Все количество уже отгружено!', Information);
               else
                 {
                   var NewRes: double;

                   SubResTov(OldRes);        // снятие с резерва
                   NewRes := SpStep.KolSkl - CalcOtgr;
                   ResPoTov(NewRes, FALSE);
                 }
              }
          }
      }
  //--------------
    #SpStep.Price:
      {
        if not boGetTune('Doc.SavePriceRef')
          SpStep.cPriceList := 0;

        set SpStep.Price := oDOfuns.DoRoundP(BaseDoc.cVal, tipdo, SpStep.Price);

        if (not IsNew)
          if (UpdateTable)
            if boGetTune('Oper.QuickEnterKol&Price')
              if (CurWindow <> pwSpStep)
                {
                  #ifdef ATL51
                  RedrawCurrentAndGo (GetCurrentFormat, TRUE);
                  PutCommand(cmValFld10);
                  #else
                  if (GetNext SpStep = tsOk)
                    {
                      CallToNeighbours(cmPosDown, #SpStep);
                      RedrawPanel(#SpStep);
                      PutCommand(cmValFld10);
                    }
                  #end
                }
      }
  //--------------
    #SpStep.Kol:  //коррекция количества к оплате
       if NOT fEdIzm.CheckKolDiskret(SpStep.Kol, SpStep.cOtpEd, FALSE, TRUE)
         Abort;
       else
         CheckKol;
  //--------------
    #SpStep.ProcUb: //коррекция убыли
        CheckProcUb;
  //--------------
    #SpStep.KolSkl:
      {
        Old_Kol := Double(OldFieldValue);

        CheckSpStepKolSkl;

        if boGetTune ('Doc.Sell.DO.CalcGrMForDO')
          if (SpStep.PrMc = 1)
            ProcKolGrMDO ( SpStep.cMCUsl, SpStep.cOtpEdGrM, SpStep.cOtpEd, SpStep.KolSkl, SpStep.KolGrM );

        RereadRecord(#SpDopEd1);
        RereadRecord(#SpDopEd2);
      }
  //--------------
    // Для обработки конфигуратором
    #SpDocNal.Summa, #SpDocNal.SumVal, #SpDocNal.SumNal:
      {
        if (Not isValid(#SpDocNal))
          Exit;

        Set SpStep.ManualTax := 1;

        case CurField of
          #SpDocNal.Summa:
            {
              set SpDocNal.SumVal := oValFunc.GetAnyCurrency(comp(0),
                                                             SpDocNal.Summa,
                                                             BaseDoc.dDoc,
                                                             BaseDoc.cVal);
              set SpDocNal.SumNal := oValFunc.GetAnyCurrency(BaseDoc.cVal,
                                                             SpDocNal.SumVal,
                                                             BaseDoc.dDoc,
                                                             SpDocNal.cVal);
            }

          #SpDocNal.SumVal:
            {
              set SpDocNal.Summa  := oValFunc.GetNatCurrency(BaseDoc.cVal,
                                                             SpDocNal.SumVal,
                                                             BaseDoc.dDoc);
              set SpDocNal.SumNal := oValFunc.GetAnyCurrency(BaseDoc.cVal,
                                                             SpDocNal.SumVal,
                                                             BaseDoc.dDoc,
                                                             SpDocNal.cVal);
            }

          #SpDocNal.SumNal:
            {
              set SpDocNal.Summa  := oValFunc.GetNatCurrency(SpDocNal.cVal,
                                                             SpDocNal.SumNal,
                                                             BaseDoc.dDoc);
              set SpDocNal.SumVal := oValFunc.GetAnyCurrency(SpDocNal.cVal,
                                                             SpDocNal.SumNal,
                                                             BaseDoc.dDoc,
                                                             BaseDoc.cVal);
            }
        end;

        update current SpDocNal;

        PushPos(#SpDocNal);

        var SumNds: double;  SumNds := 0;

        _LOOP spdocnal
          if (BaseDoc.cOrg = SpDocNal.cOrg)
            SumNds := SumNds + SpDocNal.SumVal;

        PopPos(#SpDocNal);

        if (SpStep.Nds<>SumNds)
          {
            SpStep.Nds := SumNds;
            update current SpStep;
            ModifDo;
          }
      }
  end; // case CurField
}

end; // HandleEvent;
end; // Panel

//******************************************************************************

#ifdef __MTR_TO_SPEC__
#include lm2sautopick.vpp
#end

//******************************************************************************

Procedure MakePageUp;
{
  if ( GetPrev SpStep = tsOk )
    {
      SetCurRow(brSpSchet, GetCurRow(brSpSchet) - 1);

      oLinkMTR2Spec.SetObjParam( word(coSpStep)
                               , SpStep.nRec
                               , if( not EditDOPosEnabled(false, false) and if( not CanEditInClosePeriod(true)
                                                                              , not CanEditInClosePeriod(false)
                                                                              , true
                                                                              )
                                   , 1
                                   , if( SpStep.cSpMC = 0
                                       , if( IsValid(#SmetaStroy)
                                           , 2
                                           , 0
                                           )
                                       , 1
                                       )
                                   )
                               );

      RedrawPanel(#SpStep);
    }
}

//******************************************************************************

Procedure MakePageDown;
{
  if ( GetNext SpStep = tsOk )
    {
      SetCurRow(brSpSchet, GetCurRow(brSpSchet) + 1);

      oLinkMTR2Spec.SetObjParam( word(coSpStep)
                               , SpStep.nRec
                               , if( not EditDOPosEnabled(false, false) and if( not CanEditInClosePeriod(true)
                                                                              , not CanEditInClosePeriod(false)
                                                                              , true
                                                                              )
                                   , 1
                                   , if( SpStep.cSpMC = 0
                                       , if( IsValid(#SmetaStroy)
                                           , 2
                                           , 0
                                           )
                                       , 1
                                       )
                                   )
                               );

      RedrawPanel(#SpStep);
    }
}

//******************************************************************************
Procedure OnCmSaveDoc;
var
  ForAveragePrice    : boolean;
  ProcForAveragePrice: double;
  tmpS: string;
{
  case CurTable of
  //--------------
    #BaseDoc:
      RunInterface('GSklOst', BaseDoc.cParty);
  //--------------
    #SpStep:
      {
        if (SpStep.PrMC <> 1)
          {
            Message('Текущая позиция спецификации не является МЦ.', Information);
            Exit;
          }

        var NRecParty: comp; NRecParty := SpStep.cParty;

        if (wGetTune('McUsl.AverageCena') = 0)
          SaveMyDsk('ok', 'ForAveragePriceFromWorkInterface'); // передаем в GTekOst

        if ( RunInterface('GTekOst'
                        , SpStep.cMCUSL
                        , SpStep.cOtpEd
                        , if(coGetTune('ResRestrict.cSklad') <> 0, coGetTune('ResRestrict.cSklad'), BaseDoc.cParty)
                        , comp(0)
                        , comp(0)
                        , SpStep.cParty
                         ) = cmCancel )
          {
            SaveMyDsk('cancel', 'ForAveragePriceFromWorkInterface'); // сбрасываем параметр для GTekOst
            Exit;
          }

        ReadMyDsk(tmpS               , 'ForAveragePriceFromGTekOst', FALSE);
        ReadMyDsk(ProcForAveragePrice, '_ProcForAveragePrice_'     , FALSE)

        ForAveragePrice := tmpS = 'ok';

        SaveMyDsk('cancel', 'ForAveragePriceFromWorkInterface'); // сбрасываем параметр для GTekOst

        if boGetTune('Oper.MultiCurrReg')
          case BaseDoc.TipMoney of
          //----------------------
            1:
              if (KatParty.cValPar <> 0 )
                {
                  Message('При многовалютном учете и рублевом ДО валюта '+
                          'у партии должна отсутствовать!!', Information);
                  set SpStep.cParty := NRecParty;
                  Exit;
                }
          //----------------------
            2
          , 3:
              if (KatParty.cValPar <> BaseDoc.cVal)
                {
                  Message('При многовалютном учете валюта партии должна соответствовать документу!',
                           Information);
                  set SpStep.cParty := NRecParty;
                  Exit;
                }
          //----------------------
          end;

        var NewPrice: double;

        if ( (NrecParty <> 0) AND (NrecParty <> SpStep.cParty) )
          {
            var SrPrice: double;

            InitMCInfo(BaseDoc.dDoc);

            StepMCInfo(SpStep.cMCUsl, 0, 0, 0, SpStep.cParty);

            SrPrice := oDOfuns.froundrub2_1(AveragePrice);

            StepMCInfo(SpStep.cMCUsl, 0, 0, 0, SpStep.cParty);

            if (SrPrice <> froundrub2(AveragePrice))
              if ( Message('Учетная цена выбранной партии отличается от исходной!'#13+
                           'Продолжить!', Confirmation + YesNo) <> cmYes )
                {
                  DoneMCInfo;
                  set SpStep.cParty := NRecParty;
                  Exit;
                }

            DoneMCInfo;
          }

        if ForAveragePrice
          {
            var tsPodr, tsMol: comp;

            if not ReadMyDsk(tsPodr, 'GTekOst_TekSaldo_cPodr', FALSE)
              tsPodr := 0;

            if not ReadMyDsk(tsMol, 'GTekOst_TekSaldo_cMOL', FALSE)
              tsMol := 0;

            InitMCInfo(BaseDoc.dDoc);

            StepMCInfo(SpStep.cMCUsl, BaseDoc.cVal, tsPodr, tsMol, NRecParty);

            SpStep.Price := if(BaseDoc.cVal = 0, AveragePrice, AverageVPrice) * KatOtpEd.Koef * (1 + ProcForAveragePrice / 100);
            set SpStep.Price := oDOfuns.DoRoundP(BaseDoc.cVal, BaseDoc.VidDoc, SpStep.Price);

            DoneMCInfo;
          }

        UpdateTable;

        // привязка объектов строительства и статей затрат
        var vcKatStroynRec: comp;

        if (not ReadMyDsk(vcKatStroynRec, 'GTekOst_KatStroy', FALSE))
          vcKatStroynRec := 0;

        var IsSaldoTune: boolean;

        if not ReadMyDsk(IsSaldoTune, 'GTekOst_SaldoTune', TRUE)
          IsSaldoTune := FALSE;

        if IsSaldoTune
          {
            if ( vcKatStroynRec = 0 )
              oMTRFun.DelSpecMTR(coSpStep, SpStep.nRec)
            else
              {
                oMTRFun.SaveKitKauForKit(vcKatStroynRec);
                oMTRFun.InsSpecMTR(coSpStep, SpStep.nRec);
              }

            RereadRecord(#SpStep);
          }

        if (wGetTune('Tara.GrTara') = 0)
          if ( GetFirst FastFirstRow SpOtpEd where (( SpStep.cOtpEd == SpOtpEd.cOtpEd )) = tsOk )
            _LOOP SpOtpEd where (( SpStep.cOtpEd == SpOtpEd.cOtpEd ))
              update SpStepC where (( StepDoc.nRec    == SpStepC.cStepDoc
                                  AND SpStep.nRec     == SpStepC.cOwner
                                  AND SpOtpEd.cMcTara == SpStepC.cMcUsl(NoIndex) ))
                set SpStepC.cParty := SpStep.cParty;
      }
  //--------------
  end;
}
//******************************************************************************

HandleEvent

//******************************************************************************
cmInit:
{
  CursV := _kurs;

  SetFieldAndLabelVisible(#FactoryPrice  , boGetTune('Doc.FactoryPriceDO'));
  SetFieldAndLabelVisible(#fSpSoprProcNac, boGetTune('Doc.FactoryPriceDO'));
  SetFieldAndLabelVisible(#SkidVal       , boGetTune('Doc.FactoryPriceDO'));

  if BaseDoc.Status <> 2
  {
    DisableCommand ( cmValFld20 );
    SetCommandEnabled(cmBuhCalculator, False);
  }
  else
  {
    EnableCommand ( cmValFld20 );
    SetCommandEnabled(cmBuhCalculator, True);
  }


}

cmValFld17:
  {
    RunInterface('KartMct', BaseDoc.cOrg, 0);
  }

//******************************************************************************
// Показатели качества
cmValFld19:
  if EditDOPosEnabled(true, true)
    if (oDOfuns.BaseDoc_CountSkidka(BaseDoc.NRec, TRUE) = 0)
      {
        RescanPanel(#SpStep);
        GetTotalSkid(false);
        Message('Операция завершена');
      }

//******************************************************************************

cmValFld18:
  if not boGetTune('PokazKach.PokazQual')
    Message('Эта команда недоступна в данном режиме.'#13'Необходимо включить настройку'#13+
            GetTuneName('PokazKach.PokazQual'), Information);
  else
    {
      var myMarker: longint;

      myMarker := InitMarker('UdKach2DO', 8, 100, 10);
      ClearMarker(myMarker);

      _LOOP SpStep
        _LOOP Vagon where ((SpStep.NRec == Vagon.cSpStep))
          if (Vagon.cSertific <> 0)
            InsertMarker(myMarker, Vagon.cSertific);

      DoneMarker(myMarker, 'UdKach2DO');
      RunInterface('RepSertif', 'UdKach2DO');
      RescanPanel(#SpStep);
    }

//******************************************************************************

cmValFld14:
  {
    printSertif;
    RereadRecord;
  }

//******************************************************************************

cmCalcHand:
  PrintInvoice;

//******************************************************************************

cmValFld12:
{
  if not ((BaseDoc.VhodNal = 1)AND(BaseDoc.VhSkid = 1)AND(BaseDoc.TipMoney = 1))
    Message('Для работы данной функции: '#13+
            '1) валюта документа должна быть НДЕ'#13+
            '2) установлена скидка как %'#13+
            '3) налоги не должны входить в цену', Information);
  else
    if EditDOPosEnabled(true, true)
      if (message('Вы действительно хотите пересчитать цены обратным счетом?', YesNo) = yes)
        {
          _LOOP spstep
            {
              var dValNalog: Date;  dValNalog := if (BaseDoc.dValCurse = Date(0, 0, 0), BaseDoc.dDoc, BaseDoc.dValCurse);
              var cGN: comp;        cGN := GetNalGr;

              if CountBasePrice(BaseDoc.Nrec, SpStep.Nrec, tipDo+1000, cGN, BaseDoc.cOrg,
                                SpStep.Kol, SpStep.cOtpEd, dValNalog, BaseDoc.cVal,
                                0, 0, SpStep.Price, BaseDoc.cPayment)
                {
                  SpStep.Price := oDOfuns.DoRoundNDEP(BaseDoc.ViDDoc,
                    GetBaseValPrice*(1-BaseDoc.Skidka/100));

                  CountNalogPrice(BaseDoc.Nrec, SpStep.Nrec, tipDo+1000, cGN, BaseDoc.cOrg,
                                  SpStep.Kol, SpStep.cOtpEd, dValNalog, BaseDoc.cVal,
                                  0, 0, SpStep.Price, BaseDoc.cPayment);

                  set SpStep.Price := GetNalogValPrice/(1-BaseDoc.Skidka/100);
                  SpStep.Summa := SpStep.Price*SpStep.Kol;

                  update current spstep;
                }
            }

          GetTotalSkid( FALSE);
        }
 }
//******************************************************************************

cmValFld9:
 if EditDOPosEnabled(true, true)
    KillPosClones;

//******************************************************************************

cmValFld11:
  if EditDOPosEnabled(true, true)
    SpecDO_Sell;

//******************************************************************************

cmValFld15:
  if EditDOPosEnabled(true, true)
    SpecDO_Edit;

//******************************************************************************

cmValFld16:
  if not (IsValid(#SpStep))
    Message('В документе-основании нет спецификации!', Information);
  else
    if EditDOPosEnabled(true, true)
      SpecDO_DublPos



//******************************************************************************

cmPlansNo:
  {
    if (NewNotModified)
      Exit;

    if (UpdateTable)
      if boGetTune('Doc.GrupSTN')
        ViewSprTov
      else
        RunInterface('NalSchFC', BaseDoc.Nrec);
  }

//******************************************************************************

cmValue3:
  {
    SelectField(if (wGetTune('Pick.SortMC') = 0, #NamTovar, #Nomenkl));

    if boGetTune ('Pick.AutoPickinInterface')
      if not (ExistTune('Oper.Sell.DO.AutoPickSp'))
        PutCommand(cmPick);
      else
        case wGetTune ('Oper.Sell.DO.AutoPickSp') of
        //------------------------------------------
          1:  PutCommand(cmBuhCalculator);
        //------------------------------------------
          2:  PutCommand(cmRestoreDoc);
        //------------------------------------------
          3:  PutCommand(cmValFld21);
        //------------------------------------------
         else PutCommand(cmPick);
        //------------------------------------------
        end;
  }

//******************************************************************************

cmValFld10  :
  SelectField(if (SpStep.KolSkl = 0, #SpStep.KolSkl, #SpStep.Price));

//******************************************************************************

cmSaveDoc:
  OnCmSaveDoc;

//******************************************************************************

cmFilialNo:
  if EditDOPosEnabled(true, true)
    {
      if (NotEditDO)
        Exit;

      #include sortnom1.vpp
    }

//******************************************************************************

cmValFld8:
  {
    if (RecordExists SpStep where (( StepDoc.nRec == SpStep.cStepDoc AND
                                     word(1)      << SpStep.PrMC )) = tsOk)
      {
        Message('В ДО есть нетоварные позиции.'#13'Разделение ДО невозможно.', Information);
        Exit;
      }

    var NRecDO_Old, NRecDO_New: comp;
    var ChargeParam: word;

    NRecDO_Old := BaseDoc.nRec;
    if (RunDialog(DoChargeParams, ChargeParam) = cmCancel)
      Exit;

    NRecDO_New := CopyDO (BaseDoc.nRec, naltype, comp(0), TRUE, ChargeParam);
    if (nRecDO_New <> comp(0))
      if (GetFirst BaseDoc where (( NRecDO_New == BaseDoc.NRec )) = tsOk)
        InsertDoSoprHoz;

    if (GetFirst BaseDoc where (( NRecDO_Old == BaseDoc.NRec )) = tsOk)
      {}

    RescanPanel(CurTable);
    RescanPanel(#SpStep);
  }

//******************************************************************************

cmValFld6:
{
  if not EditDOPosEnabled(true, true)
    Exit;

  var doDiscr: double;
  var temp: double;
  var PriceS: double;
  var PrSk: double;

  if (RunDialog('GetRoundInDOPrice', doDiscr) = cmCancel)
    Exit;

  if (doDiscr <= 0.0)
    {
      Message('Параметр дискретности должен быть больше нуля!', Warning);
      Exit;
    }

  if (message('Провести операцию кратности цен?',
              Confirmation+YesNo+CancelButton) <> cmYes)
    Exit;

  PushPos(#SpStep);
  StartNewVisual(vtNumericVisual, vfTimer+vfBreak+vfConfirm,
                 'Установка кратности цен'#13#3, 1);
  _LOOP SpStep
    {
      if not NextVisual
        Break;

      PriceS := SpStep.Summa / SpStep.KolSkl;   // цена с учетом скидки
      PrSk   := PriceS / SpStep.Price;          // 1 - скидка
      temp   := trunc(PriceS / doDiscr) + 1;
      PriceS := temp * doDiscr;                 // цена, кратная doDiscr
      SpStep.Price := PriceS / PrSk;

      update current SpStep;
    }

  PopPos(#SpStep);
  StopVisual('', 0);

  GetTotalSkid(false);
}

//******************************************************************************

cmValue14:
  if not NotEditpos(true)
    {
      if (Not isModifZhostkReserv(True))
        Exit;

      proc14;
    }

//******************************************************************************

cmValue4: // перенаправление резерва по документу
  if not NotEditpos(true)
    RunInterface(iTransferDoRes, StepDoc.nRec);

//******************************************************************************

cmValue19: //справка по налогам
  {
    SelectField(#BaseDoc.Nds);
    PutCommand(cmPick);
  }

//******************************************************************************

cmValue25:
  RunInterface(GetDocSpecInfo, StepDoc.nRec, 0);

//******************************************************************************

cmValue16:
  #include modprice.vpp

//******************************************************************************

cmBuhCalculator:
  {
    if not EditDOPosEnabled(true, true)
      Exit;

    if UpdateTable
      {
        Chrust_Mode := (BaseDoc.VidDoc = 201 OR BaseDoc.VidDoc = 1420) AND //ДО на продажу
                       (BaseDoc.Direct = 1)   AND //продажа
                       (wGetTune('Reserv.PrSchSklad') = 2)  //резервирование по скл. разрезу

        if Chrust_Mode
          {
            #include doprice.vpp // выбор из прайса

            AllSpStepCellVal(1);
          }
        else
          Message('Данная функция доступна при настройке резервирования по складскому разрезу!'#13+
                  GetTuneName('Reserv.PrSchSklad'));
      }

    Chrust_Mode := FALSE;
  }

//******************************************************************************

cmValFld21:
  {
    if Not UpdateTable
      Exit;

    if Not(
           ( BaseDoc.VidDoc = 201 OR BaseDoc.VidDoc = 1420 ) //ДО на продажу
            AND
           ( BaseDoc.Direct = 1 )   //продажа
            AND
           ( wGetTune('Reserv.PrSchSklad') = 2 )  //резервирование по скл. разрезу
          )
      {
        Message('Данная функция доступна при настройке'#13
              + 'резервирования по складскому разрезу!', Information);
        Exit;
      }

    var MarkerZ: longint;

    MarkerZ := InitMarker('__DoRes2_Chng__', 8, 20, 5, FALSE);
    ClearMarker(MarkerZ);
    DoneMarker(MarkerZ, '__DoRes2_Chng__');

    RunInterface('DoResCreator', StepDoc.nRec);

    MarkerZ := InitMarker('__DoRes2_Chng__', 8, 20, 5, false);

    PushPos(#SpStep);

    var Ind: longint;
    var PickRec: comp;

    for(Ind := 0; Ind < GetMarkerCount(MarkerZ); inc(Ind))
      if GetMarker(MarkerZ, Ind, PickRec)
        if ( GetFirst fastfirstrow SpStep where (( PickRec == SpStep.nRec )) = tsOK )
          {
            var kk: double; kk := fTekRun.GetSumDoRes(SpStep.nRec);

            if (kk > 0.0)
              {
                SpStep.KolSkl  := kk;
                SpStep.Kol     := kk;
                SpStep.Reserv  := kk;

                SpStep.Price := oDOfuns.DoRoundP(BaseDoc.cVal, BaseDoc.VidDoc, SpStep.Price);

                update current SpStep;

                if GetFirst SpStepC where (( SpStep.cStepDoc == SpStepC.cStepDoc  AND
                                             SpStep.NRec     == SpStepC.cOwner )) = tsOk // есть позиции с нагрузкой
                  {
                    oDOTara.UpdateKolTara(SpStep.cStepDoc, SpStep.cOtpEd, SpStep.NRec, SpStep.KolSkl, Old_Kol);
                    ReReadRecord(#SpStep);
                  }
              }
            else
              {
                SubResTov(SpStep.Reserv); // Снятие резерва по МЦ
                SubResRazRez;             // Снятие резерва по складу
                delete safe dores;
                delete safe spdocnal;

                if (GetFirst SpOtpEd where ((SpStep.cOtpEd == SpOtpEd.cOtpEd)) = tsOk)
                  oDOTara.DeleteTara(SpStep.cStepDoc, SpStep.cOtpEd, SpStep.NRec, SpStep.KolSkl);

                oDOfuns.SpStep_Delete(SpStep.nRec);
              }
          }

    PopPos(#SpStep);

    if ( GetMarkerCount(MarkerZ) = 0 )
      {
        DoneMarker(MarkerZ, '__DoRes2_Chng__')
        Exit;
      }

    DoneMarker(MarkerZ, '__DoRes2_Chng__')

    GetTotalSkid(false);  //полный пересчет
    AllSpStepCellVal(1);

    RereadRecord(#BaseDoc);
    RereadRecord(#SpStep);
  }

//******************************************************************************

cmRestoreDoc:
  if EditDOPosEnabled(true, true)
    {
      if (NotEditDO)
        Exit;

      if (Not isModifZhostkReserv(True))
        Exit;

      if (CurTable <> #BaseDoc)
        if (wGetTune('Pick.SelKatMc') <> 1)
          ProcessCommand(cmValue8)
        else
          Message('Выбор из каталога МЦ/услуг недоступен!', CancelButton+Warning);
      else
        if (IsValid(#SpStep))
          {
            PushPos(#SpStep);
            d3 := Add_Day(if(wGetTune('Reserv.CalcSrokReserv') = 0, Cur_Date, BaseDoc.dDoc), wGetTune('Reserv.SrokReserv'));
            if (RunDialog('FormSrokRes', d3) <> cmCancel)
              _LOOP SpStep
                {
                  SpStep.SrokRes := d3;
                  update current SpStep;
                }

            PopPos(#SpStep);

            a1 := SpStep.Nrec;
            if (GetFirst SpStep where ((a1 == SpStep.Nrec)) = tsOk)
              { }

            RescanPanel(tnSpStep);
          }
    }

//******************************************************************************

#ifdef __MTR_TO_SPEC__
cmIerarchy :
{
  var vcSp: comp;

  if ( (CurTable = #SpStep) and (IsValid(#SpStep)) )
    {
      RunInterface('EditMtr2Spec', if(not EditDOPosEnabled(false, false) and if(not CanEditInClosePeriod(true), not CanEditInClosePeriod(false), true), 1, if(SpStep.cSpMC = 0, if(IsValid(#SmetaStroy), 2, 0), 1))
                                 , GetLinkMTRAutoPick(CurField), word(coSpStep), SpStep.nRec);

      SetModified(true);
      UpdateTable;
    }

  vcSp := SpStep.nRec;

  PushPos(#SpStep);

  _LOOP SpStep where ((vcSp == SpStep.cSpMC))
    oMTRFun.CopySpecMTR(coSpStep, vcSp, coSpStep, SpStep.NRec);

  PopPos(#SpStep);
}
#end

//******************************************************************************

cmMulSelDO:
  if (EditDOPosEnabled(true, true) AND UKS_Used )
    {
      if (NotEditDO)
        Exit;

      if (Not isModifZhostkReserv(True))
        Exit;


      if (CurTable <> #BaseDoc)
        ProcessCommand(cmValue28);
      else
        if (IsValid(#SpStep))
          {
            PushPos(#SpStep);
            d3 := Add_Day(if(wGetTune('Reserv.CalcSrokReserv') = 0, Cur_Date, BaseDoc.dDoc), wGetTune('Reserv.SrokReserv'));
            if (RunDialog('FormSrokRes', d3) <> cmCancel)
              _LOOP SpStep
                {
                  SpStep.SrokRes := d3;
                  update current SpStep;
                }

            PopPos(#SpStep);

            a1 := SpStep.Nrec;
            if (GetFirst SpStep where ((a1 == SpStep.Nrec)) = tsOk)
              { }

            RescanPanel(tnSpStep);
          }
    }

//******************************************************************************

cmManagerId:
  {
    if (NewNotModified)
      Exit;

    if (UpdateTable)
      if (RunInterface('GetDescr', CurDescr, CurDesGr, CurVisib) <> cmCancel)
        {
          ResetBounds(#BaseDoc);
          SetDescrBounds;
          RereadRecord;
        }
  }

//******************************************************************************

cmDocBas:
  {
    if (NewNotModified)
      Exit;

    if (UpdateTable)
      RunInterface('InterDoc2Doc', BaseDoc.NRec, word(1));
  }

//******************************************************************************

cmValue20:
  oCalcFuns.RunCostUslRep(SpStep.NRec, coSpStep, 0);

//******************************************************************************

cmValue33:
  {
    CenaTr := 0;

    if (RunWindowModal(winTrPrice) = cmCancel)
      exit;

    Update SpStep
      set SpStep.Price :=  SpStep.Price + CenaTr * KatOtpEd.Koef;

    GetTotalSkid(FALSE);
  }

//******************************************************************************

cmValue35:
  {
    Var MCUsl, Price : comp;

    MCUsl := SpStep.cMCUsl;
    Price := SpStep.cPriceList;

    if (MCUsl = 0)
      Exit;

    RunInterface('PricesOtherInfo', MCUsl, Price, if(SpStep.PrMC = 1, 0, 1));
  }

//******************************************************************************
//Расчет типовой скидки по фактическим продажам Контрагенту
cmValue23:
  if (wGetTune('Oper.AlgSkid') <> 0)
    Message('Для расчета накопительной скидки по контрагенту в настройке '+
            'должна быть предусмотрена работа с простыми скидками.'#13+
            GetTuneName('Oper.AlgSkid'), Information);
  else  //если работаем по простым скидкам для ДО на продажу
    {
      var SumDO: double;       SumDO      := 0;
      var Old_VhSkid: word;    Old_VhSkid := BaseDoc.VhSkid;
      var Old_Skidka: double;  Old_Skidka := BaseDoc.Skidka;

      BaseDoc.VhSkid := 1; //Скидка как %
      BaseDoc.Skidka := 0;

      if (IsValid(#SpStep))
        GetTotalSkid(false); // пересчет всех позиций

      RescanPanel(#BaseDoc);

      SumDO := oValFunc.GetNatCurrency(BaseDoc.cVal, BaseDoc.Summa, BaseDoc.dDoc);

      var tmp_ZnachSk0: double; //значение скидки (процент)

      if ( not NullVipRef(piCalcSk_0) )
        FreeVipInterface(piCalcSk_0);

      if (piCalcSk_0.ReCalcNakopitSkid(BaseDoc.cOrg, SumDO, TRUE, tmp_ZnachSk0))
        {
          var tmp_ZnachSk2: double; //значение скидки (сумма)
          tmp_ZnachSk2 := SumDO/100*tmp_ZnachSk0;
          tmp_ZnachSk2 := (oValFunc.GetAnyCurrency(comp(0), tmp_ZnachSk2, BaseDoc.dDoc, BaseDoc.cVal))

          if (Message('Расчет накопительной скидки по контрагенту завершен.' +
                ''#13#3'Скидка составила '+string(tmp_ZnachSk0)+' % (' + string(tmp_ZnachSk2) + ' ' + SimVolB + ').' +
                ''#13#3'Установить эту скидку для текущего документа?', YesNo) = Yes)
            {
              BaseDoc.VhSkid := 1; //Скидка как %
              BaseDoc.Skidka := tmp_ZnachSk0;
            }
          else
            {
              BaseDoc.VhSkid := Old_VhSkid;
              BaseDoc.Skidka := Old_Skidka;
            }
        }
      else
        {
          BaseDoc.VhSkid := Old_VhSkid;
          BaseDoc.Skidka := Old_Skidka;
        }

      if (IsValid(#SpStep))
        GetTotalSkid(false); // пересчет всех позиций

      RescanPanel(#BaseDoc);
    }

//******************************************************************************

cmKauReff:
  if IsSlozhSkid
    {
      var TmpSid_: double;
      var TmpSid_1: word;
      var TmpSid_2: boolean;
      var TmpSid_3: comp;

      TmpSid_2 := ((BaseDoc.Status = 1) OR (BaseDoc.Status = 2))

      if NotEditPosStatus(false)
         TmpSid_2 := FALSE;

      if (boGetTune('Doc.Sell.NotEditDO'))
        if (IsValid(tnBaseFin) OR IsValid(tnKatSopr))
          TmpSid_2 := FALSE;

      if (CurTable = #BaseDoc)
        {
          TmpSid_1 := word(0);
          TmpSid_3 := BaseDoc.NRec;
        }
      else
        {
          TmpSid_1 := word(1);
          TmpSid_3 := SpStep.Nrec;
        }

      if (TmpSid_2)
        IsNeedReCalcSloznSkid := TRUE;

      RunInterface('SkidSum', TmpSid_1, TmpSid_3, TmpSid_2);

      if (TmpSid_2)
        {
          TmpSid_ := piCalcSkid.RePasteInDocSkid(TmpSid_3, TmpSid_1);
          RereadRecord(#BaseDoc);
          RereadRecord(#SpStep);

          if (IsValid(#SpStep))
            GetTotalSkid(false); // пересчет всех позиций

          IsNeedReCalcSloznSkid := FALSE;

          RescanPanel(#BaseDoc);
        }
    }

//******************************************************************************

cmInsertEditKN:
  if IsSlozhSkid
    {
       if not EditDOPosEnabled(true, true)
        Exit;

       if not ((BaseDoc.Status = 1) OR (BaseDoc.Status = 2))
         {
           Message('Запрещено редактирование документа-основания при статусе "закрытый"!',
                     Information);
           Exit;
         }
       else
         if (UpdateTable)
           {
             var TmpSid_: double;  TmpSid_ := piCalcSkid.ReCalcSkidAll(BaseDoc.NRec);

             RereadRecord(#BaseDoc);
             RereadRecord(#SpStep);

             if (IsValid(#SpStep))
               GetTotalSkid(false); // пересчет всех позиций

             //--корректировка скидок по настройке--
             var TmpIsRndSk: boolean;
             TmpIsRndSk := (wGetTune('Oper.AdvSkidRndSp')>0);

             if (TmpIsRndSk)
               if (wGetTune('Oper.AdvSkidRndSp') = 2)
                 TmpIsRndSk :=  (message('Произвести корректировку сложных скидок с учетом округления цены?', YesNo) = Yes);

             if (TmpIsRndSk)
               {
                 TmpSid_ := piCalcSkid.SkidRndSp(BaseDoc.NRec, word(1));
                 RereadRecord(#BaseDoc);
                 RereadRecord(#SpStep);
                 if (IsValid(#SpStep))
                   GetTotalSkid(false); // пересчет всех позиций
               }
             //-------------------------------------

             IsNeedReCalcSloznSkid := FALSE;
             RescanPanel(#BaseDoc);
             Message('Расчет закончен.' +
                   ''#13#3'Суммарная скидка по документу = '+string(TmpSid_), Information);
           }
    }

//******************************************************************************

cmValue22:
  if IsSlozhSkid
    {
      if not EditDOPosEnabled(true, true)
        Exit;

      if not ((BaseDoc.Status = 1) OR (BaseDoc.Status = 2))
        {
          Message('Запрещено редактирование документа-основания при статусе "закрытый"!',
                    Information);
          Exit;
        }
      else
        if (message('Удалить все скидки по документу?', YesNo) = Yes)
          if (UpdateTable)
            {
              var TmpSid_: boolean;  TmpSid_ := piCalcSkid.ClearInDocSkid(BaseDoc.NRec);

              // могли поменяться применимости сложных скидок или сами условия скидок
              // поэтому сбрасываем актуальность таблицы в памяти применимостей в объекте
              piCalcSkid.SetActualSkidPrimMEM(false);
              RereadRecord(#BaseDoc);
              RereadRecord(#SpStep);

              if (IsValid(#SpStep))
                GetTotalSkid(false); // пересчет всех позиций

              IsNeedReCalcSloznSkid := FALSE;

              RescanPanel(#BaseDoc);
              Message('Все скидки по документу удалены.', Information);
            }
    }

//******************************************************************************

cmValue24:
  if EditDOPosEnabled(true, true)
    if (RunInterface('change_pr', StepDoc.Nrec) <> cmCancel)
      {
        SelectPanel(#StepDoc);
        GetTotal(false);
        RereadRecord;
      }

//******************************************************************************

cmValue26:
  if EditDOPosEnabled(true, true)
    if (RunWindowModal(DeltaPrice) = cmDefault)
      {
        _LOOP SpStep
          if (GetFirst SpOtpEd where ((SpStep.cOtpEd == SpOtped.cOtpEd)) = tsOk)
            {
              set SpStep.Price := SpStep.Price - __Change_price;
              update current SpStep;
            }

        SelectPanel(#StepDoc);

        GetTotal(false);

        RereadRecord;
      }

//******************************************************************************

cmValue21:
  if EditDOPosEnabled(true, true)
    {
      if (NotEditDO)
        Exit;

      PickcBuildingDO;
    }

//******************************************************************************

cmVal7:
  if EditDOPosEnabled(true, true)
    {
      if (NotEditDO)
        Exit;

      PickZatr;
    }

//******************************************************************************

cmVal8:
  if EditDOPosEnabled(true, true)
    {
      if (NotEditDO)
        Exit;

      if (not UpdateTable)
        {
          Abort;
          Exit;
        }

      if (CurTable <> #BaseDoc)
        SelectPanel(#BaseDoc);

#ifdef __MTR_TO_SPEC__
      RunInterface('GetSpDocsMTR', word(coBaseDoc), BaseDoc.NRec);
#else
      RunInterface('GetSpDocsUKS', word(2), word(coBaseDoc), BaseDoc.NRec);
#end

      RereadRecord(#BaseDoc);
    }

//******************************************************************************

cmValue60:
  RunInterface('ShowSpesHowSmeta', BaseDoc.nRec, word(coBaseDoc));

//******************************************************************************

cmValue17:
  if ( ( KatUsl.TYPEUSL = 1 ) AND ( SpStep.PrMC <> 1 ) )
    {
      var NewPrice, NewKolSkl: double;

      NewPrice  := SpStep.Price;
      NewKolSkl := SpStep.KolSkl;

      var pSpStep, pUsl: comp;

      pSpStep := SpStep.nRec;
      pUsl    := KatUsl.nRec;

      RunInterface('GETPAR1', 1, pSpStep, pUsl, NewPrice, NewKolSkl, word(coSpStep));

      if ( not f_KolIsZero(NewPrice - SpStep.Price) OR not f_KolIsZero(NewKolSkl - SpStep.KolSkl) )
        {
          set SpStep.Price := NewPrice;
          set SpStep.Kol   := NewKolSkl;

          UpdateTable;
        }
    }

//******************************************************************************

cmValue29: { vidReport := 1; putCommand(cmPrintDoc);  }

//******************************************************************************

cmPrintDoc:
  if (CurTable = #BaseDoc)
    {
      if (NewNotModified)
        Exit;

      KillPick2;
      saveMyDsk(vidReport,'vidReport_vschet');
      MyPrintDoc;
      KillPick2;
      vidReport := 0;
    }

//******************************************************************************

cmDone:
  if (IsModified)
    UpdateTable;

//******************************************************************************

cmAccording: // кнопка ввода (дополнения) спецификации товаров из другого счета
  #include copydo.vpp

//******************************************************************************

cmValFld3: // копирование спецификации из приходной накладной
  CopySpSoprToDO;

//******************************************************************************

#include BaseDoc.qc

//******************************************************************************
//-----Кнопка резервирования товаров по документу-----------------------
cmValFld20:
  if EditDOPosEnabled(true, true)
    {
      if (NotEditDO)
        Exit;

      if (wGetTune('Reserv.PrSchSklad') < 2)
        MakeReserv
      else
        case RunMenu('mnuMakeReserv') of
          cmValue1: MakeReserv;
          cmValue2: MakeReservEx;
        end;
    }

//******************************************************************************

#include docompl.vpp // кнопка ввода (дополнения) спецификации наборами товаров

//******************************************************************************

cmValFld1:
  ButtonSoprDoc;

//******************************************************************************

cmValFld2:
  ButtonPayments;

//******************************************************************************

cmValue5:  //-- интерфейс с товарно-транспортной информацией
  ButtonTTI;

//******************************************************************************

cmValFld13:
  ShowNalogsDO;

//******************************************************************************

cmTextWind:
  if EditDOPosEnabled(true, true)
    ButtonRemark;

//******************************************************************************

cmAttrib:
  MyPass;

//******************************************************************************

cmAccording:
 if ((CurTable = #SpStep) AND (SpStep.prMC = 2))
   {
     var Sum: double;      Sum := 0;
     var procent: double;  procent := 0;

     if (rundialog('PerCent', procent) <> cmCancel)
       {
         PushPos(#SpStep);

         _LOOP spstep
           if ((SpStep.PrMC = 1) AND
               (pos(Upcase(trim(sGetTune('Tara.KodGrMcTara'))), Upcase(KatMC.kGroupMC)) <> 1))
              Sum := Sum + SpStep.Summa*procent/100;

         PopPos(#SpStep);

         SpStep.Kol := 1;
         SpStep.KolSkl := 1;
         set SpStep.Price := Sum;
         SpStep.Price := if (BaseDoc.cVal <> 0, oDOfuns.froundval2_1(SpStep.Price), oDOfuns.froundrub2_1(SpStep.Price));
         if (UpdateTable)
           { }
       }
   }

//******************************************************************************

cmValue15:
  if EditDOPosEnabled(true, true)
    {
      if (Not isModifZhostkReserv(True))
        Exit;

      if Not UpdateTable
        Exit;

      SubResTov(SpStep.Reserv); // Снятие резерва по товару
      SubResRazrez; // Снятие резерва по складу
      DelPosDORES;
      set SpStep.Reserv := 0;
      SpStep.SrokRes := longint(0);
      update current SpStep;
    }

//******************************************************************************

cmNal:
  SpravTov;

//******************************************************************************

cmValue18: // пересчет налогов по выбранной группе
  if EditDOPosEnabled(true, true)
    proc18;

//******************************************************************************

cmShowAll:
  if ((CurTable = #SpStep) AND (SpStep.cMCUSL <> 0) AND (SpStep.PrMC = 1))
     RunInterface('GSaldDat',
                   BaseDoc.dDoc,
                   word(0),
                   SpStep.cMCUSL,
                   BaseDoc.cParty,        // склад отгрузки
                   comp(-1),              // МОЛ
                   SpStep.cParty,         // партия товара
                   SpStep.cOtpEd);

//******************************************************************************
#include doattr.vpp //аттрибуты, классификаторы
#include vssoprhoz.vpp
#include vschobjs.vpp
//******************************************************************************

#ifdef __Export_NN__
cmSetGrNal: // выбор группы налогов
  {
    var cNewGrNal: comp;  cNewGrNal := 0;

    if (RunInterface(GetGrNal, cNewGrNal, word(0)) <> cmCancel)
      {
        if (IsValid(#KatSopr))
          if (Message('Вы согласны внести несоответствие между налогами накладной и ДО?', YesNo) <> cmYes)
            Exit;

        PushPos(#SpStep);

        _LOOP SpStep
          {
            ChangePos(cNewGrNal);
            set SpStep.ManualTax := 0;
            set SpStep.cGrNal := cNewGrNal;
            update current spstep;
            ModifDo;
          }

        PopPos(#SpStep);
      }
  }
#end

//******************************************************************************
// связь с книгой финансовых операций (Sanny)
cmBudgetPlan: // Формирование плановых данных бюджета
  if (UpdateTable)
    RunViewFpOborotBySoprHoz(cgReg_AdmFPPlan, SoprHoz.NRec);

//******************************************************************************

cmBudgetFact: // Формирование фактических данных бюджета
  if (UpdateTable)
    RunViewFpOborotBySoprHoz(cgReg_AdmFPFact, SoprHoz.NRec);

//******************************************************************************

cmHotKeys:
  case CurTable of
  //--------------
    #BaseDoc:
      {
        ChangeEnabledCommands(true);
#ifndef __MTR_TO_SPEC__
        if not UKS_Used
          {
            SetCommandEnabled(cmValue21, FALSE);
            SetCommandEnabled(cmVal8   , FALSE);
            SetCommandEnabled(cmVal7   , FALSE);
          }
#end

        SetCommandEnabled(cmValFld8, TRUE);
        SetCommandEnabled(cmValue24, boGetTune('Tara.AutoPaste'));

        var sDynMenuName: string;  sDynMenuName := #AddComp('L_BASEDOC')'mnuVschet';

        if (boGetTune('Oper.CalcKol'))
          sDynMenuName := sDynMenuName + ';' + #AddComp('C_COMMON')'CalcKol_HotKeys';

        // связь с книгой финансовых операций (Sanny)
        sDynMenuName := MakeMenuWithViewFpOborot(sDynMenuName);

        // просмотр налоговых накладных
        if (wGetTune('Country') = 2)
          sDynMenuName := sDynMenuName + ';SEPARATOR;' + #AddComp('L_BASEDOC')'mnuNalNaklDoc';

        PutHotCommand(RunDynMenu(sDynMenuName + ';SEPARATOR;' + #AddComp('L_BASEDOC')'mnuVschetVn'));

        SetCommandEnabled(cmValFld8, SpStep.PrMc = 1);
      }
  //--------------
    else
      {
        if (IsValid(#KatStroy1))
          SetCommandEnabled(cmValFld16, FALSE);

        if NOT UKS_Used
          SetCommandEnabled(cmMulSelDO, FALSE);

        ChangeEnabledCommands(SpStep.PrMc <> 1);
        PutHotCommand(RunMenu('mnuVschet1'));
        ChangeEnabledCommands(TRUE);
        SetCommandEnabled(cmValFld16, TRUE);
      }
  //--------------
  end; // case

//******************************************************************************

cmCalcKol:
  Message('ИТОГО количество по документу: ' + Trim(String(CK.GetKolForBaseDoc(BaseDoc.NRec), 15+prSignsInKol, prSignsInKol)));

//******************************************************************************
// Дублируемые позиции
cmDublSopr:
  DublBaseDoc;

//******************************************************************************

#include lnkdocbd.vpp

//******************************************************************************

cmVal1:
  ProcessCommand(cmVal1)

//******************************************************************************

cmVrem:
  ProcessCommand(cmVrem);

//******************************************************************************

cmRaspVIPMC:
  if wGetTune('Doc.Buy.MakeRaspMC') = word(0)
    {
      if UpdateTable
        RunInterface('MakeRaspByDOG', BaseDoc.NRec);

      RereadRecord(#BaseDoc);
    }
  else
    Message('В системе установлено выполнение распределения в накладных!'#13 +
            'Формирование отменено.'#13 +
            'см.настройку ' + GetTuneName('Doc.Buy.MakeRaspMC'));


//******************************************************************************

cmValue27: // Отчет Резерв по ДО
  if (CurTable = #BaseDoc)
    RunInterface('iReserv', BaseDoc.NRec);

end; // HandleEvent;
end; // Window

//******************************************************************************
//******************************************************************************
//******************************************************************************

Panel pnVSchet;  // in main
  Table BaseDoc;

//******************************************************************************

#include dowin.vpp

//******************************************************************************

Procedure SetColSort;
{
  if ( wSortField = 1 )
    SetColumnSorting(brVSchet, #NoDoc, 1);
  else
    SetColumnSorting(brVSchet, #BaseDoc.dDoc, 1);
}

//******************************************************************************

HandleEvent

//******************************************************************************

cmDocBas:
  {
    if (NewNotModified)
      Exit;

    if (UpdateTable)
      RunInterface('InterDoc2Doc', BaseDoc.NRec, word(1));
  }

//******************************************************************************

cmPrintDoc:
  if (CurTable = #BaseDoc)
    {
      if (NewNotModified)
        Exit;

      var boPickedDO: boolean;
      boPickedDO := (GetFirst FastFirstRow Pick3 where ((word(15) == Pick3.wList))<>tsOK)

      saveMyDsk(vidReport,'vidReport_vschet');
      MyPrintDoc;

      if (boPickedDO)
        KillPick2;

      vidReport := 0;

      RereadRecord;
    }

//******************************************************************************

cmPlansNo:
  if ( CurTable = #BaseDoc )
    {
      Var tmpKM : longint;

      SaveMyDsk(vidReestr,'vidReestr');

      tmpKM := InitMarker('ReestrBDoc_BaseDoc', 8, 100, 10, false);

      ClearMarker(tmpKM);

      PushPos(#Pick2);

      if ( GetFirst Pick2 where (( word(15) ==  Pick2.wList )) = tsOk )
        _loop Pick2 where (( word(15) ==  Pick2.wList ))
          InsertMarker(tmpKM, Pick2.cRec);
      else
        InsertMarker(tmpKM, BaseDoc.NRec);

      PopPos(#Pick2);

      vidReestr := 0;

      RunInterface('ReestrBDoc', tmpKM, BaseDoc.VidDoc);
      DoneMarker(tmpKM, '');
    }

//******************************************************************************

cmValue30:
  {
    vidReestr := 1;
    putCommand(cmPlansNo);
  }

//******************************************************************************

cmSetDefault:
  {
    if DemoMode
      {
        var pRecChecker: RecChecker;
        if not pRecChecker.CheckBaseDocRecords(tipDO)
          {
            Abort;
            Exit;
          }
      }

    if (CurDescr <> sGetTune('User.Descr'))
      if (message('При создании нового документа выбранные ограничения '+
                  'по менеджеру будут отменены, установятся ограничения '+
                  'из Вашей настройки пользователя.'#13#13'Продолжить?',
                  YesNo+Confirmation) <> cmYes)
         Abort
       else
        SetDescrBounds;

    if (wGetTune('Doc.SkidkaDo') = 0)
      {
        BaseDoc.VhSkid := 1;
        BaseDoc.Skidka := doGetTune('Doc.SkidDo');
      }

    BaseDoc.Direct := 1;

    if (boGetTune('FN.isNumStatDoc'))
      if ( RunInterface(GetStatD, BaseDoc.cStatDoc) <> cmDefault )
        if ( Message('Номер ДО будет установлен без учета категории.'#13#13'Продолжить?', Confirmation + YesNo ) <> cmYes )
          {
            Abort;
            Exit;
          }

    #include doset.vpp // для инкремента по SetDef ДО
    #include doclear.vpp // очистка скидок

    if NotEditpos(false)
      {
        ProtectRecord(#BaseDoc, TRUE);
        ProtectRecord(#StepDoc, TRUE);
      }

    if ( (wDateInp AND 1) = 1 )
      BaseDoc.dDoc := Date(0, 0, 0);

    BaseDoc.YearDoc := Year(BaseDoc.dDoc);

    ProcessCommand(cmNullStep);

    BaseDoc.cOrg := comp(0);

    if ((_wFltBaseDoc AND 2) <> 0) AND (cFltRecOrg <> comp(0))
      {
        BaseDoc.cOrg := cFltRecOrg;
        SetBankDef;
      }

    if ((_wFltBaseDoc AND 8) <> 0)
      BaseDoc.DesGr := sFltGrDes;

    if boGetTune('Doc.AvtoGrDo')  // запрос группы ДО
      {
        cGrDo := 0;
        RunInterface('GetGroupSch', 3, 3, 0, FALSE, cGrDo, FALSE);

        if (GetFirst GroupSch where((cGrDo == GroupSch.NRec)) = tsOk)
          if ((_wFltBaseDoc AND 2) = 0)
            {
              if ( GroupSch.cOrg <> 0 )
                {
                  #include DoKontrBefore.vpp

                  BaseDoc.cOrg := GroupSch.cOrg;

                  #include DoKontrAfter.vpp
                }
            }
          else
            if (cFltRecOrg <> GroupSch.cOrg)
              {
                Message('Выбранная группа договоров относится к другому контрагенту!');
                cGrDO := comp(0)
              }
      }

    case wGetTune('Reserv.PrSchSklad') of
      1:
        {
          BaseDoc.cParty := coGetTune('User.cCurSklad');
        }
      2:
        {
          if ExistTune('Reserv.DO_Sklad_Enabled')
            if ( wGetTune('Reserv.DO_Sklad_Enabled') > 0 )
              {
                BaseDoc.cParty := coGetTune('User.cCurSklad');

                if ExistTune('ResRestrict.cSklad')
                  if ( coGetTune('ResRestrict.cSklad') <> 0 )
                    BaseDoc.cParty := coGetTune('ResRestrict.cSklad');
               }
        }
    end;

    BaseDoc.TaraVoz := wGetTune('Tara.TaraVoz') + 1;

    if oStatUser.Descr_Stat_U(true, typsoprhoz, CurDescr, BaseDoc.cNote)
      BaseDoc.Status := KatNotes.Status;
    else
      BaseDoc.cNote := oNotes.GetFirstNote(word(40), BaseDoc.Status);

    oDOfuns.SetRoundFormat(tipDO, BaseDoc.cVal <> 0);

    #include rsv.vpp // изменение видимости полей

    SaveMyDsk(TRUE, 'BaseDoc_MakeDO');

    epBeforeMakeDO(TBaseDoc(BaseDoc.Buffer));

    var Datechanged, ChanSt: boolean;

    ReadMyDsk(ChanSt, 'BaseDoc_MakeDO', Datechanged);

    if not ChanSt
      {
        Abort;
        Exit;
      }

    if (CurWindow < 0)
      PutCommand(cmValue1);

    SelectField(#NoDoc);
    ProcessCommand(cmIdle);
  }

//******************************************************************************

cmDefault:
  {
    // сохранение помеченных
    delete all tmpPicked;

    _LOOP Pick3 where ((word(15) == Pick3.wList))
      {
        ClearBuffer(tntmpPicked);
        tmpPicked.wList  := Pick3.wList;
        tmpPicked.PickNum := Pick3.PickNum;
        tmpPicked.pickkol := Pick3.pickkol;
        tmpPicked.cRec   := Pick3.cRec;
        insert current tmpPicked;
      }

    KillPick2;

    _CanModify      := TRUE;
    _CanModifyQuery := TRUE;

    var NeedProtect: boolean;

    if NotEditPos(FALSE)
      NeedProtect := TRUE
    else
      {
        _CanModifyQuery := oSDfuns.CanModifyDocument(BaseDoc.NRec, typsoprhoz, TRUE);
        NeedProtect     := not _CanModifyQuery;
      }

    if ( NotEditPosStatus(FALSE) )
      NeedProtect := TRUE
    else
      if boGetTune('Doc.Sell.NotEditDO')
        if ( IsValid(tnBaseFin) OR IsValid(tnKatSopr) )
          NeedProtect := TRUE;

    ProtectRecord(#BaseDoc, NeedProtect);
    ProtectRecord(#StepDoc, NeedProtect);
    ProtectRecord(#SpStep,  NeedProtect);

    old_PrVoz := BaseDoc.TaraVoz;
    oDOfuns.SetRoundFormat(tipDO, BaseDoc.cVal <> 0);

    RunWindow(wVSchetZ);

    SelectField(#BaseDoc.dDoc);
    RescanPanel(#BaseDoc);
    RescanPanel(#SpStep);

    Stop;
  }

//******************************************************************************

cmCheckRecord:
  if (BaseDoc.cOrg = 0)
    {
      Message('В документе-основании необходимо указать контрагента', Warning + OkButton);
      SelectField(#KatOrg.Name);
      Abort;
    }
  else
    {
      if (not (IsValid(tnKatPayment) AND IsValidNew(tnKatPayMent)))
        if (boGetTune('Doc.Sell.FormPlat'))
           Message('В документе-основании не указана форма расчета!'#13+
                   GetTuneName('Doc.Sell.FormPlat'), Warning + OkButton);

      if (BaseDoc.cCalPlan <> 0)
        oChkSchem.CheckSchem(BaseDoc.cCalPlan, word(403), BaseDoc.nRec, typsoprhoz, TRUE)
      else
        if (BaseDoc.cAppDogovor <> 0)
          oChkSchem.CheckSchem(BaseDoc.cAppDogovor, word(401), BaseDoc.nRec, typsoprhoz, TRUE)
        else
          if (BaseDoc.cDogovor <> 0)
            oChkSchem.CheckSchem(BaseDoc.cDogovor, word(400), BaseDoc.nRec, typsoprhoz, TRUE);
    }

//******************************************************************************

cmInsertRecord:
  if ((BaseDoc.TipMoney <> 1) AND ( BaseDoc.cVal = 0 ))
    {
      Message('Выберите базовую валюту для документа!', Confirmation);
      if (CurWindow > 0)
        {
          SelectField(#SimVolB);
          PutCommand(cmPick);
        }

      Abort
    }
  else
    {
#include doins.vpp // для инкремента по insert ДО

      if (BaseDoc.cGrPol = comp(0))
        BaseDoc.cGrPol := BaseDoc.cOrg;

      BaseDoc.Nrec := 0;

      if (BaseDoc.cGrOtpr = comp(0))
        BaseDoc.cGrOtpr := coGetTune('MyOrg');

      if (BaseDoc.cNazna = comp(0))
        BaseDoc.cNazna := coGetTune('Doc.cNazna');

      if ( insert current BaseDoc <> tsOk )
        {
          message('Ошибка добавления записи в таблицу BaseDoc'#13#13
                + 'Для отмены ввода нажмите <Alt+Backspace>', Error + OkButton);
          Abort;
          Exit;
        }

      if (cGrDo <> 0) AND boGetTune('Doc.AvtoGrDo')
        {
          ClearBuffer(#SpGrSch);
          SpGrSch.cGroupSch := cGrDo;
          insert current SpGrSch;
        }

      ProcessCommand(cmNullStep);

      dStart := BaseDoc.dDoc;
      StepDoc.dEnd := BaseDoc.dEnd;

      if (BaseDoc.cVal = 0)
        {
          StepDoc.Summa := Total;
          StepDoc.SumVal := 0;
        }
      else
        {
          StepDoc.Summa := 0;
          StepDoc.SumVal := Total;
        }

      StepDoc.cVal     := BaseDoc.cVal;
      StepDoc.Name     := BaseDoc.Name;
      StepDoc.Status   := BaseDoc.Status;
      StepDoc.Nrec     := 0;
      StepDoc.cBaseDoc := BaseDoc.Nrec;

      if ( BaseDoc.dDoc <> ZeroDate )
        {
          if ( wGetTune('Oper.Sell.DO.dOplMaxDef') <> 0 )
            StepDoc.dOplMax := Add_Day(BaseDoc.dDoc, wGetTune('Oper.Sell.DO.dOplMaxDef'));

          if ( wGetTune('Oper.Sell.DO.dOtgrDef') <> 0 )
            StepDoc.dOtgr := Add_Day(BaseDoc.dDoc, wGetTune('Oper.Sell.DO.dOtgrDef'));
        }

      if (insert current StepDoc <> 0)
         Message('Не добавилась запись в StepDoc', Error);

      InsertDoSoprHoz;

      piOFPOut.OnChangeBaseDoc(TBaseDoc(BaseDoc.buffer), cgCom_BaseDocInsert);
    }

//******************************************************************************

cmUpdateRecord:
  if ((BaseDoc.TipMoney <> 1) AND ( BaseDoc.cVal = 0 ))
    {
      Message('Выберите базовую валюту для документа!', Confirmation);

      if (CurWindow > 0)
        {
          SelectField(#SimVolB);
          PutCommand(cmPick);
        }

      Abort;
    }
  else
    {
      update current BaseDoc;

      dStart := BaseDoc.dDoc;
      StepDoc.dEnd := BaseDoc.dEnd;

      if (BaseDoc.cVal = 0)
        {
          StepDoc.Summa := Total;
          StepDoc.SumVal := 0;
        }
      else
        {
          StepDoc.Summa := 0;
          StepDoc.SumVal := Total;
        }

      StepDoc.cVal := BaseDoc.cVal;
      StepDoc.Name := BaseDoc.Name;
      StepDoc.Status := BaseDoc.Status;

      if (update current StepDoc <> 0)
         Message('Не обновилась запись в StepDoc', 0);

      UpDateDoSoprHoz;

      piOFPOut.OnChangeBaseDoc(TBaseDoc(BaseDoc.buffer), cgCom_BaseDocUpdate);
    }

//******************************************************************************

cmAbortInsert:
  if ( not IsMakingDOOnDog )
    DelLastNumDOnBaseDoc;

//******************************************************************************

cmDeleteRecord:
  {
    if ( not EditDOPosEnabled(true, true) )
      {
        Abort;
        Exit;
      }

    if SomePicked AND boGetTune('Doc.DelByMarker')
      {
        if (message('Удалить помеченные документы?', YesNo+mfSwapButtons) = yes)
          {
            ResetBounds(#Pick2);

            _LOOP Pick2 where ((word(15) == Pick2.wList))
              if (GetFirst BaseDoc where (( Pick2.cRec == BaseDoc.nRec )) = tsOk)
                if oSDfuns.CanModifyDocument(BaseDoc.nRec, typsoprhoz, FALSE)
                  if DoBaseDocDelete(true)
                    { }

            SetBounds(#Pick2);
            KillPick2;
          }

        RereadRecord(#BaseDoc)
        Exit;
      }

    if (message('Удалить текущий документ?', YesNo+mfSwapButtons) <> yes)
      {
        if not oSDfuns.CanModifyDocument(BaseDoc.NRec, typsoprhoz, FALSE)
          {
            ProtectRecord(#BaseDoc, TRUE);
            ProtectRecord(#StepDoc, TRUE);
            ProtectRecord(#SpStep, TRUE);
          }

        Abort
      }
    else
      {
        if DoBaseDocDelete(true)
          RereadRecord(#BaseDoc)
        else
          Abort;
      }
  }

//******************************************************************************

cmPick:
  if (CurField = #KatNotes.Name)
    {
      if (not IsValid(tnSpStep))
        {
          Message('Нет спецификации!', Confirmation);
          Exit;
        }

      var old_Status: word;  old_Status := BaseDoc.Status;
      var old_cNote: comp;   old_cNote  := BaseDoc.cNote;

      Var cn1 : comp;
      Var st  : word;

      cn1 := BaseDoc.cNote;
      st  := BaseDoc.Status;

      SaveMyDsk(TRUE, 'BaseDoc_ChangeStatusDO');

      epBeforeChangeStatusDO(TBaseDoc(BaseDoc.Buffer));

      var Datechanged, ChanSt: boolean;

      ReadMyDsk(ChanSt, 'BaseDoc_ChangeStatusDO', Datechanged);

      if not ChanSt
        {
          Abort;
          Exit;
        }

      UpdateTable;

      if not RunPostStatusChangeAlg(cn1, TRUE)
        Exit;

      ReReadRecord(#BaseDoc);

      if (RunInterface('StatLog',
                       word(1024+1),
                       BaseDoc.NRec,
                       word(typsoprhoz),
                       BaseDoc.Status,
                       BaseDoc.cNote,
                       word(0)) = cmCancel)
        {
          Abort;
          Exit;
        }

      if ( BaseDoc.Status <> old_Status )
        case old_Status of
        //--------------------
          1: // 'оформляемый'
            {
              if (wGetTune('Doc.DolgKontr') <> 0)
                {
                  if NullVipRef(oCheckKon)
                    GetVipRef(oCheckKon, 'KatOrg');

                  if (not oCheckKon.CheckDolgKon(BaseDoc.cOrg, BaseDoc.dDoc, BaseDoc.Total, BaseDoc.cVal))
                    {
                      set BaseDoc.cNote  := cn1;
                      set BaseDoc.Status := old_Status;

                      Exit;
                    }
                }

              if (wGetTune('OPER.Dogovor.ControlDO') <> 0) // Контроль в ДО наличия ссылки на договор
                if (BaseDoc.cDogovor = comp(0))
                  {
                    Message('Нет ссылки на договор!'#13'Изменение статуса запрещено!'#13#13+
                            GetTuneName('OPER.Dogovor.ControlDO'),
                            Warning + CancelButton);
                    set BaseDoc.cNote  := cn1;
                    set BaseDoc.Status := old_Status;

                    Exit;
                  }

              var boIsContinue: boolean;  boIsContinue := TRUE;

              boIsContinue := CtrlBaseDocUnderDog(BaseDoc.VidDoc
                                                , BaseDoc.nRec
                                                , BaseDoc.cDogovor
                                                , BaseDoc.cAppDogovor
                                                , BaseDoc.cCalPlan
                                                 );

              if (boIsContinue)
                boIsContinue := iDolg_DG.ControlDolg_DG_4BaseDoc(BaseDoc.cOrg,
                                                                 if(BaseDoc.cAppDogovor = 0, BaseDoc.cDogovor,
                                                                                             BaseDoc.cAppDogovor),
                                                                 BaseDoc.Total,
                                                                 BaseDoc.cVal,
                                                                 word(1));

              if (not boIsContinue)
                {
                  set BaseDoc.cNote  := cn1;
                  set BaseDoc.Status := old_Status;
                  Exit;
                }

            } // cmIsplon
        //--------------------
          2: // 'исполняемый'
            {
              if ( RecordExists SpStep where (( word(1)      == SpStep.PrMC     AND
                                                StepDoc.nRec == SpStep.cStepDoc AND
                                                (SpStep.Reserv > doGetTune('Oper.MinKolMC'))
                                             )) = tsOk )
                {
                  Message('Есть резервы по спецификации!'#13'Изменение статуса запрещено!', Warning + CancelButton);
                  set BaseDoc.cNote  := cn1;
                  set BaseDoc.Status := old_Status;
                  Exit;
                }
            }
        //--------------------
        end; //case

      set BaseDoc.Status := BaseDoc.Status;
      set BaseDoc.cNote  := BaseDoc.cNote;

      if ( BaseDoc.Status <> old_Status )
        if (BaseDoc.Status = 2)
          {
            var NeedReserv: boolean;  NeedReserv := TRUE;

            if (wGetTune('Reserv.PrSchSklad') <> 2) // резервирование НЕ по складскому разрезу
              if (not boGetTune('Reserv.SchReserv')) // НЕ автоматическое резервирование
                NeedReserv := FALSE;

            if (NeedReserv)
              if (not NotEditpos(false))
                if (Message('Произвести резервирование по ДО?', YesNo) = cmYes)
                  if (not MakeReserv)
                    {
                      oStatLog.StatLog_DeleteLast(word(40), BaseDoc.NRec);
                      set BaseDoc.Status := old_Status;
                      set BaseDoc.cNote  := old_cNote;
                    }
            EnableCommand ( cmValFld20 );
            SetCommandEnabled(cmBuhCalculator, True);
          }
        else
          {
            DisableCommand ( cmValFld20 );
            SetCommandEnabled(cmBuhCalculator, False);
          }

      UpdateTable;

      if not RunPostStatusChangeAlg(cn1, FALSE)
        {
          oStatLog.StatLog_InsNewStat(word(40),
                                      BaseDoc.nRec,
                                      BaseDoc.Status,
                                      BaseDoc.cNote,
                                      st,
                                      cn1,
                                      'Изменение статуса блокировано алгоритмом');

          Update Current BaseDoc set BaseDoc.Status := st,
                                     BaseDoc.cNote  := cn1;
        }

      ReReadRecord(#BaseDoc);

      var b: boolean;  b := NotEditPosStatus(FALSE);

      if (boGetTune('Doc.Sell.NotEditDO'))
        b := (IsValid(tnBaseFin) OR IsValid(tnKatSopr))

      ProtectRecord(#BaseDoc, b);
      ProtectRecord(#StepDoc, b);

      BDSetFieldCellVal;

      update current BaseDoc;

      ArhObj1.ArhKart(BaseDoc.NRec, BaseDoc.Status);
    }

//******************************************************************************

cmMarkUnMark:
  Pick2Ins;

//******************************************************************************

cmSelectall:
  Pick2Plus;

//******************************************************************************

cmUnSelectall:
  Pick2Minus;

//******************************************************************************

cmValFld5:
  {
    if (GetFirst Pick3 where ((word(15) == Pick3.wList))<>tsOk)
      if (BaseDoc.VhodNal <> 1)
        {
          Pick3.wList := 15;
          Pick3.PickNum := 100;
          Pick3.pickkol := 0;
          Pick3.cRec := BaseDoc.nrec;
          insert current Pick3;
        }
      else
        {
          Message('Налоги входят в цену.'#13+
                  'Изменение получателя налогов недопустимо', OkButton+Information);
          Exit
        }

    PushPos(#BaseDoc);

    ReplOrgNalog;  //Групповое изменение получателя налогов

    KillPick2;

    PopPos(#BaseDoc);
    RereadRecord;
  }

//******************************************************************************

cmColumnClicked :
{
  if ( (Target <> #BaseDoc.dDoc) and (Target <> #NoDoc) )
    exit;

  if ( Target = #NoDoc )
    {
      if ( CurVisib <> dcAllModif )
        {
          Message( 'Для установки сортировки по полю "Номер" настройка'#13
                 + '"Доступ к документам" должна иметь значение "все права".'
                 );

          exit;
        }

      if ( (not BoundActive(tbMainBoundOdDoc)) and (not BoundActive(tbMainBoundONoDoc)) )
        {
          Message( 'Для установки сортировки по полю "Номер"'#13
                 + '             необходимо снять фильтр.'
                 );

          exit;
        }

      if ( BoundActive(tbMainBoundOdDoc) )
        {
          PopBounds(tbMainBoundOdDoc);
          PushBounds(tbMainBoundONoDoc);
        }

      wSortField := 1;
    }
  else
    {
      if ( BoundActive(tbMainBoundONoDoc) )
        {
          PopBounds(tbMainBoundONoDoc);
          PushBounds(tbMainBoundOdDoc);
        }

      wSortField := 0;
    }

  SetColSort;
  ReReadRecord;
}

//******************************************************************************

end; // HandleEvent
end; // Panel

//******************************************************************************

#include ofpdof2.vpp

//******************************************************************************

Procedure ProcValue8;
{
  var NeedRecalc: boolean;  // признак необходимости пересчета
  var NSpecif   : string;
  var PrNom     : word;
  var TruncedEd: longint; TruncedEd := 0;
  var PrNrec    : comp;
  var RVhod     : word;

  NeedRecalc := (BaseDoc.Skidka <> 0) AND (BaseDoc.VhSkid = 2); // скидка в сумме
  if not NeedRecalc
    {
      PushPos(#SpStep);
      NeedRecalc := (RecordExists SpStep where (( StepDoc.nRec == SpStep.cStepDoc AND
                                                  word(1)      << SpStep.PrMC     AND
                                                (KatUsl.TYPEUSL = 1)
                                               )) = tsOk);
      PopPos(#SpStep);
    }

  PrNom := SpStep.PrMC;
  pmc_ := SpStep.cMcUsl;
  if (PrNom = 1)
    {
      w1 := RunInterface('GetSomeMC', pmc_)
      WordPV := 7;
    }
  else
    {
      w1 := RunInterface('GetSomeUsl', pmc_);
      WordPV := 12;
    }

  var NRecSaved: comp;  NRecSaved := 0;

  if (w1 = cmCancel)
    {
      Abort;
      Exit;
    }
  else
   {
     PrNrec := 0;
     if boGetTune('Pick.PriceAfterPick')
       {
         RunInterface(GetKlPr, PrNrec, word(0), word(1), if(PrNom = 1, word(1), word(2)));
         if (GetFirst KlPrice where ((PrNrec == KlPrice.NRec)) = tsOk)
           { }
         RVhod := KlPrice.VhodNal;
       }

     if (not IsNew)
       {
         var cSmet: comp;
         var cDO: comp;
         if (GetFirst SpDocSmeta where ((coSpStep == SpDocSmeta.coTable AND
                                         SpStep.nRec == SpDocSmeta.cSpec)) = tsOk)
           {
             cSmet := SpDocSmeta.cPosition;
             cDO := SpStep.cStepDoc;

             _LOOP SpDocSmeta1 where ((coSpStep == SpDocSmeta1.coTable AND
                                       cDO == SpDocSmeta1.cDoc AND
                                       cSmet == SpDocSmeta1.cPosition))
               {
                 if (GetFirst SpStep where ((SpDocSmeta1.cSpec == SpStep.nRec)) = tsOk) {};
                 SubResTov(SpStep.Reserv); // Снятие резерва по товару
                 SubResRazrez; // Снятие резерва по складу
                 DelPosDORES;
                 DelPosSpDocNal;

                 if (GetFirst SpOtpEd where ((SpStep.cOtpEd == SpOtpEd.cOtpEd)) = tsOk)
                 {
                   oDOTara.DeleteTara(SpStep.cStepDoc, SpStep.cOtpEd, SpStep.NRec, SpStep.KolSkl);
                   NeedRecalc := TRUE;
                 }

                 NeedRecalc := NeedRecalc OR (SpStep.Kol*SpStep.Price > 0.0);
                 oDOfuns.SpStep_Delete(SpStep.nRec);
               }
           }
         else
           {
             SubResTov(SpStep.Reserv); // Снятие резерва по товару
             SubResRazrez; // Снятие резерва по складу
             DelPosDORES;
             DelPosSpDocNal;

             if (GetFirst SpOtpEd where ((SpStep.cOtpEd == SpOtpEd.cOtpEd)) = tsOk)
             {
               oDOTara.DeleteTara(SpStep.cStepDoc, SpStep.cOtpEd, SpStep.NRec, SpStep.KolSkl);
               NeedRecalc := TRUE;
             }

             NeedRecalc := NeedRecalc OR (SpStep.Kol*SpStep.Price > 0.0);
             oDOfuns.SpStep_Delete(SpStep.nRec);
           }
       }

     if (RecordExists Pick where ((WordPV == Pick.wList)) = tsOk)
       {
         StartNewVisual(vtNumericVisual, vfTimer+vfBreak+vfConfirm,
                         'Пополнение спецификации документа выбранными '+
                         'позициями каталога...'#13#3, 1);
         _LOOP Pick where ((WordPV == Pick.wList)) ordered by index pick02
           {
             if not NextVisual
               Break;

             if (GetFirst FastFirstRow KatOtpEd
                    where (( Pick.cRec       == KatOtpEd.cMCUSL AND
                             word(1)         == KatOtpEd.Akt    AND
                             if(PrNom = 1, 1, 2) == KatOtpEd.PrMC )) = tsOk)
               SpStep.cOtpEd := KatOtpEd.Nrec
             else
               {
                 NSpecif := '';
                 if (PrNom = 1)
                   {
                     if (GetFirst FastFirstRow KatMC
                            where ((Pick.cRec == KatMc.NRec)) <> tsOk)
                       NSpecif := KatMC.Name;
                   }
                 else
                   {
                     if (GetFirst FastFirstRow KatUsl
                            where ((Pick.cRec == KatUsl.NRec)) <> tsOk)
                       NSpecif := KatUsl.Name;
                   }

                 Message('Не задана активная отпускная единица измерения для ' + NSpecif + '!', Warning);
                 SpStep.cOtpEd := 0;
               }

             if ( GetFirst SpStepC where (( SpStep.nRec == SpStepC.nRec )) <> tsOk )
               oLinkMTR2Spec.DelVal(word(coSpStep), SpStep.nRec);

             SpStep.nRec := GetNextNRec(#SpStep, 0);
             oLinkMTR2Spec.SetVal(word(coSpStep), SpStep.nRec, coGetTune('CelUchForModul.SELL'));

             SpStep.Price  := 0;
             SpStep.cGrNal := 0;
             SpStep.cOtpEdGrM := 0;
             SpStep.dDoc   := BaseDoc.dDoc;
             SpStep.cMcUsl := Pick.cRec;
             SpStep.KolSkl := Pick.PickKol;

             if (WordPV = 12)
               {
                 if (GetFirst FastFirstRow KatUsl = tsOk)
                   { }

                 if (SpStep.KolSkl = 0)
                   {
                     SpStep.KolSkl := KatUsl.KolAkt;
                     SpStep.cGrNal := KatUsl.cGrNal;
                   }
               }

             //проверка на неделимость отп.ед. для МЦ
             if (SpStep.cOtpEd <> 0)
               if (KatOtpEd.Diskret = 1)
                 if NOT fEdIzm.IsKolDiskret(SpStep.KolSkl)
                   {
                     SpStep.KolSkl := trunc(SpStep.KolSkl);
                     TruncedEd     := TruncedEd + 1;
                   }

             SpStep.Kol := SpStep.KolSkl;
             SpStep.ProcUb := 0;
             SpStep.PrMC := PrNom;

             if ((BaseDoc.VidDoc = 201 OR BaseDoc.VidDoc = 1420)AND(SpStep.PrMC = 2))  // для ДО на продажу
               SpStep.PrUsNkl  := wGetTune('Doc.UslDoSell');

             if (SpStep.PrMC = 1)
               if (GetFirst FastFirstRow KatMC where (( Pick.cRec == KatMC.Nrec )) = tsOk)
                 {
                   SpStep.ProcUb := oSDfuns.GetNormUbFromKatalog(oDOfuns.GetTipHozOnVidDoc(BaseDoc.VidDoc), 0, KatMC.NormUb);
                   SpStep.Kol    := SpStep.KolSkl * (1-SpStep.ProcUb/100);
                   SpStep.cMasEd := KatMC.cMasEd;
                   SpStep.Netto  := KatMC.Massa;
                   SpStep.mTara  := KatMC.mTara;
                   SpStep.cGrNal := KatMC.cGrNal;
                 }

             SpStep.cStepDoc := StepDoc.NRec;
             SpStep.cVal := StepDoc.cVal;
             if (PrNrec = 0)
               {
                 SpStep.Price  := 0;
                 SpStep.Summa  := 0;
                 SpStep.SumVal := 0;
                 SpStep.Nds    := 0;
               }
             else
               {
                 if (GetFirst FastFirstRow Prices
                        where (( PrNrec        == Prices.cKlPrice AND
                                 SpStep.cMcUsl == Prices.cThing   AND
                                 (SpStep.cOtpED = Prices.cOtpEd)
                               )) = tsOk)
                   {
                     InitPriceSpStep(RVhod, fnal, Prices.Price, Prices.SumVal);
                     SpStep.cPriceList := PrNrec;
                     NeedRecalc := NeedRecalc OR (SpStep.Kol > 0.0);
                   }
                 else
                   {
                     if not Protocol.Contain
                       {
                         Protocol.write('Документ основание №'+BaseDoc.NoDoc);
                         Protocol.write('Контрагент: '+KatOrg.Name);
                         Protocol.write('Следующие '+
                                        if(SpStep.PrMC = 1, 'матценности', 'услуги')+
                                        ' отсутствуют в прайс-листе "'+KlPrice.Name+'"');
                         Protocol.write('');
                       }
                     Protocol.write(NamTovar + ' (' + KatOtpEd.Name + ')');
                   }
               }

             SpStep.Reserv := 0;
             SpStep.PrSkid := 1; //вариант учета скидки
             SpStep.VlSkid := 0; //величина скидки
             SpStep.cSpMC  := 0;
             addallmc := 1;

             #include DOUKS.vpp

             SpStep.Npp  := oSpNext.GetSpNppNext(SpStep.cStepDoc, coSpStep);
             if boGetTune ('Doc.Sell.DO.CalcGrMForDO')
               if (SpStep.PrMc = 1)
                 ProcKolGrMDO ( SpStep.cMCUsl, SpStep.cOtpEdGrM, SpStep.cOtpEd, SpStep.KolSkl, SpStep.KolGrM );
             insert current SpStep;

             if (NrecSaved = 0) // запомнить первую вставляемую позицию
               NRecSaved := SpStep.Nrec;

             if UseDEI
               {
                 oDEIfuns.UpdateDEIKolSpStep(SpStep.NRec, SpStep.PrMC, SpStep.cMCUsl, 1, 0, SpStep.KolSkl, longint(0), BaseDoc.VidDoc);
                 oDEIfuns.UpdateDEIKolSpStep(SpStep.NRec, SpStep.PrMC, SpStep.cMCUsl, 2, 0, SpStep.Kol, longint(0), BaseDoc.VidDoc);
                 oDEIfuns.UpdateDEIKolSpStep(SpStep.NRec, SpStep.PrMC, SpStep.cMCUsl, 3, 0, SpStep.KolOpl, longint(0), BaseDoc.VidDoc);
               }

             if ((SpStep.PrMC <>1)AND(KatUsl.TYPEUSL = 1))
               {
                 RunInterface('GetPar1', 0, SpStep.Nrec, KatUsl.Nrec, SpStep.Price, SpStep.KolSkl, word(coSpStep));
                 SpStep.Kol := SpStep.KolSkl;
                 UpDate current SpStep;

                 NeedRecalc := TRUE;
               }

               if ((BaseDoc.Direct = 1) AND boGetTune('Tara.AutoPaste')) OR
                  ((BaseDoc.Direct = 2) AND boGetTune('Tara.AutoPaste_Buy'))
               {
                 oDOTara.InsertTara(SpStep.cOtpEd, SpStep.NRec, SpStep.cStepDoc, SpStep.KolSkl, SpStep.cParty);
                 oDOTara.ChangeNppStepDoc(SpStep.cStepDoc);
                 ReReadRecord(#SpStep);
                 NeedRecalc := TRUE;
               }
           }

         StopVisual('', 0);
         if Protocol.Contain AND (PrNrec <> 0)
           Protocol.ShowFile('Протокол уточнения цен по прайс-листу');

         if ((wGetTune('Pick.ChkGrpIns') <> 0) AND
             boGetTune('Reserv.SchReserv') AND
             (SpStep.PrMC = 1)
            AND(BaseDoc.Status = 2))
           {
             // не резервировать автоматом при частичном резервировании при недостатке
             if (wGetTune('Reserv.PrSchSklad') = 2) AND
                not boGetTune('Reserv.ReservWithoutOst')
               {}
             else
               Proc20;                    // резервирование
           }

         if NeedRecalc
           GetTotalSkid(false);

         if (NrecSaved > 0)
           {
             if (GetFirst SpStep
                    where ((NrecSaved == SpStep.nRec)) <> tsOk) {}
           }
         else
           if (GetFirst SpStep <> tsOk)
             { }
       }

     RereadRecord;
     SelectField(#SpStep.Price);
   }

 AllSpStepCellVal(1);

 if (TruncedEd <> 0)
   Message('Произведено отбрасывание дробной части для позиций '+
            'с неделимыми отпускными единицами измерения.'#13#13+
            'Всего сделано изменений: ' + string(TruncedEd)+'.',
            Information+OkButton);
}

//******************************************************************************

Procedure ProcValue28;
{
  var NeedRecalc: boolean;  // признак необходимости пересчета
  var NSpecif: string;
  var PrNom: word;
  var TruncedEd: longint;       TruncedEd := 0;
  var PrNrec: comp;
  var RVhod: word;
  var bisNew: boolean;          bisNew    := IsNew;

  NeedRecalc := (BaseDoc.Skidka <> 0) AND (BaseDoc.VhSkid = 2); // скидка в сумме

  if not NeedRecalc
    {
      PushPos(#SpStep);
      NeedRecalc := (RecordExists SpStep where (( StepDoc.nRec == SpStep.cStepDoc AND
                                                  word(1)      << SpStep.PrMC     AND
                                                (KatUsl.TYPEUSL = 1)
                                               )) = tsOk);
      PopPos(#SpStep);
    }

  PrNom := SpStep.PrMC;
  pmc_ := SpStep.cMcUsl;
  w1 := RunInterface('GetSmetaMCU'
                   , '51' //строковый тип документа для хранения настроек в DSK
                   , 0       //0-строительство/1-ремонты/100-все (SmetaStroy.coTable)
                   , 2       //контроль остатков МЦ (0-нет/1-да/2-на выбор)
                   , 0       //на будущее
                   , 0       //ссылка на смету
                   , 0       //ссылка на спецификацию сметы
                   , 0       //признак 0-МЦ/1-Услуги
                   , 0       //1-МЦ/2-Услуга
                   , 0       //Подразделение (для МЦ)
                   , 0       //МОЛ           (для МЦ)
                   , 0       //Партия        (для МЦ)
                   , 0       //режимы выбора
                  );

  if (w1 = cmCancel)
    {
      Abort;
      Exit;
    }

  var NRecSaved: comp;  NRecSaved := 0;

  PrNrec := 0;

  if boGetTune('Pick.PriceAfterPick')
    {
      RunInterface(GetKlPr, PrNrec, word(0), word(1), if(PrNom = 1, word(1), word(2)));

      if (GetFirst KlPrice where ((PrNrec == KlPrice.NRec)) = tsOk)
        { }

      RVhod := KlPrice.VhodNal;
    }

  if (not bisNew)
    {
      SubResTov(SpStep.Reserv); // Снятие резерва по товару
      SubResRazrez; // Снятие резерва по складу
      DelPosDORES;
      DelPosSpDocNal;
      NeedRecalc := NeedRecalc OR (SpStep.Kol*SpStep.Price > 0.0);
      oDOfuns.SpStep_Delete(SpStep.nRec);
    }

  _LOOP PickSmeta where ((word(0) == PickSmeta.wList))
    _LOOP SpDocSmeta where ((coSpStep == SpDocSmeta.coTable AND
                         StepDoc.NRec == SpDocSmeta.cDoc AND
                  PickSmeta.cPosition == SpDocSmeta.cPosition))
      if (GetFirst FastFirstRow SpStepSmet where ((SpDocSmeta.cSpec == SpStepSmet.nRec)) = tsOk)
        {
          if (not bisNew)
            PushPos(#SpStep);

          if (GetFirst FastFirstRow SpStep where ((SpStepSmet.nRec == SpStep.nRec)) = tsOk)
            {
              SubResTov(SpStep.Reserv); // Снятие резерва по товару
              SubResRazrez; // Снятие резерва по складу
              DelPosDORES;
              DelPosSpDocNal;
              NeedRecalc := NeedRecalc OR (SpStep.Kol*SpStep.Price > 0.0);
              oDOfuns.SpStep_Delete(SpStep.nRec);
            }

          if (not bisNew)
            PopPos(#SpStep);
        }

  if (RecordExists PickSmeta where ((Word(0) == PickSmeta.wList)) = tsOk)
    {
      StartNewVisual(vtNumericVisual, vfTimer+vfBreak+vfConfirm,
              'Пополнение спецификации документа выбранными позициями сметы...', 1);

      _LOOP PickSmeta where ((Word(0) == PickSmeta.wList)) ordered by PickSmeta.NPP
        {
          if not NextVisual
            Break;

          PrNom := PickSmeta.PrMC;

          if (GetFirst FastFirstRow KatOtpEd
                 where (( PickSmeta.cMCUsl       == KatOtpEd.cMCUSL AND
                          word(1)         == KatOtpEd.Akt    AND
                          PrNom == KatOtpEd.PrMC )) = tsOk)
            SpStep.cOtpEd := KatOtpEd.Nrec
          else
            {
              NSpecif := '';
              if (PrNom = 1)
                {
                  if (GetFirst FastFirstRow KatMC
                         where ((PickSmeta.cMCUsl == KatMc.NRec)) <> tsOk)
                    NSpecif := KatMC.Name;
                }
              else
                {
                  if (GetFirst FastFirstRow KatUsl
                         where ((PickSmeta.cMCUsl == KatUsl.NRec)) <> tsOk)
                    NSpecif := KatUsl.Name;
                }

              Message('Не задана активная отпускная единица измерения для ' + NSpecif + '!', Warning);
              SpStep.cOtpEd := 0;
            }

          SpStep.NRec   := 0;
          SpStep.Price  := 0;
          SpStep.cGrNal := 0;
          SpStep.dDoc   := BaseDoc.dDoc;
#ifndef __MTR_TO_SPEC__
          SpStep.cUKS   := PickSmeta.cObj;
#end
          SpStep.cMcUsl := PickSmeta.cMCUsl;
          SpStep.KolSkl := PickSmeta.Kol / KatOtpEd.Koef;
          SpStep.PrMC   := PrNom;

          if  ((SpStep.KolSkl = 0) AND (SpStep.PrMC = 2))
            {
              if (GetFirst KatUsl = tsOk)
                { }

              SpStep.KolSkl := KatUsl.KolAkt;
              SpStep.cGrNal := KatUsl.cGrNal;
            }

          //проверка на неделимость отп.ед. для МЦ
          if (SpStep.cOtpEd <> 0)
            if (KatOtpEd.Diskret = 1)
              if NOT fEdIzm.IsKolDiskret(SpStep.KolSkl)
                {
                  SpStep.KolSkl := trunc(SpStep.KolSkl);
                  TruncedEd     := TruncedEd + 1;
                }

          SpStep.Kol := SpStep.KolSkl;
          SpStep.ProcUb := 0;

          if ((BaseDoc.VidDoc = 201 OR BaseDoc.VidDoc = 1420)AND(SpStep.PrMC = 2))  // для ДО на продажу
            SpStep.PrUsNkl  := wGetTune('Doc.UslDoSell');

          if (SpStep.PrMC = 1)
            {
              if (GetFirst FastFirstRow KatMC where
                   ((PickSmeta.cMCUsl == KatMC.Nrec)) = tsOk)
                { }

              SpStep.ProcUb := oSDfuns.GetNormUbFromKatalog(oDOfuns.GetTipHozOnVidDoc(BaseDoc.VidDoc), 0, KatMC.NormUb);
              SpStep.Kol    := SpStep.KolSkl * (1-SpStep.ProcUb/100);
              SpStep.cMasEd := KatMC.cMasEd;
              SpStep.Netto  := KatMC.Massa;
              SpStep.mTara  := KatMC.mTara;
              SpStep.cGrNal := KatMC.cGrNal;
            }

          SpStep.cStepDoc := StepDoc.NRec;
          SpStep.cVal     := StepDoc.cVal;
          if (PrNrec = 0)
            {
              SpStep.Price  := 0;
              SpStep.Summa  := 0;
              SpStep.SumVal := 0;
              SpStep.Nds    := 0;
              //--Сметные цены
              var dValDO_Smet: Date;
              var NewPr_Smet  : double;
              if (GetFirst FastFirstRow SmetaStroy
                           where ((PickSmeta.cSmeta == SmetaStroy.NRec)) = tsOk)
                {
                  dValDO_Smet  := if(BaseDoc.dValCurse = Date(0, 0, 0), BaseDoc.dDoc, BaseDoc.dValCurse);
                  NewPr_Smet   := oValFunc.GetAnyCurrency(SmetaStroy.cVal, PickSmeta.Price
                                                         , dValDO_Smet, SpStep.cVal) * KatOtpEd.Koef;
                  SpStep.Price := oDOfuns.DoRoundP(BaseDoc.cVal, BaseDoc.VidDoc, NewPr_Smet);
                }
            }
          else
            {
              if (GetFirst FastFirstRow Prices
                     where (( PrNrec        == Prices.cKlPrice AND
                              SpStep.cMcUsl == Prices.cThing   AND
                              (SpStep.cOtpED = Prices.cOtpEd)
                            )) = tsOk)
                {
                  InitPriceSpStep(RVhod, fnal, Prices.Price, Prices.SumVal);
                  SpStep.cPriceList := PrNrec;
                  NeedRecalc := NeedRecalc OR (SpStep.Kol > 0.0);
                }
              else
                {
                  if not Protocol.Contain
                    {
                      Protocol.write('Документ основание №'+BaseDoc.NoDoc);
                      Protocol.write('Контрагент: '+KatOrg.Name);
                      Protocol.write('Следующие '+
                                     if(SpStep.PrMC = 1, 'матценности', 'услуги')+
                                     ' отсутствуют в прайс-листе "'+KlPrice.Name+'"');
                      Protocol.write('');
                    }

                  Protocol.write(NamTovar + ' (' + KatOtpEd.Name + ')');
                }
            }

          SpStep.Reserv := 0;
          SpStep.PrSkid := 1; //вариант учета скидки
          SpStep.VlSkid := 0; //величина скидки
          SpStep.cSpMC  := 0;
          addallmc := 1;

          #include DOUKS.vpp

          SpStep.Npp  := oSpNext.GetSpNppNext(SpStep.cStepDoc, coSpStep);
          insert current SpStep;
          if UseDEI
            {
              oDEIfuns.UpdateDEIKolSpStep(SpStep.NRec, SpStep.PrMC, SpStep.cMCUsl, 1, 0, SpStep.KolSkl, longint(0), BaseDoc.VidDoc);
              oDEIfuns.UpdateDEIKolSpStep(SpStep.NRec, SpStep.PrMC, SpStep.cMCUsl, 2, 0, SpStep.Kol, longint(0), BaseDoc.VidDoc);
              oDEIfuns.UpdateDEIKolSpStep(SpStep.NRec, SpStep.PrMC, SpStep.cMCUsl, 3, 0, SpStep.KolOpl, longint(0), BaseDoc.VidDoc);
            }

          if (NrecSaved = 0) // запомнить первую вставляемую позицию
            NRecSaved := SpStep.Nrec;

          if ((SpStep.PrMC <>1)AND(KatUsl.TYPEUSL = 1))
            {
              RunInterface('GetPar1', 0, SpStep.Nrec, KatUsl.Nrec, SpStep.Price, SpStep.KolSkl, word(coSpStep));
              SpStep.Kol := SpStep.KolSkl;
              UpDate current SpStep;

              NeedRecalc := TRUE;
            }

#ifndef __MTR_TO_SPEC__
          //--Обновляем сатью затрат
          if (PickSmeta.cAddSumTune <> 0)
            {
              ClearBuffer(#SpecZatr);
              SpecZatr.coTable     := coSpStep;
              SpecZatr.cSpec       := SpStep.nRec;
              SpecZatr.cAddSumTune := PickSmeta.cAddSumTune;
              SpecZatr.cUKS        := PickSmeta.cObj;
              insert current SpecZatr;
            }
#else
          oMTRFun.GenSpecMTRForUKS(coSpStep, SpStep.nRec, PickSmeta.cObj, PickSmeta.cAddSumTune);
#end

          //--Обновляем связь спецификации документа со сметой
          ClearBuffer(#SpDocSmeta);
          SpDocSmeta.coTable   := coSpStep;
          SpDocSmeta.cDoc      := StepDoc.NRec;
          SpDocSmeta.cSpec     := SpStep.nRec;
          SpDocSmeta.cSmeta    := PickSmeta.cSmeta;
          SpDocSmeta.cPosition := PickSmeta.cPosition;
          SpDocSmeta.cResource := PickSmeta.cResource;
          SpDocSmeta.TipRes    := PickSmeta.TipRes;
          SpDocSmeta.Kol       := PickSmeta.KolJob;
          insert current SpDocSmeta;
        }

      StopVisual('', 0);
      if Protocol.Contain AND (PrNrec <> 0)
        Protocol.ShowFile('Протокол уточнения цен по прайс-листу');

      if ((wGetTune('Pick.ChkGrpIns') <> 0) AND
          boGetTune('Reserv.SchReserv') AND
          (SpStep.PrMC = 1)
         AND(BaseDoc.Status = 2))
        {
          // не резервировать автоматом при частичном резервировании при недостатке
          if (wGetTune('Reserv.PrSchSklad') <> 2) OR boGetTune('Reserv.ReservWithoutOst')
            Proc20;                    // резервирование
        }

      if NeedRecalc
        GetTotalSkid(false);

      if (NrecSaved > 0)
        {
          if (GetFirst SpStep
                 where ((NrecSaved == SpStep.nRec)) <> tsOk)
            { }
        }
      else
        {
          if (GetFirst SpStep <> tsOk)
            { }
        }
    }

  Delete PickSmeta where ((word(0) == PickSmeta.wList));
  RereadRecord;
  SelectField(#SpStep.Price);

  AllSpStepCellVal(1);
  if (TruncedEd <> 0)
    Message('Произведено отбрасывание дробной части для позиций ' +
            'с неделимыми отпускными единицами измерения.'#13#13+
            'Всего сделано изменений: ' + string(TruncedEd)+'.',
            Information+OkButton);
}

//******************************************************************************

HandleEvent  // для интерфейса

//******************************************************************************

#include dofilt.vpp

//******************************************************************************

cmValue1:
  RunWindow(wVSchetZ);

//******************************************************************************

cmValue8:
  ProcValue8;

//******************************************************************************

cmValue28:
  ProcValue28;
//******************************************************************************

cmIdle:
  {
    #include rsv.vpp
    #include doclear.vpp

    oDOfuns.SetRoundFormat(tipDO, BaseDoc.cVal <> 0);

    OldTotal := BaseDoc.Total;
  }

//******************************************************************************

cmInit:
  {
    VidReport  := 0;
    vidReestr  := 0;
    typsoprhoz := 51;

    oMTTS.InitMemTbl;

    sType := 'vschet';
    MinQuantityRes := fTekRun.GetMinQuantity;

    NastrVypRes     := wGetTune('Reserv.VypRes');
    NastrSrokReserv := wGetTune('Reserv.SrokReserv');

    Chrust_Mode := FALSE;
    StartProtokol('VSCHET', 'Счет на продажу');

    GetVipRef(ArhObj1, 'Arhkart');
    GetVipRef(ServtObj1, 'ServTara');
    SetColumnTitle(brVschet, #KatOrg.Name, 'Плательщик');

    oValFunc.InitVal;
    prFormat := 0;
    tipDo    := 201;

    _LOOP tmpSaldo3
      if (GetFirst BaseDocC where ((tmpSaldo3.cMc == BaseDocC.NRec)) = tsOk)
        if (tipDo = BaseDocC.VidDoc)
          delete current tmpsaldo3;

    SetWindowHelpCtx(hcSellWSpisokDO, wnMainWindow);

    if ( not Lic_ItemExists('CEL_UCH') )
      SetTabbedSheetVisible(scKauEdit, false);
    else
      {
        BindEmbeddedInterface(scKauEdit, oLinkMtr2Spec);
        BindEvent(MakePageUp, oLinkMTR2Spec.DoPageUp);
        BindEvent(MakePageDown, oLinkMTR2Spec.DoPageDown);
      }

    if ( (not Lic_ItemExists('CEL_UCH')) or (not boGetTune('Oper.CelUch.ShowKAU')) )
      {
        SetFieldVisible(#SaldTune.Name, false);
        SetFieldVisible(#vsKau1, false);
        SetFieldVisible(#vsKau2, false);
        SetFieldVisible(#vsKau3, false);
        SetFieldVisible(#vsKau4, false);
        SetFieldVisible(#vsKau5, false);
        SetFieldVisible(#vsKau6, false);
        SetFieldVisible(#vsKau7, false);
        SetFieldVisible(#vsKau8, false);
        SetFieldVisible(#vsKau9, false);
        SetFieldVisible(#vsKau10, false);
      }

    SetFormat(brVschet);

    CheckOfpFieldVisible;
    oDOfuns.SetRoundFormat(tipDO, BaseDoc.cVal <> 0);

#include initdo.vpp
#include doclear.vpp

    SklOtgr := 'Склад отгрузки';

    SetFieldVisible(#SklOtgr     , wGetTune('Reserv.PrSchSklad') = 1);
    SetFieldVisible(#KatPodr.Name, wGetTune('Reserv.PrSchSklad') = 1);

    if ( wGetTune('Reserv.PrSchSklad') = 2 ) AND ExistTune('Reserv.DO_Sklad_Enabled')
      if ( wGetTune('Reserv.DO_Sklad_Enabled') > 0 )
        {
          SetFieldVisible(#SklOtgr     , TRUE);
          SetFieldVisible(#KatPodr.Name, TRUE);
        }

    BDSetFieldCellVal;

    SelectField(#KatOrg.Name);

    addallmc := 0;

    fNal := InitNalServ;

    UseDEI  := boGetTune('Doc.DEI.DO');
    AutoDEI := boGetTune('Doc.DEI.Auto.DO');

    if (UseDEI)
      {
        SetHelpAndStatusContext(brSpSchet  , #SpStep.KolSkl, sci1378Esc, -1);

        SetHelpAndStatusContext(scSpStepMC , #SpStep.Kol   , sci1378Esc, -1);
        SetHelpAndStatusContext(scSpStepMC , #SpStep.KolSkl, sci1378Esc, -1);
      }

    var Datechanged: boolean;
    if (NOT ReadMyDsk(wDateInp, 'VSchet_Date_Inp', Datechanged))
      wDateInp := 0;

    if ( not Lic_ItemExists('SmetaDocs') )
      {
        ClearFieldState(#SmetaMy,   sfVisible);
        ClearFieldState(#SmetaSpMy, sfVisible);
        DisableCommand(cmMulSelDO);
      }

    GetVipInterface(CK);

    // для изменения статус-строки при наложении фильтров
    _FltScrFormat   := scVSchet;
    _FltScrExFormat := scwDopAttrBS;

    //внешние классификаторы
    var piExClass: iExtClass;
    piExClass.CreateClass(coBaseDoc, 'ЦЕЛЬ ПРИОБРЕТЕНИЯ ПРОДУКЦИИ(ТОВАРА)', 0);

    //для абонентского обслуживания
    piExAttr.CreateAttr(coBaseDoc, 'Действителен с', cgAttrType_Date);

    //--Для сложных скидок
    if (wGetTune('Oper.AlgSkid') = 1) //работаем по сложным скидкам для ДО на продажу
      if (Not NullVipRef(piCalcSkid)) //объектный интерфейс уже загружен
        piCalcSkid.SetActualSkidPrimMEM(False); //переактуализируем таблицу применимости

    InitWin;

    if ( bFilterOD )
      {
        FilterOnDoc;
        wSortField := 0;

        if ( (BaseNrec <> 0) and (BaseNrec <> -1) and (BaseDoc.nRec <> BaseNrec) )
          {
            ResetAllFilters;

            if ( GetFirst BaseDoc where (( BaseNrec == BaseDoc.Nrec )) <> tsOk )
              if ( GetLast BaseDoc <> tsOk )
                {}
          }
      }
    else
      {
        if (  (CurVisib <> dcAllModif)
           or (not ReadMyDsk(wSortField, 'vschet_def_sort_field', true))
           )
          wSortField := 0;

        if ( wSortField = 1 )
          {
            if (NOT BoundActive(tbMainBoundONoDoc))
              AddBounds(tbMainBoundONoDoc);
          }
        else
          if (NOT BoundActive(tbMainBoundOdDoc))
            AddBounds(tbMainBoundOdDoc);

        SetColSort;
      }

    // для пересканирования
    if (ExistTune('Oper.Sell.DO.NeedRescan'))
      if (boGetTune('Oper.Sell.DO.NeedRescan'))
        if (ExistTune('Oper.Sell.DO.TimeRescan'))
          StartTimer(cmTimeRange2, 1, FALSE);
  }

//******************************************************************************

cmTimeRange1:
  {
    wTimerCount := wTimerCount - 1;
    if ( wTimerCount > 0 )
      Exit;

    StopTimer(cmTimeRange1);

    if ( CurWindow = wnMainWindow )  // проверяем, находимся ли в главном окне
      if ( CurTable = tnBaseDoc )    // на той, что надо таблице
        if ( CheckSelfTopWindow )    // поверх данного не открыто никаких диалогов, меню, быстрого поиска
          RescanPanel(tnBaseDoc);         // пересканируем 1 или несколько панелей

    StartTimer(cmTimeRange2, 1, FALSE);
    // если в этом месте просто сделать StartTimer(cmTimeRange1), он
    // не запусится, т.к. сейчас и так находимся внутри его обработчика
    // если же сделать PutCommand когда запущен и активен другой интерфейс,
    // событие уйдет в активный интерфейс: (
  }

//******************************************************************************

cmTimeRange2:
  {
    StopTimer(cmTimeRange2);
    wTimerCount := wGetTune('Oper.Sell.DO.TimeRescan') - 1;
    StartTimer(cmTimeRange1, 1, FALSE);
  }

//******************************************************************************

cmPositionChanged:
  {
    if ( ( wTimerCount > 0 ) AND ( wTimerCount < 5 ) )  // если таймер запущен и меньше 5 секунд,
      wTimerCount := 5;                                 // установить задержку в 5 сек при смене позиции
  }

//******************************************************************************

cmDone:
  {
    oValFunc.DoneVal;

    if fNal
      DoneNalServ;

    StopProtokol;
    FreeVipInterface(CK);
    FreeezingDocumentsLinks;
    SaveMyDSK(comp(0), 'ClosePeriod_BaseDocNRec');
    SaveMyDsk(wSortField, 'vschet_def_sort_field');
  }

//******************************************************************************
// Настройки только для этого интерфейса
cmValFld7:
  RunInterface ('UserReestrTune', 0, '', 'Vschet');

// сохранение и восстановление документа-основания

//******************************************************************************
#include savedoc.vpp
#include docurt.vpp
#include doattr.vpp //аттрибуты, классификаторы
#include vssoprhoz.vpp
#include vschobjs.vpp
//******************************************************************************

cmHotKeys:
  {
    ChangeEnabledCommands(true);
    var sMenu: string;
    sMenu := #AddComp('L_BASEDOC')'mnuVschet2;' + piOFPOut.GetMakeFoMenuName;

    if boGetTune('Oper.CalcKol')
      sMenu := sMenu + ';' + #AddComp('C_COMMON')'CalcKol_HotKeys';

    PutHotCommand(RunDynMenu(sMenu));
  }

//******************************************************************************

cmCalcKol:
  Message('Итого количество по документу: ' + Trim(String(CK.GetKolForBaseDoc(BaseDoc.NRec), 15+prSignsInKol, prSignsInKol)));

//******************************************************************************

cmNal:
  ofpMakeFO(BaseDoc.VidDoc, BaseDoc.nRec);

//******************************************************************************

cmExp:
  {
    oOnExpImp.OnExportHandler( ieDO, BaseDoc.VidDoc, BaseDoc.nRec, word(15), 0 );
    RescanPanel(tnBaseDoc);
  }

//******************************************************************************

cmImp:
  {
    oOnExpImp.OnImportHandler( ieDO, BaseDoc.VidDoc );
    RescanPanel(tnBaseDoc);
  }

//******************************************************************************

cmIEHist:
  oOnExpImp.OnExportImportHistory( ieDO, BaseDoc.nRec );

//******************************************************************************

cmValFld4:
  {
    var OnePick: boolean; OnePick := FALSE;

    if (GetFirst Pick2 where ((word(15) == Pick2.wList)) <> tsOk)
      {
        Pick2.wList := 15;
        Pick2.PickNum := 100;
        Pick2.pickkol := 0;
        Pick2.cRec := BaseDoc.nRec;
        insert current Pick2;

        OnePick := TRUE;
      }

    RunInterface ('DoSynchronization', word(0) );

    if OnePick
      {
        KillPick2;
        RereadRecord;
      }
  }

//******************************************************************************

#include dofin.vpp

//******************************************************************************

#include modpric2.vpp

//******************************************************************************

cmInsert:
  {
    if not boGetTune('Doc.ModDo')
      {
        Abort;
        Exit;
      }

    if (((_wFltBaseDoc AND 4) = 4) AND (sFltDescr <> CurDescr))
      {
        Message('Установлен фильтр по дескриптору, отличному от Вашего.'#13+
                'Создание нового документа невозможно');
        Abort;
        Exit
      }
  }

//******************************************************************************

cmPositionChanged:
  BDSetFieldCellVal;

//******************************************************************************

cmProtectedInput:
  {
    if NotEditPosStatus(false)
      {
        if ( ( CurField = #KatNotes.Name ) OR CanLinkDogovor(TRUE) )
          {
            DoProcessPick;
            Stop;
            Exit;
          }

        Stop;
      }

    if boGetTune('Doc.Sell.NotEditDO')
      if (IsValid(tnBaseFin) OR IsValid(tnKatSopr))
        {
          if ( ( CurField = #KatNotes.Name ) OR CanLinkDogovor(TRUE) )
            DoProcessPick
          else
            NotEditDO;

          Stop;
        }
  }

//******************************************************************************

cmValue19:
  {
    var ret: word;
    var SkidPrice: double;

    _CanModify := TRUE;

    if (NotEditPos(true))
      Exit
    else
      if (oSDfuns.CanModifyDocument(BaseDoc.NRec, typsoprhoz, TRUE))
        {
          ProtectRecord(#BaseDoc, FALSE);
          ProtectRecord(#StepDoc, FALSE);
        }
      else
        {
          Exit;
        }

    if (RunWindowModal(winRCPrice) <> cmDefault)
      Exit;

    PushPos(#SpStep);
    StartNewVisual(vtNumericVisual, vfTimer, 'Пересчет цены', 1);

    _LOOP SpStep
      {
        NextVisual;
        if (SpStep.PrMC <> 1)
          continue;

        if IsProtected(#SpStep)
          ProtectRecord(#SpStep, FALSE);

        case RCP_TipSkid of
        //-------------------
          0: SpStep.Price := oDOfuns.DoRoundP(BaseDoc.cVal, tipdo, (SpStep.Price - RCP_Value));
        //-------------------
          1: SpStep.Price := oDOfuns.DoRoundP(BaseDoc.cVal, tipdo, (SpStep.Price + RCP_Value));
        //-------------------
          2: SpStep.Price := oDOfuns.DoRoundP(BaseDoc.cVal, tipdo, (0.01*SpStep.Price*(100.0 - RCP_Value)));
        //-------------------
          3: SpStep.Price := oDOfuns.DoRoundP(BaseDoc.cVal, tipdo, (0.01*SpStep.Price*(100.0 + RCP_Value)));
        //-------------------
        end;

        IncOstatokSpDocs2;

        ChangePos(comp(0));

        update current SpStep;

        ModifDo;
      }

    ModifDo;

    StopVisual('', 0);

    PopPos(#SpStep);
  }

//******************************************************************************
// пересчет цен по микронейру
cmValue18:
  {
    var ret: word;
    var SkidPrice: double;
    var pKatTar: comp;
    if (RunInterface('KatTar', pKATTAR, TRUE) <> cmDefault)
      Exit;

    ret := GetFirst AttrNam where (( coSpStep == Attrnam.wTable AND
                                  'показатель' == AttrNam.Name));
    if (ret <> tsOk)
      {
        Message('Нет внешнего атрибута "показатель" для спецификации документа (таблица SpStep)');
        Exit;
      }

    PushPos(#SpStep);
    StartNewVisual(vtNumericVisual, vfTimer, 'Пересчет цены', 1);

    _LOOP SpStep
      {
        NextVisual;
        if (SpStep.PrMC <> 1)
          continue;

        RCP_Value := 1;
        ret := GetFirst AttrVal where ((
                                         coSpStep == AttrVal.wTable AND
                                         SpStep.NRec == AttrVal.cRec AND
                                         AttrNam.NRec == AttrVal.cAttrnam
                                       ));
        if (ret = tsOk)
          case (AttrNam.Attrtype) of
          //------------------------
            1:
              _LOOP TRSTV where ((pKatTar == TRSTV.cKatTar))
                if ((AttrVal.vDouble>TRSTV.DownF) AND (AttrVal.vDouble<= TRSTV.UpF)) or
                    ((AttrVal.vDouble = TRSTV.DownF) AND (TRSTV.UpF = TRSTV.DownF))
                  {
                    RCP_Value := TRSTV.Stavka;
                    Break;
                  }
          //------------------------
          end;

        SpStep.Price := oDOfuns.DoRoundP(BaseDoc.cVal, tipdo, SpStep.Price*RCP_Value);

        ChangePos(comp(0));

        update current SpStep;

        ModifDo;
      }

    ModifDo;

    StopVisual('', 0);
    PopPos(#SpStep);
  }

//******************************************************************************

cmProtectedInput:
  {
    Stop;//чтобы по Backspace не возникало сообщение "Запись защищена от модификации"

    if NOT CanEditInClosePeriod(TRUE)
      if CanEditInClosePeriod(FALSE)
        {
          ProtectRecord(#BaseDoc, FALSE);
          ProtectRecord(#StepDoc, FALSE);
          ProtectRecord(#SpStep , FALSE);
          Exit;
        }

    if Not EditDOPosEnabled(FALSE, FALSE)
      if CanLinkDogovor(TRUE)
        DoProcessPick;
  }

//******************************************************************************

cmVal1: //значение даты ввода документа по умолчанию
  if ( RunDialog('GetDefaultDateDoc', wDateInp) = cmOk )
    SaveMyDsk(wDateInp, 'VSchet_Date_Inp');

//******************************************************************************

cmVal2: //поиск документа по номеру вагона
  DoFindDocOnVagon;

//******************************************************************************

cmOnVipLoad:
  {
    IsObjInt := TRUE;
    TipDO := 0;
    ProcessCommand(cmInit);
  }

//******************************************************************************

cmOnVipUnLoad:
  ProcessCommand(cmDone);

//******************************************************************************

cmDelete:
  {
    _CanModify := TRUE;
    if ( not EditDOPosEnabled(true, true) )
      Exit;
    else
      if not oSDfuns.CanDeleteDocumentOborot(BaseDoc.NRec, typsoprhoz)
        {
          Stop;
          Exit;
        }
      else
        {
          ProtectRecord(#BaseDoc, FALSE);
          ProtectRecord(#StepDoc, FALSE);
          ProtectRecord(#SpStep, FALSE);
        };
  }

//******************************************************************************

cmVrem:
   if (IsValid(tnBaseDoc))
     RunInterface('NalNakl_View', word(coBaseDoc), typsoprhoz, BaseDoc.nRec, Date(0, 0, 0));

//******************************************************************************

cmSetCurTable:
  if UKS_Used
    if (CurTable = #SpStep)
      if (Target = #BaseDoc)
        if (UpdateTable)
          oUKSfuns.JoinDO(BaseDoc.nRec);

//----------------------------------------------------------------------------

cmValue29: { vidReport := 1; putCommand(cmPrintDoc);  }

//----------------------------------------------------------------------------
cmValue11:
  {
    if (GetFirst Pick where ((15 == Pick.wList)) = tsOK)
      RunInterface('ReplaceGroup');
    else
      message('Нужно пометить минимум один документ');

  }

end; // HandleEvent для интерфейса
End. // Interface

//******************************************************************************
GetRoundInDOPrice DIALOG
HelpCtx hcM_SellLOKkratCen;
Fields
  f1 ('Введите дискретность', , scGalDial): double[13.4];
Buttons
  cmOk, Default, , 'Ввод', , scGalDial;
  cmCancel, , , 'Отмена', , scGalDial;
<< 'Параметр округления'

  Введите значение, которому должны быть
    кратны цены в документе-основании

  `Дискретность цен` .@@@@@@@@@@@@@@

      <.~П~родолжить.>    <. Отмена .>
>>

//******************************************************************************

GetCrossCurse DIALOG
Fields
  f1 ('Введите курс для пересчета цен', , scGalDial): double[13.4];
Buttons
  cmOk, Default, , 'Ввод', , scGalDial;
  cmCancel, , , 'Отмена', , scGalDial;
<< 'Курс для пересчета цен'

  `Курс для пересчета цен` .@@@@@@@@@@@@@@

      <.~П~родолжить.>    <. Отмена .>
>>

//******************************************************************************

#doc
Локальное меню шапки окна редактирования интерфейса <link Interface L_BaseDoc::Vschet>L_BaseDoc::Vschet - ДО на продажу</link>
#end
mnuVschet Menu
{
- 'Смена дескриптора', cmManagerId, 'Перейти на другой дескриптор', hcZakupLocMDODescr, 'Alt+M', kbAltM, sci1Esc;
-----------;
= 'Печать', 'Печать', , sci1Esc;
{
  - 'Печать документа', cmPrintDoc, 'Печать документа', hcCtxSoprPrintDoc, 'Ctrl+P', kbCtrlP, sci1Esc;
  - 'Печать документа в FastReport',cmValue29,'Печать документа в формате FastReport',hcctxSoprPrintDoc,,,sci1Esc;
  - 'Налоговый счет-фактура/справка по документу', cmPlansNo, 'Печать налогового счета-фактуры/просмотр справки по документу', hcCtxNalSchFact, 'Alt+P', kbAltP, sci1Esc;
  - 'Печать сертификатов партий МЦ', cmValFld14, 'Печать сертификатов по внешним атрибутам партий МЦ', hcSellM1PrnSert, , , sci1Esc;
  - 'Печать валютного счета на продажу (инвойс)', cmCalcHand, 'Печать валютного счета на продажу (инвойс)', hcSellLocMPrintValDO, , , sci1Esc;
}
-----------;
- 'Просмотр текущих остатков на складах', cmSaveDoc, 'Просмотр текущих остатков на складах', hcKOUDOCWTekSaldo, 'Ctrl+F2', kbCtrlF2, sci1Esc;
-----------;
= 'Резервирование', 'Печать', , sci1Esc;
{
  - 'Установка срока резерва для всех позиций', cmRestoreDoc, 'Установка срока резерва для всех позиций', hcSellLocMDOSetRezerv, 'Ctrl+F3', kbCtrlF3, sci1Esc;
  - 'Снятие резерва по документу', cmValue14, 'Снятие резерва по документу', hcSellM1SnResDoc, , , sci1Esc;
  - 'Формирование ДО по незарезервированным позициям', cmValFld8, 'Формирование ДО по незарезервированным позициям', hcM_SellFormDONezarezPoz, , , sci1Esc;
  - 'Перенаправление резерва по документу', cmValue4, 'Перенаправление резерва по документу', hcm_sell_Perenaprav_RezDok, , , sci1Esc;
  - 'Просмотр резерва по документу', cmValue27, 'Просмотр резерва по документу', hcm_sell_ProsmRezDok, '', , sci1Esc;
}
-----------;
- 'Установка кратности цен', cmValFld6, 'Установка кратности цен', hcM_SellLOKkratCen, , , sci1Esc;
- 'Изменение цен по выбранному прайс-листу', cmValue16, 'Изменение цен по выбранному прайс-листу', hcCtxPriceIzm, , , sci1Esc;
-----------;
- 'Справка по налогам к документу', cmValue19, 'Справка по налогам к документу', hcSellM1DocNal, , , sci1Esc;
- 'Справка об объеме и массе позиций спецификации документа', cmValue25, 'Справка об объеме и массе позиций спецификации документа', hcm_zakup_LokSpravka, , , sci1Esc;
-----------;
#ifdef __Export_NN__
- 'Выбор группы налогов', cmSetGrNal, 'Выбор группы налогов для всех позиций спецификации документа', hcSpSoprSetGrNal, '', , sci1Esc;
#end
- 'Пересчет цен обратным счетом', cmValFld12, 'Пересчет цен обратным счетом', hcSellM1DocCena, , , sci1Esc;
-----------;
- 'Пересортировка спецификации', cmFilialNo, 'Пересортировка спецификации', hcCtxSortMC, 'Alt+N', kbAltN, sci1Esc;
-----------;
- 'Копирование спецификации из другого документа', cmAccording, 'Копирование спецификации', hcCtxCopyDocSp, 'Alt+S', kbAltS, sci1Esc;
- 'Копирование спецификации из приходной накладной', cmValFld3, 'Копирование спецификации из приходной накладной', hcm_zakup_LokKopir_Prich, , , sci1Esc;
----------;
= 'Показатели качества', 'Показатели качества', hcKouDocSellMLocQual, sci1Esc;
{
  - 'Расчет скидок/надбавок', cmValFld19, 'Расчет скидок/надбавок по ДО по показателям качества', hcKouDocSellMLocQualSkid, , , sci1Esc;
  - 'Печать удостоверений качества', cmValFld18, 'Печать удостоверений качества по ДО', hcKouDocSellMLocQualUK, , , sci1Esc;
}
-----------;
- 'Просмотр схем связей между документами', cmLegend, 'Просмотр схем связей между документами', hcdgDocRelationView, 'Alt+U', kbAltU, sci1Esc;
-----------;
- 'Дата формирования документа', cmVal1, 'Дата выписки ДО по умолчанию', hcNastrDocDateDefault, , , sci1Esc;
-----------;
- 'Расчет накопительной скидки по Контрагенту', cmValue23, 'Рассчитать накопительную скидку по Контрагенту', hcSellLocMCalcSkidFactProd, , , sci1Esc;
-----------;
= 'Сложные скидки', 'Сложные скидки', hcOKatalM1DiffSkidka, sci1Esc;
{
  - 'Расчет сложных скидок', cmInsertEditKN, 'Рассчитать сложные скидки', hcSellLocMDocDiffSkidkaCalc, 'Alt+K', kbAltK, sci1Esc;
  - 'Просмотр сложных скидок', cmKauReff, 'Показать сложные скидки', hcSellLocMDocDiffSkidkaView, 'Alt+T', kbAltT, sci1Esc;
  - 'Удаление сложных скидок по документу', cmValue22, 'Удалить сложные скидки по документу', hcSellLocMDocDiffSkidkaDel, , , sci1Esc;
}
-----------;
- 'Выбор МЦ для отвязки c просмотром нагрузки', cmValue24, 'Выбор МЦ для отвязки c просмотром нагрузки', hcSellLocMDOOtvyazMC, , , sci1Esc;
- 'Выбор МЦ для отвязки без просмотра нагрузки', cmValue26, 'Выбор МЦ для отвязки без просмотра нагрузки', hcSellLocMDOOtvyazMC, , , sci1Esc;
-----------;
- 'Хозоперации по документу', cmHozOper, 'Просмотр хозопераций по документу', hcXozOperDOC, 'Ctrl+H', kbCtrlH, sci1Esc;
-----------;
- 'Разноска Объектов целевого учета по спецификации', cmVal8, 'Выбор Объектов целевого учета для нескольких позиций спецификации', hcUKS_RaznosPoSpesific, '', , sci1Esc;
-----------;
- 'Отображение спецификации в виде сметы', cmValue60, 'Отобразить спецификацию в виде сметы', hcuks_Otobraz_Sp_VidSmet, '', , sci1Esc;
#ifdef __LIMIT__
-----------;
- 'Лимиты', cmLimits, 'Лимиты', hcNoContext, , , sci1Esc;
#end //__LIMIT__
-----------;
  -'Дублируемые позиции', cmDublSopr, 'Отчет по дублируемым позициям', hcctxDublSopr, , , sci1Esc;
-----------;
- 'Формирование накладных по календарным планам договора', cmRaspVIPMC, 'Автоматическое формирование накладных по ПКП договора', hci_nakl_FormKalendPlan, '', , sci1Esc;
-----------;
- 'Документооборот', cmDocBas, 'Войти в режим документооборота', hcCtxDocOborot, 'Alt+D', kbAltD, sci1Esc;
}

mnuVschetVn Menu
{
-----------;
- 'Внешняя классификация', cmPickClass, 'Внешняя классификация', hcGkatalM1ExtClass, 'Alt+C', kbAltC, sci1Esc;
- 'Внешние атрибуты', cmPickAttr, 'Заполнение внешних атрибутов по данной позиции', hcGkatalM1Attr, 'Alt+A', kbAltA, sci1Esc;
}

//******************************************************************************

#doc
Локальное меню спецификации окна редактирования интерфейса <link Interface L_BaseDoc::Vschet>L_BaseDoc::Vschet - ДО на продажу</link>
#end
mnuVschet1 Menu
{
- 'Смена дескриптора', cmManagerId, 'Перейти на другой дескриптор', hcZakupLocMDODescr, 'Alt+M', kbAltM, sci1Esc;
-----------;
- 'Налоговый счет-фактура/справка по документу', cmPlansNo, 'Печать налогового счета-фактуры/просмотр справки по документу', hcCtxNalSchFact, 'Alt+P', kbAltP, sci1Esc;
-----------;
- 'Справка по наличию МЦ', cmNal, 'Справка по МЦ', hcKouDocBNalRes, 'Alt+F', kbAltF, sci1Esc;
- 'Просмотр текущих остатков', cmSaveDoc, 'Просмотр текущих остатков', hciGtekOst, 'Ctrl+F2', kbCtrlF2, sci1Esc;
- 'Расчет остатков на дату в указанном разрезе', cmShowAll, 'Расчет остатков на любую дату в любом указанном разрезе', hcAllASaldDat, 'Ctrl+''+''', kbCtrlGrayPlus, sci1Esc;
-----------;
- 'Снятие резерва по позиции', cmValue15, 'Снятие резерва по позиции', hcSellM1SnResDoc, , , sci1Esc;
- 'Расчет налогов по позиции по выбранной группе', cmValue18, 'Расчет налогов по позиции по выбранной группе', hcSellM1RasNal, , , sci1Esc;
-----------;
- 'Удаление всех позиций ДО по текущей МЦ/услуге', cmValFld9, 'Удаление всех позиций ДО по текущей МЦ/услуге', hcSellM1DelPart, , , sci1Esc;
- 'Объединение позиций ДО', cmValFld11, 'Объединение позиций ДО', hcSellM1AddPart, , , sci1Esc;
- 'Дублирование текущей МЦ/услуги', cmValFld16, 'Дублирование текущей МЦ/услуги', hcSellDublPos, , , sci1Esc;
- 'Заполнение позиций ДО по текущей МЦ/услуге', cmValFld15, 'Заполнение позиций ДО по текущей МЦ/услуге', hcSellM1EditPart, , , sci1Esc;
-----------;
- 'Расчет стоимости услуги как % от стоимости МЦ', cmAccording, 'Рассчитать стоимость услуги как % от стоимости МЦ', hcSellM1SumUslPart, 'Alt+S', kbAltS, sci1Esc;
- 'Запрет на пересчет суммы по ДО', cmSortMC, '', hcZapret, 'Alt+R', kbAltR, sci1Esc;
-----------;
- 'Формирование спецификации по прайс-листу с резервированием', cmBuhCalculator, 'Формирование спецификации по прайс-листу с резервированием', hcSellDOLocMFormSpecPriceRezerv, 'Shift+F3', kbShiftF3, sci1Esc;
- 'Формирование спецификации из текущих остатков с резервированием', cmValFld21, 'Формирование спецификации из текущих остатков с резервированием' , hcm_sell_Popolnen_Sp_DO, '' , , sci1Esc;
-----------;
- 'Выбор позиций из каталога', cmRestoreDoc, 'Выбор позиций непосредственно из каталога, минуя прайс-лист', hcSellLocMFromKatal, 'Ctrl+F3', kbCtrlF3, sci1Esc;
- 'Выбор позиции из смет', cmMulSelDO, 'Выбор позиции из смет', hcm_zakup_Lok_Smeta, 'Ctrl+I', kbCtrlI, sci1Esc;
-----------;
- 'Расчет стоимости услуги', cmValue20, 'Отчет - Расчет стоимости услуги', hccuMCalc, '', , sci1Esc;
- 'Параметры расчетной услуги', cmValue17, 'Просмотр и изменение параметров расчетной услуги', hccuMInPar, '', , sci1Esc;
-----------;
- 'Расчет сложных скидок', cmInsertEditKN, 'Рассчитать сложные скидки', hcSellLocMDocDiffSkidkaCalc, 'Alt+K', kbAltK, sci1Esc;
- 'Просмотр сложных скидок', cmKauReff, 'Показать сложные скидки', hcSellLocMDocDiffSkidkaView, 'Alt+T', kbAltT, sci1Esc;
-----------;
- 'Изменение цены относительно учетной единицы', cmValue33, 'Измененить цены относительно учетной единицы', ,'', , sci1Esc;
-----------;
- 'Просмотр цен МЦ/Услуги в прайс-листах', cmValue35, 'Просмотр цен МЦ/Услуги в прайс-листах', ,'', , sci1Esc;

#ifdef __LIMIT__
-----------;
- 'Лимиты', cmLimits, 'Лимиты', hcNoContext, , , sci1Esc;
#end //__LIMIT__
#ifdef __MTR_TO_SPEC__
-----------;
-'Целевой учет', cmIerarchy, '', hcUKS_LokM_Chelev, 'Ctrl+U', kbCtrlU, sci1Esc;
#end
-----------;
- 'Документооборот', cmDocBas, 'Войти в режим документооборота', hcCtxDocOborot, 'Alt+D', kbAltD, sci1Esc;
-----------;
- 'Внешняя классификация', cmPickClass, 'Внешняя классификация', hcGkatalM1ExtClass, 'Alt+C', kbAltC, sci1Esc;
- 'Внешние атрибуты', cmPickAttr, 'Заполнение внешних атрибутов по данной позиции', hcGkatalM1Attr, 'Alt+A', kbAltA, sci1Esc;
-----------;
- 'Расширенная информация', cmAttrib, 'Открыть окно расширенной информации', hcKouDocBExt, 'Ctrl+Enter', kbCtrlEnter, sci1Esc;
}

//******************************************************************************

#doc
Локальное меню главного окна интерфейса <link Interface L_BaseDoc::Vschet>L_BaseDoc::Vschet - ДО на продажу</link>
#end
mnuVschet2 Menu
{
- 'Ф~и~льтр ...', cmFilterSave, 'Установить/снять фильтр на документы-основания', hcLok_Filtr_doc, 'Alt+B', kbAltB, sci1Esc;
-----------;
= 'Печать', 'Печать', , sci1Esc;
{
- 'Печать документа', cmPrintDoc, 'Печать документа', hcCtxSoprPrintDoc, 'Ctrl+P', kbCtrlP, sci1Esc;
- 'Печать документа в FastReport',cmValue29,'Печать документа в формате FastReport',hcctxSoprPrintDoc,,,sci1Esc;
- 'Печать реестра ДО',cmPlansNo,'Печать реестра ДО на продажу',hcm_sell_Pech_Reestr,'Alt+P',kbAltP,sci1Esc;
- 'Печать реестра ДО в FastReport',cmValue30,'Печать реестра ДО на продажу в FastReport',hcm_sell_Pech_Reestr,,,sci1Esc;
}
-----------;
- 'Сохранение записи', cmSaveDoc, 'Сохранение записи', hcctxSoprSaveDoc, 'Ctrl+F2', kbCtrlF2, sci1Esc;
- 'Вставка сохраненной записи', cmRestoreDoc, 'Вставка сохраненной записи', hcctxSoprRestoreDoc, 'Ctrl+F3', kbCtrlF3, sci1Esc;
-----------;
- 'Переключение формата на отгрузку/оплату', cmValue12, 'Расчет отгрузок/оплат по ДО', hcHotDoFormat, , , sci1Esc;
-----------;
- 'Пересчет сумм и налогов по документам', cmValue20, 'Пересчет сумм и налогов по документам', hcHotDoRas, , , sci1Esc;
- 'Изменение цен по выбранному прайс-листу', cmValue17, 'Изменение цен по выбранному прайс-листу', hcCtxPriceIzm, , , sci1Esc;
- 'Пересчет стоимости услуг', cmValue31, 'Пересчет стоимости услуг', , , , sci1Esc;
-----------;
- 'Перенос цен в связанные накладные', cmValFld4, 'Перенос цен в связанные накладные', hcSynchro, , , sci1Esc;
- 'Пересчет цен по скидке/надбавке', cmValue19, '', hcKouDocLocMCalcPriceSkidka, , , sci1Esc;
- 'Пересчет цен по показателю качества', cmValue18, '', hcKouDocLocMCalcPriceMicroN, , , sci1Esc;
-----------;
- 'Изменение получателя налогов', cmValFld5, 'Групповая операция изменения получателей налогов', hcHotNewOrgNalog, , , sci1Esc;
- 'Групповая замена полей ТТИ',cmValue11, 'Групповая замена полей ТТИ', hci_zakup_Grupp_Zam, , , sci1Esc;
- 'Дата формирования документа', cmVal1, 'Дата выписки ДО по умолчанию', hcNastrDocDateDefault, , , sci1Esc;
- 'Поиск документа по номеру вагона', cmVal2, 'Поиск документа по номеру вагона', hcSellLocMFindByVagon, , , sci1Esc;
-----------;
- '~Н~астройка', cmValFld7, 'Настройка', hcAdmNasrViewInter, , , sci1Esc;
-----------;
- 'Хозоперации по документу', cmHozOper, 'Просмотр хозопераций по документу', hcXozOperDOC, 'Ctrl+H', kbCtrlH, sci1Esc;
-----------;
- 'Замена объектов строительства', cmValue59, 'Замена объектов строительства', hcuks_Zamen_ObStroit,,, sci1Esc;
#ifdef __LIMIT__
-----------;
- 'Лимиты', cmLimits, 'Лимиты', hcNoContext, , , sci1Esc;
#end //__LIMIT__
-----------;
- 'Документооборот', cmDocBas, 'Войти в режим документооборота', hcCtxDocOborot, 'Alt+D', kbAltD, sci1Esc;
-----------;
- 'Внешняя классификация', cmPickClass, 'Внешняя классификация', hcGkatalM1ExtClass, 'Alt+C', kbAltC, sci1Esc;
- 'Внешние атрибуты', cmPickAttr, 'Заполнение внешних атрибутов по данной позиции', hcGkatalM1Attr, 'Alt+A', kbAltA, sci1Esc;
- 'Тиражирование внешней классификации',cmExClassRepl,'Тиражирование внешней классификации',,,,sci1Esc;
-----------;
- 'Экспорт', cmExp, 'Экспорт документов', hcSwiftMAll, 'Alt+O', kbAltO, sci1Esc;
- 'Импорт', cmImp, 'Импорт документов', hcSwiftMAll, 'Alt+I', kbAltI, sci1Esc;
- 'Протокол', cmIEHist, 'Протокол экспорта/импорта', hcSwiftMAll, 'Alt+H', kbAltH, sci1Esc;
-----------;
}

//******************************************************************************

#doc
Локальное меню расширенной информации по спецификации окна редактирования интерфейса <link Interface L_BaseDoc::Vschet>L_BaseDoc::Vschet - ДО на продажу</link>
#end
mnuVSchetSpStep Menu
{
- 'Выбор позиций из каталога', cmRestoreDoc, 'Выбор позиций непосредственно из каталога, минуя прайс-лист', hcSellLocMFromKatal, 'Ctrl+F3', kbCtrlF3, sci1Esc;
- 'Расчет остатков на дату в указанном разрезе', cmShowAll, 'Расчет остатков на любую дату в любом указанном разрезе', hcAllASaldDat, 'Ctrl+''+''', kbCtrlGrayPlus, sci1Esc;
- 'Расчет налогов по позиции по выбранной группе', cmValue18, 'Расчет налогов по позиции по выбранной группе', hcSellM1RasNal, , , sci1Esc;
- 'Перенаправление резерва по позиции документа', cmValFld11, 'Перенаправить резерв по позиции документа', hcSellM1NaprRes, , , sci1Esc;
/*
#ifdef __MTR_TO_SPEC__
-----------;
- 'Целевой учет', cmIerarchy, '', hcUKS_LokM_Chelev, 'Ctrl+U', kbCtrlU, sci1Esc;
#end
*/
}

//******************************************************************************

#doc
Для выбора метода резервирования в интерфейсе <link Interface L_BaseDoc::Vschet>L_BaseDoc::Vschet - ДО на продажу</link>
#end
mnuMakeReserv Menu
{
- 'Автоматическое перерезервирование по всем позициям', cmValue1, 'Автоматическое перерезервирование по всем позициям', hcm_zakup_AvtomPererezerv, '', , sci1Esc;
- 'Резервирование по позициям без резерва с уточнением разреза' , cmValue2, 'Резервирование по позициям без резерва с уточнением разреза', hcm_zakup_RezervBEZ_Rezerv, '', , sci1Esc;
}

//******************************************************************************

#doc
Локальное меню окна <link Window L_BaseDoc::Vschet.wReserv>L_BaseDoc::Vschet.wReserv - Резервы по позиции документа-основания</link>
#end
mnuEditReservOnSpStep Menu
{
- 'Редактирование резервов по позиции', cmValue1, 'Редактирование резервов по позиции', hcm_zakup_RedRezPoz, '', , sci1Esc;
- 'Перенаправление резерва по позиции документа', cmValFld11, 'Перенаправить резерв по позиции документа', hcSellM1NaprRes, , , sci1Esc;
}

//******************************************************************************

#doc
Элемент локального меню для просмотра налоговых накладных
#end
mnuNalNaklDoc Menu
{
- 'Документы для учета НДС', cmVrem, 'Просмотр документов для учета НДС', , '', , sci1Esc;
}

//******************************************************************************

#doc
Элемент локального меню для просмотра списка входящих/исходящих документов планирования
#end
mnuProizvPlan Menu
{
 = 'Планирование', '', , sci1Esc;
 {
  - 'Входящие документы', cmOne, 'Список входящих документов', , , , sci1Esc;
  - 'Исходящие документы', cmTwo, 'Список исходящих документов', , , , sci1Esc;
 }
}

//******************************************************************************

#doc
Элемент локального меню для просмотра документов для учета НДС, списка входящих/исходящих документов планирования
#end
mnuNalNaklDocAndProizvPlan Menu
{
- 'Документы для учета НДС', cmVrem, 'Просмотр документов для учета НДС', , '', , sci1Esc;
-----------;
 = 'Планирование', 'Планирование', , sci1Esc;
{
  - 'Входящие документы', cmOne, 'Список входящих документов', , , , sci1Esc;
  - 'Исходящие документы', cmTwo, 'Список исходящих документов', , , , sci1Esc;
}
}

//******************************************************************************

GetFormRes DIALOG
Fields
  ShowRaspr    ('Метод автоматического распределения МЦ по разрезам', hcm_zakup_DORezerv, scGalDial): word, save;
  PartResRaspr ('Необходимость дорезервирования позиций', hcm_zakup_DORezerv, scGalDial): word, save;
Buttons
  cmOk, Default, , 'Ввод' , , scGalDial;
  cmCancel, , , 'Отмена', , scGalDial;

<<'Формирование резерва'

  ┌───────── Показывать распределение ──────────────┐
  │ (.) Нет                                       ` │
  │ (.) Да                                        ` │
  │ (.) Показывать при наличии нескольких разрезов` │
  └─────────────────────────────────────────────────┘

    [.] Дорезервирование позиций с частичным резервом`

         <.~П~родолжить.>       <. ~О~тмена .>
>>

//******************************************************************************

DoChargeParams DIALOG
  HelpCtx hcm_sell_RazdelenDO;
Fields
  ChargeParams ('Перенос частично зарезервированных позиций', , scGalDial): word;
Buttons
  cmOk, Default, , 'Ввод' , , scGalDial;
  cmCancel, , , 'Отмена', , scGalDial;

<<'Разделение ДО'

  ┌─ Частично зарезервированные позиции ─┐
  │ (.) переносить в новое ДО`           │
  │ (.) разделять`                       │
  └──────────────────────────────────────┘
       <.~П~родолжить.>    <. ~О~тмена .>
>>

//******************************************************************************
