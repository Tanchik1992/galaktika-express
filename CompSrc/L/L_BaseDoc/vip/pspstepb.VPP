//******************************************************************************
//                                                      (c) корпорация Галактика
// Галактика 7.12 - Логистика - ДО
// Спецификация документа-основания на предоплату закупок
//******************************************************************************

#include wdocnal.vpp

//******************************************************************************

#doc
Окно просмотра скидки к позиции спецификации документа
#end
Window  wSkidka 'Скидка к позиции спецификации документа' escClose;
  Show at (, , 47, 10);

//******************************************************************************

Panel p1;
  Show at (, , , );
  Table SpStep;

Screen scwSkidka;

Fields
  SpStep.VlSkid ('Величина скидки', hcKouDocBSkidkaPos, sci13Esc): [10.2];
  if (SpStep.PrSkid = 1, '%', SimVolB): skip, {font = {Italic = TRUE}};
  SpStep.PrSkid ('Вариант учета скидки', hcKouDocBSkidkaPos, sci13Esc):
    [LIST 1 'Скидка к позиции как %', 'Скидка к позиции как сумма'], protect;
<<

                 Скидка.@@@@@@@@@@@.@@@@@@
            .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
>>
end;// Screen
//---------------------------------------------------------------------------

HandleEvent

cmCheckField:
  case CurField of
  //--------------
    #SpStep.VlSkid
  , #SpStep.PrSkid:
      if (UpdateTable)
        { }
  //--------------
  end;

end; // HandleEvent
end; //Panel
end; // Window


//******************************************************************************

#doc
Окно расширенной информации по позиции
#end
Window  wSpStep 'Спецификация документа' escClose;
  Show at (, , 76, 22);

//******************************************************************************

Panel p1;
  Table SpStep;

Screen scSpStep 'Спецификация';
  Show at (, , , 12);

Fields
  KatMC2.Name   ('Товарная позиция, к которой относится услуга', , sci1378Esc): protect;
  Nomenkl       ('Номенклатурный номер товара/услуги', , sci1378Esc): protect,
                {Font = {BackColor = if (SpStep.cMCUSL = 0, ColorNeed, 0)}};
  NamMC         ('Товар/услуга', , sci1378Esc): protect;
  NamTovar      ('Наименование товара/услуги',  , sci1378Esc): protect,
                {Font = {BackColor = if (SpStep.cMCUSL = 0, ColorNeed, 0)}};
  SpStep.KolSkl        ('Количество ', , sci178Esc): [prSignsInKol], noprotect;
  KatOtpEd.Name ('Единица измерения', , sci1378Esc): protect,
                {Font = {BackColor = if (SpStep.cOtpEd = 0, ColorNeed, 0)}};
  SpStep.Price         ('Цена за единицу', , sci178Esc): [brForPrice];
  SimVolB       ('Наименование валюты', , sci178Esc): skip, left;
  SummaTov      ('Стоимость', , sci178Esc): [brForSumma], protect;
  SpStep.Summa ('Стоимость с учетом скидок', , sci178Esc): [brForSumma], protect;
  SpStep.NDS ('Величина налогов по товарной позиции', , sci178Esc): [brForSumma], protect;
  ManTax ('', , sci178Esc): skip, left;

  SpDogovor.NoDoc ('Номер договора', , ): protect, nodel;
  SpDogovor.dDoc  ('Дата заключения договора', , ): [, 'DD/MM/YYYY'], protect, nodel;
  SpAppDogovor.NoDoc ('Номер соглашения', , ): protect, nodel;
  SpAppDogovor.dDoc ('Дата заключения соглашения', , ): [, 'DD/MM/YYYY'], protect, nodel;
  SpCalPlan.NoDoc  ('Номер пункта календарного плана', , ): protect, nodel;
  SpCalPlan.dInput ('Дата ввода пункта календарного плана', , ): [, 'DD/MM/YYYY'], protect, nodel;
  FactoryPrice      ('Заводская(контрактная) цена', , ): [brForPrice], noprotect;
  [SkidVal ''] SimVolB + '': skip, left;
  fSpSoprProcNac    ('Процент надбавки', , ): noprotect;

Buttons
  cmValue9, , , 'Скидка к товару/услуге позиции документа-основания', , sci178Esc;
<<
`Относится к позиции`  .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
`Номенк.номер`         .@@@@@@@@@@@@@@@@@@@@@@@@@`Товар/услуга`.@@@@@@@@@@@
`Наименование`         .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
`Количество`           .@@@@@@@@@@@@@@@@    `Единица измерения`.@@@@@@@@@@@
`Цена`                 .@@@@@@@@@@@@@@@@.@@@@@@@@
`Стоимость`            .@@@@@@@@@@@@@@@@
`Сумма с учетом скидок`.@@@@@@@@@@@@@@@@           <.  Скидка к позиции  .>
`Налоги`               .@@@@@@@@@@@@@@@@.@@@@@@@@@@
    `Договор`          .@@@@@@@@@@@@@@@@@@@@@@@@@`от`.@@@@@@@@@@@
    `Соглашение`       .@@@@@@@@@@@@@@@@@@@@@@@@@`от`.@@@@@@@@@@@
    `Календарный план` .@@@@@@@@@@@@@@@@@@@@@@@@@`от`.@@@@@@@@@@@
`Заводская цена`       .@@@@@@@@@@@@@@@@.@@@@@@@@ `%`.@@@@@@@@@@@
>>

end;// Screen

//******************************************************************************

Screen scSpStepS 'Спецификация'; // для соп.услуг сумма
  Show at (, , , 12);

Fields
  KatMC2.Name   ('Товарная позиция, к которой относится услуга', , sci1378Esc): protect;
  Nomenkl       ('Номенклатурный номер товара/услуги', , sci1378Esc): protect,
                {Font = {BackColor = if (SpStep.cMCUSL = 0, ColorNeed, 0)}};
  NamTovar      ('Наименование товара/услуги', , sci1378Esc): protect,
                {Font = {BackColor = if (SpStep.cMCUSL = 0, ColorNeed, 0)}};
  NamMC         ('Тип позиции документа', , sci1378Esc): protect;
  SpStep.KolSkl ('Количество ', , sci178Esc): [prSignsInKol], noprotect;
  KatOtpEd.Name ('Единица измерения', , sci1378Esc): protect,
                {Font = {BackColor = if (SpStep.cOtpEd = 0, ColorNeed, 0)}};
  SpStep.Price  ('Цена за единицу', , sci178Esc): [brForPrice];
  SimVolB       ('Наименование валюты', , sci178Esc): skip;
  SummaTov      ('Стоимость', , sci178Esc): [brForSumma], skip;
  SpStep.Summa  ('Стоимость с учетом скидок', , sci178Esc): [brForSumma], skip;
  SpStep.NDS    ('Величина налогов по товарной позиции', , sci178Esc): [brForSumma], skip;

  SpDogovor.NoDoc ('Номер договора', , ): skip;
  SpDogovor.dDoc  ('Дата заключения договора', , ): [, 'DD/MM/YYYY'], skip;
  SpAppDogovor.NoDoc ('Номер соглашения', , ): skip;
  SpAppDogovor.dDoc ('Дата заключения соглашения', , ): [, 'DD/MM/YYYY'], skip;
  SpCalPlan.NoDoc  ('Номер пункта календарного плана', , ): skip;
  SpCalPlan.dInput ('Дата ввода пункта календарного плана', , ): [, 'DD/MM/YYYY'], skip;
<<
`Относится к позиции`  .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
`Номенк.номер`         .@@@@@@@@@@@@@@@@@@@@@
`Наименование`         .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
`Тип позиции документа`.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
`Количество`           .@@@@@@@@@@@@@@@@`Единица измерения`.@@@@@@@@@@@
`Цена`                 .@@@@@@@@@@@@@@@@в.@@@@@@@@
`Стоимость`            .@@@@@@@@@@@@@@@@
`Стоимость со скидками`.@@@@@@@@@@@@@@@@
`Налоги`               .@@@@@@@@@@@@@@@@
     Договор           .@@@@@@@@@@@@@@@@@@@@@ от .@@@@@@@@@@@
     Соглашение        .@@@@@@@@@@@@@@@@@@@@@ от .@@@@@@@@@@@
     Календарный план  .@@@@@@@@@@@@@@@@@@@@@ от .@@@@@@@@@@@
>>
end;// Screen

//******************************************************************************

Screen scSpStepP 'Спецификация'; // для соп. услуг %
  Show at (, , , 12);

Fields
  KatMC2.Name   ('Товарная позиция, к которой относится услуга', , sci1378Esc): protect;
  Nomenkl       ('Номенклатурный номер товара/услуги', , sci1378Esc): protect,
                {Font = {BackColor = if (SpStep.cMCUSL = 0, ColorNeed, 0)}};
  NamTovar      ('Наименование товара/услуги', , sci1378Esc): protect,
                {Font = {BackColor = if (SpStep.cMCUSL = 0, ColorNeed, 0)}};
  NamMC         ('Тип позиции документа', , sci1378Esc): protect;
  SpStep.KolSkl ('% к стоимости позиций ', , sci178Esc): [prSignsInKol], noprotect;
  SpStep.Summa  ('Стоимость с учетом скидок', , sci178Esc): [brForSumma], skip;
  SimVolB       ('Наименование валюты', , sci178Esc): skip;
  SpStep.NDS    ('Величина налогов по товарной позиции', , sci178Esc): [brForSumma], skip;

  SpDogovor.NoDoc ('Номер договора', , ): skip;
  SpDogovor.dDoc  ('Дата заключения договора', , ): [, 'DD/MM/YYYY'], skip;
  SpAppDogovor.NoDoc ('Номер соглашения', , ): skip;
  SpAppDogovor.dDoc ('Дата заключения соглашения', , ): [, 'DD/MM/YYYY'], skip;
  SpCalPlan.NoDoc  ('Номер пункта календарного плана', , ): skip;
  SpCalPlan.dInput ('Дата ввода пункта календарного плана', , ): [, 'DD/MM/YYYY'], skip;
<<
`Относится к позиции`  .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
`Номенк.номер`         .@@@@@@@@@@@@@@@@@@@@@
`Наименование`         .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
`Тип позиции документа`.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
`% к стоимости позиций`.@@@@@@@@@@@@@@@@ на .@@@@@@@@@@@@@@@@@@.@@@@@@@
`Налоги`               .@@@@@@@@@@@@@@@@

     Договор           .@@@@@@@@@@@@@@@@@@@@@ от .@@@@@@@@@@@
     Соглашение        .@@@@@@@@@@@@@@@@@@@@@ от .@@@@@@@@@@@
     Календарный план  .@@@@@@@@@@@@@@@@@@@@@ от .@@@@@@@@@@@
>>
end;// Screen

TabbedSheet Bottom tsSpecifInfo
  Show at (, 13, ,);

Browse scNalEdit 'Налоги по позиции' (, , sci178Esc);
  Table SpDocNal;
Fields
  KatNalog.Name   #3'Налог'
                  : [10], Skip;

  SpDocnal.Nalog  #3'%'
                  : [5, 2];

  NalOrg.Name     #3'Контрагент'('Контрагент- получатель суммы данного налога', hcKouDocFSpNal, sci1378Esc)
                  : [25], protect;

  SpDocNal.SumVal #3'Сумма налога'('При необходимости уточните сумму налогов для позиции', hcKouDocFSpNal)
                  : [14], [brForSumma, '\2p[|-]36`666`666`666`666.88'];

  SimVolB         #3'Вал.'
                  : [4], Skip, NoAutoSize;

  SpDocNal.SumNal #3'Сумма налога'('Сумма налога в валюте налога', , )
                  : [14], [brForSumma, '\2p[|-]36`666`666`666`666.88'], protect;

  SimvNal         #3'Вал.'
                  : [4], skip, NoAutoSize;

end; // browse

Embedded scKauEdit 'Целевой учет' Interface;
end;

#include longnamemcdo.pan

end; // TabbedSheet

//******************************************************************************

Procedure ChoiceScreen;
{
  case SpStep.PrMC of
  //-----------------
    1
  , 2:
      {
        SetTabbedSheetVisible(scSpStep, true);

        if ( CurTabInWindow(wSpStep) <> scKauEdit )
          SetFormat(scSpStep);

        SetTabbedSheetVisible(scSpStepP, false);
        SetTabbedSheetVisible(scSpStepS, false);
      }
  //-----------------
    3:
      {
        SetTabbedSheetVisible(scSpStepP, true);

        if ( CurTabInWindow(wSpStep) <> scKauEdit )
          SetFormat(scSpStepP);

        SetTabbedSheetVisible(scSpStep, false);
        SetTabbedSheetVisible(scSpStepS, false);
      }
  //-----------------
    else
      {
        SetTabbedSheetVisible(scSpStepS, true);

        if ( CurTabInWindow(wSpStep) <> scKauEdit )
          SetFormat(scSpStepS);

        SetTabbedSheetVisible(scSpStep, false);
        SetTabbedSheetVisible(scSpStepP, false);
      }
  //-----------------
  end;

  cfsSetCurrentContainer('VSchetPB');

  SetFieldVisible(#KatMC2.Name, (SpStep.PrMC <> 1));
  cfsSetProp('L_SCSPSTEPMC_Относится_к_позиции', 'Visible', ((SpStep.PrMC <> 1)));
}

//******************************************************************************

HandleEvent

cmDelOnProtect:
  case CurField of
    #KatOtpEd.abbr,
    #KatOtpEd.Name:
      Abort;
  end;

cmPositionChanged:
  {
    if (CurWindow = wSpStep)
      ChoiceScreen;

    SetTabbedSheetVisible(scLongName, boGetTune(if (SpStep.PrMC = 1, 'McUsl.VarNameMC_IsUse', 'McUsl.VarNameUsl_IsUse')));
  }

cmPick:
  {
    if (CurField = #KatMC2.Name)
      {
        if (RunInterface(GetDOMC, BaseDoc.NRec, SpStep.cSpMC) <> cmCancel)
          {
#ifndef __MTR_TO_SPEC__
            Set SpStep.cUKS := SpStepMC.cUKS;
            if (IsValid(#SpecZatr2)) // с МЦ связана затрата
              {
                if (IsValid(#SpecZatr))
                  update current SpecZatr Set SpecZatr.cAddSumTune := SpecZatr2.cAddSumTune;
                else
                {
                  ClearBuffer(#SpecZatr);
                  SpecZatr.coTable := coSpStep;
                  SpecZatr.cAddSumTune := SpecZatr2.cAddSumTune;
                  SpecZatr.cUKS := SpStep.cUKS;
                  insert current SpecZatr;
                }
              }
            else
              if (IsValid(#SpecZatr))
                delete current Speczatr;
#else
            oMTRFun.CopySpecMTR(coSpStep, SpStepMC.NRec, coSpStep, SpStep.NRec);
#end

            UpdateTable;
            RereadRecord(#SpStep);
          }
      }

    if (CurField = #SpStep.KolSkl)
      {
        Pick_KolDopEd(1, 'Ввод количества', SpStep.KolSkl, 0, BaseDoc.VidDoc);
        ProcessCommand(cmCheckField);
      }
  }

cmSetCurField:
  {
    OldKolSklDEI := SpStep.KolSkl;
    OldKolDEI    := SpStep.Kol;
    OldKolOplDEI := SpStep.KolOpl;
  }

end;
end; //Panel

//******************************************************************************

HandleEvent

//------------------------------------------------------------------------------

cmOpenSearch:
  case CurField of
    #SpStep.Nds: // ввод вручную налогов
      if (SpStep.ManualTax = 1)
        if (IsValid(#SpDocNal))
          RunWindow(wSpDocNal)
        else
          Message('Необходимо определить в настройке налоги для учета!', InFormation);
  end;

//------------------------------------------------------------------------------

cmInit:
  ChoiceScreen;

//------------------------------------------------------------------------------

cmChangeTabbedSheetFormat:
{
  if ( (GetFirst spdocnal <> tsOk) and (Target = scNalEdit) )
    {
      Message('Налоги по позиции отсутствуют!', Information);
      Abort;
    }

  if ( (not IsValid(#SpStep)) and (Target = scKauEdit) )
    {
      Message('Укажите для позиции наименование МЦ/услуги либо удалите запись!',
                        Warning + OkButton);

      Abort;
    }
}

//------------------------------------------------------------------------------

cmValue18: // пересчет налогов по выбранной группе
 proc18;

//------------------------------------------------------------------------------

cmValue9:
  RunWindow(wSkidka);

//------------------------------------------------------------------------------

cmPickClass:
  RunWindow(wSkidka);

//------------------------------------------------------------------------------

cmHotKeys:
  PutHotCommand(RunMenu('mnuVSchetPBSpStep'));

//------------------------------------------------------------------------------

cmAttrib:
  SetFormat(scNalEdit);

//------------------------------------------------------------------------------

#ifdef __MTR_TO_SPEC__
cmIerarchy :
{
  var vcSp: comp;

  if (CurTable = #SpStep and IsValid(#SpStep))
    RunInterface('EditMtr2Spec', if(not EditDOPosEnabled(false, false) and if(not CanEditInClosePeriod(true), not CanEditInClosePeriod(false), true), 1, if(SpStep.cSpMC = 0, if(IsValid(#SmetaStroy), 2, 0), 1))
                               , 0, word(coSpStep), SpStep.nRec);

  vcSp := SpStep.nRec;

  PushPos(#SpStep);

  _LOOP SpStep where ((vcSp == SpStep.cSpMC))
    oMTRFun.CopySpecMTR(coSpStep, vcSp, coSpStep, SpStep.NRec);

  PopPos(#SpStep);
}
#end

end;
end; // Window

//******************************************************************************
