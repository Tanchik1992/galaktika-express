/*
#doc
Приложение к счет-фактуре для ШЦ
#end
.linkform 'Schfrees_N4_1' prototype is 'Schfrees'
.NameInList 'Приложение к счет-фактуре для ШЦ'
.Group 'Бланки счетов-фактур'
.create view vSpSchf
var
  SchFactNRec : comp;
  SpSchfNRec: comp;
as select
  SpSchf.*
from
    SpSchf   (ReadOnly)
,   KatSopr
,   SpSopr
where
((
            SchFactNRec == SpSchf.cSchFact 
))
;
.create view vSpSopr
var
  SchFactNRec : comp;
as select
  KatSopr.*
from
    KatSopr (ReadOnly)
  , SpSopr  (ReadOnly)
  , SpSchF  (ReadOnly)
where
((
    SchFactNRec    == KatSopr.cSchFact and
    KatSopr.nRec   == SpSopr.cSopr     and
    SpSopr.cSpSchf == SpSchf.nRec
))
;
.var
  NumVagon: array[1..3] of string;
  sNumVagon : string;
  i, j : integer;
  MrkSpSchf  : longint;
  boNVagon   : boolean;
.endvar
.if SetDateRange
.end
.begin
  MrkSpSchf:=InitMarker('',8,10,10);
end.
.{CheckEnter Schf
.if HeaderGroup
.end
.{CheckEnter SchfKatSopr
.{CheckEnter SchfSpSopr
.{CheckEnter SchfSpSoprNalog
.} // SchfSpSoprNalog
.} // SchfSpSopr
.} // SchfKatSopr
.fields
  NSF
  if (longint(dFact)<>0, DateToStr(dFact,'"DD" Mon YYYY г.'), '')
.endfields

 И      Приложение N 1  к cчет-фактуре N  Д@@@@@@@@@@@@ Д от  Д@@@@@@@@@@@@@@@@@@@@@@ Д И

.{CheckEnter SpSchf
.} // SpSchf
.{CheckEnter KazSt
.}
.{CheckEnter NalogFinSchf
.} // NalogFinSchf
.if ItogoGroup       // итого по группе. Если true, то не печатать Итого
.end
.begin
  boNVagon:=false;
  ClearMarker(MrkSpSchf);
  vSpSopr.SchFactNRec:=nSchFact;
  if (vSpSopr.GetFirst KatSopr = 0) then {}
end.
               Номера вагонов, учтенных в счет-фактуре                      
┌─────────────┬───────────────────────────────────────────────────────────┐
│ N накладной │                      Номера вагонов                       │
├─────────────┼───────────────────────────────────────────────────────────┤
.{ table 'vSpSopr.KatSopr'
.begin
 i:=1; NumVagon[1]:=''; NumVagon[2]:=''; NumVagon[3]:='';
 if (vSpSopr.GetFirst SpSopr = 0) 
  do
   {
    if (vSpSopr.GetFirst SpSchf = 0)
     {
! формирование строки вагонов
      if (Length(NumVagon[i])+Length(vSpSopr.SpSchf.ss[2])) > 255 then
       {
         i := i + 1;
         NumVagon[i] := '';
       };
      if (InStr(vSpSopr.SpSchf.ss[2], NumVagon[i]) > 0) then
         sNumVagon := NumVagon[i];
      else
        if (i > 1) then
          for(j := i - 1; j >= i - 1; j := j - 1)
            {
              if (InStr(vSpSopr.SpSchf.ss[2], NumVagon[j]) > 0) then
                 sNumVagon := NumVagon[j];
            }
        else
          {
            sNumVagon := NumVagon[i] + vSpSopr.SpSchf.ss[2] + ' ';
          }
      NumVagon[i] := sNumVagon;
      InsertMarker(MrkSpSchf,vSpSopr.SpSchf.nRec);
     }
   }
  while ((vSpSopr.GetNext SpSopr=0) and (i<=3))
end.
.{?internal;(boNVagon)                                                    
├─────────────┼───────────────────────────────────────────────────────────┤
.begin
 boNVagon:=false
end.
.}            
.{?internal;(length(NumVagon[1])>0)
.fields
    vSpSopr.KatSopr.NSopr
    NumVagon[1]
.endfields
│ @@@@@@@@@@@ │ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@│
.begin
 boNVagon:=true;
end.
.}
.{?internal;(length(NumVagon[2])>0)
.fields
 NumVagon[2]
.endfields
│             │ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@│
.}
.{?internal;(length(NumVagon[3])>0)
.fields
 NumVagon[3]
.endfields
│             │ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@│
.}
.} //table vSpSopr
.begin
  vSpSchf.SchFactNRec:=nSchFact;
  i:=1; NumVagon[1]:=''; NumVagon[2]:=''; NumVagon[3]:='';
  if (vSpSchf.GetFirst SpSchf = 0) then {}
end.
.{ table 'vSpSchf.SpSchf'
.{?internal;(not SearchMarker(MrkSpSchf,vSpSchf.SpSchf.nRec,longint(0)))
.begin
! формирование строки вагонов
  if (i <= 3)
   {
    if (Length(NumVagon[i])+Length(vSpSchf.SpSchf.ss[2])) > 255 then
     {
       i := i + 1;
       NumVagon[i] := '';
     };
      if (InStr(vSpSchf.SpSchf.ss[2], NumVagon[i]) > 0) then
         sNumVagon := NumVagon[i];
      else
        if (i > 1) then
          for(j := i - 1; j >= i - 1; j := j - 1)
            {
              if (InStr(vSpSchf.SpSchf.ss[2], NumVagon[j]) > 0) then
                 sNumVagon := NumVagon[j];
            }
        else
          {
            sNumVagon := NumVagon[i] + vSpSchf.SpSchf.ss[2] + ' ';
          }
    NumVagon[i] := sNumVagon;
    InsertMarker(MrkSpSchf,vSpSchf.SpSchf.nRec);
   }
end.
.}
.} //table vSpSchf
.{?internal;(length(NumVagon[1])>0)
.{?internal;(boNVagon)                                                    
├─────────────┼───────────────────────────────────────────────────────────┤
.begin
 boNVagon:=false
end.
.}
.fields
    NumVagon[1]
.endfields
│             │ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@│
.}
.{?internal;(length(NumVagon[2])>0)
.fields
 NumVagon[2]
.endfields
│             │ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@│
.}
.{?internal;(length(NumVagon[3])>0)
.fields
 NumVagon[3]
.endfields
│             │ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@│
.}
└─────────────┴───────────────────────────────────────────────────────────┘

.} // Schf
.begin
  ClearMarker(MrkSpSchf);
  DoneMarker(MrkSpSchf,'');
end.
.endform
*/