//********************************************************************************
//                                                        (c) корпорация Галактика
// Галактика 7.12 - Логистика
// Групповой выбор спецификации документа
//********************************************************************************

#include oEdIzm.vih
#include MTRFuncs.vih           // функции целевого учета
#include LinkMTR2Spec.vih       // функции целевого учета
#include setsmeta.vih

#doc
Интерфейс множественного выбора спецификации
#end
Interface GetSomeSpDocs1 'Выбор спецификации документов' EscClose
                                                       , Cyan
                                                       , DoAccept;
Show at (,, 112,);

Table STRUCT TM_Group "Таблица в памяти"
(
  nRec      : comp
, PrMC      : word
, Name      : tName
, BarKod    : tBarKod
, GrName    : tName
, EdIzm     : tName
, sVal      : s6
, cMcUsl    : comp
, cOtpEd    : comp
, Kol       : double
, PkdKol    : double
, Ostatok   : double
, Summa     : double
, PkdSum    : double
)
With INDEX
(
  TM_Group01 = nRec(Unique)
, TM_Group02 = Name
, TM_Group03 = BarKod
, TM_Group04 = PrMC + cMcUsl + cOtpEd
);

Table STRUCT TM_TempDescr "Таблица в памяти"
(
  nRec      : comp
, cGroup    : comp
, Code      : word
, NotIsLeaf : word
, cRec      : comp
, TiDk      : word
, cSpMC     : comp
, Sum       : array [1..4] of double
, Koef      : double
, Percent   : double
, Name      : string
, BarKod    : string
, GrName    : string
, PrMC      : word
, cGrTable  : comp
)
With INDEX
(
  TM_TempDescr01 = nRec(Unique)
, TM_TempDescr02 = cGroup + Code + NotIsLeaf
, TM_TempDescr03 = cRec
, TM_TempDescr04 = cSpMC
, TM_TempDescr05 = cGroup + TiDk
, TM_TempDescr06 = cGrTable + cGroup + Code + NotIsLeaf
);

#include oEdIzm.var
#include MTRFuncs.var         // oMTRFun          функции целевого учета

//******************************************************************************

Function GetKAUField(pNum : integer) : string; Forward;

//******************************************************************************

Create view
Var
  pSetSmeta : iSetSmeta;
//*****************
  CurGroup
, pDocOwner
, p1
, curSpDocs
, TempRec
   : comp;
//*****************
  CurCode
, TiDkOwner
, EmptyFlt
, pCopyZam
, copyZamen
, pDirect
   : word;
//*****************
  OkMulti
, NeedCheckOE
   : boolean;
//*****************
  MarkerSpDocs
, IndexSpDocs
, MarkerKol
, IndexKol
, MarkerSpDocsZam
   : longint;
//*****************
  tmpKol
, myKol
, tmpOst
, d
   : double;
//*****************

As select
//******************************************************************************
  if(OkMulti, if(SearchMarker(MarkerSpDocs, SpDocs.nRec, IndexSpDocs), 'V', ' '), '')
    ( FieldName = Picked )
//******************************************************************************
, if (TM_TempDescr.PrMC =  1,  'Т',
  if (TM_TempDescr.PrMC =  2,  'У',
  if (TM_TempDescr.PrMC =  3, 'УП',
  if (TM_TempDescr.PrMC =  4, 'ДС',
  if (TM_TempDescr.PrMC =  5, 'ГП',
  if (TM_TempDescr.PrMC = 10, 'Шбл',
  if (TM_TempDescr.PrMC = 20, 'Шбл',
                             '?')))))))
    ( FieldName = SpDocsPr )
//******************************************************************************
, if (GetMarker(MarkerKol, IndexSpDocs, tmpKol), tmpKol, 0.0)
    ( FieldName = PickedKol )
//******************************************************************************
, if(IsValid(tnSmetaStroy),SmetaStroy.NoSmet + ': ' + SmetaStroy.Name,'')
    ( FieldName = SmetaMy )
//******************************************************************************
, if(IsValid(tnSmetaSpec), string(SmetaSpec.NPP) + ' (' + SmetaSpec.Code + ') ' + SmetaSpec.Name, '')
    ( FieldName = SmetaSpMy )
//******************************************************************************
, GetKAUField(1)  ( FieldName = vsKau1 )
, GetKAUField(2)  ( FieldName = vsKau2 )
, GetKAUField(3)  ( FieldName = vsKau3 )
, GetKAUField(4)  ( FieldName = vsKau4 )
, GetKAUField(5)  ( FieldName = vsKau5 )
, GetKAUField(6)  ( FieldName = vsKau6 )
, GetKAUField(7)  ( FieldName = vsKau7 )
, GetKAUField(8)  ( FieldName = vsKau8 )
, GetKAUField(9)  ( FieldName = vsKau9 )
, GetKAUField(10) ( FieldName = vsKau10 )
//******************************************************************************
, if(SpDocs.cVal = 0, sGetTune('NDE.SimvRub'), KlVal.SimvolV)
    ( FieldName = sKlVal )

From
  SpDocs
, GroupMC
, GroupUsl
, KatMC
, KatUsl
, MaskMC
, MaskUsl
, KatOtpEd
, ResOtgr
, KlVal
, SpDocs       SpDocs1
, SpDocs       SpDocs2(SpDocs02)
, SpDocs       SpDocs3
, SpDocs       SpDocs4
, Shipment     SpShipment
, TipOtg       SpTipOtg
, WayMove      SpWayMove
, MoveCell
, TM_TempDescr
, TM_TempDescr TM_TempDescr1
, TM_TempDescr TM_TempDescr2
, KatStroy
, AddSumTune
, SmetaSpec
, SpecZatr
, SpDocSmeta
, SmetaStroy
, Dogovor
, CalPlan
, SpecMTR
, SaldTune
, TM_Group
, TM_Group TM_Group1

Where
((
//********************************************
    pDocOwner            == SpDocs.cDoc
AND TiDkOwner            == SpDocs.TiDk
//********************************************
AND SpDocs.cOtpEd        == KatOtpEd.nRec
AND SpDocs.cResOtgr      == ResOtgr.nRec
AND SpDocs.cVal          == KlVal.nRec
AND SpDocs.cResOtgr      == ResOtgr.nRec
AND SpDocs.cMoveCell     == MoveCell.nRec
AND SpDocs.cShipment     == SpShipment.nRec
AND SpDocs.cTipOtg       == SpTipOtg.nRec
AND SpDocs.cWayMove      == SpWayMove.nRec
//********************************************
AND SpDocs.cDoc          == SpDocs4.nRec
AND SpDocs.nRec          == SpDocs3.cSpMC
AND SpDocs.nRec          == SpDocs2.cDoc
AND word(439)            == SpDocs2.TiDk
//********************************************
AND SpDocs.cUks          == KatStroy.nRec
AND SpDocs.nRec          == SpecZatr.cSpec
AND coSpDocs             == SpecZatr.coTable
AND SpecZatr.cAddSumTune == AddSumTune.nRec
AND coSpDocs             == SpDocSmeta.coTable
AND SpDocs.nRec          == SpDocSmeta.cSpec
AND SpDocSmeta.cSmeta    == SmetaStroy.nRec
AND SpDocSmeta.cPosition == SmetaSpec.nRec
//********************************************
AND coSpDocs             == SpecMTR.coTable
AND SpDocs.nRec          == SpecMTR.cSpec
AND SpecMTR.cSaldTune    == SaldTune.nRec
//********************************************
))

//******************************************************************************

Bounds SpDocs1
  pDocOwner      == SpDocs.cDoc AND
  TiDkOwner      == SpDocs.TiDk AND
  word(EmptyFlt) == SpDocs.Empty

//******************************************************************************

Bounds TD1 =
  CurGroup  == TM_TempDescr.cGroup AND
  CurCode  >>= TM_TempDescr.Code

Bounds TD1_Gr =
  TM_Group.nRec == TM_TempDescr.cGrTable AND
  CurGroup      == TM_TempDescr.cGroup   AND
  CurCode      >>= TM_TempDescr.Code


//******************************************************************************

Bounds TD2 =
  TM_TempDescr.cRec == SpDocs.nRec

//******************************************************************************

Order By
  SpDocs.Code

//******************************************************************************
;

Parameters
  OkMulti   //-- TRUE- групповой выбор FALSE-одиночный
, pDocOwner //-- ссылка на документ из которого надо брать спецификацию
, TiDkOwner //-- тип документа из которого надо брать спецификацию
, p1        //-- ссылка на выбраную позицию при одиночном выборе
, EmptyFlt
, curSpDocs
, pCopyZam  //-- только для OkMulti =TRUE, 1-доступно только без копирования замен
            //-- 2-доступно только с копированием замен
            //-- доступно все
, pDirect
;

//********************************************************************************

#include ShowKau.vpp

//******************************************************************************

Function GetKAUField(pNum : integer) : string;
{
  GetKAUField := #ShowKau(if(pNum = 1, SaldTune.wObj, SaldTune.wKau[pNum - 1]), if(pNum = 1, SpecMTR.cObj, SpecMTR.cKau[pNum - 1]));
}

//******************************************************************************
!-------Определяет остаток выбираемого товара, который можно еще выбрать--------
Function FunOst(pSpec: comp): double;
var
  Ost, k, FunKol: double;
  TmpIndexSpDocs: longint;
  OE, pSpMC     : comp;
{
  FunOst := 0;
  Ost    := 0;
  FunKol := 0;
  pSpMC  := 0;

  k  := KatOtpEd.Koef;
  OE := SpDocs.cOtpEd;

  PushPos(#SpDocs);

  if ( SpDocs.TiDk = 439 )
    {
      //******************************************************************
      // Для замены остаток рассчитывается по заменяемой позиции
      //******************************************************************
      pSpec := SpDocs.cDoc;
      pSpMC := SpDocs.cSpMC;
    }

  if ( GetFirst FastFirstRow SpDocs where (( pSpec == SpDocs.nRec )) = tsOk )
    {
      //******************************************************************
      // Остаток переводим в отп.единицы
      //******************************************************************
      Ost := SpDocs.Ostatok / k;

      if ( pSpMC <> 0 )
      // помечаем позицию шаблона
        {
          //******************************************************************
          // Рассчитываем помеченное количество в шаблоне
          //******************************************************************
          var kk: double;
          kk := 0.0;

          _LOOP SpDocs1 where (( pSpMC == SpDocs1.cSpMC ))
            if (SearchMarker(MarkerSpDocs, SpDocs1.nRec, TmpIndexSpDocs))
              kk := kk + if(GetMarker(MarkerKol, TmpIndexSpDocs, FunKol)
                          , fEdIzm.ConvertToSecondEd(FunKol, SpDocs1.cOtpEd, OE)
                          , 0.0);

          Ost := if(f_FirstKolIsGreater(Ost, TM_TempDescr.Sum[2] - kk), TM_TempDescr.Sum[2] - kk, Ost);
        }
      else
        {
          //******************************************************************
          // Если позиция SpDocs.nRec помечена,
          // то вычитаем из отстатка помеченное количество
          //******************************************************************
          if SearchMarker(MarkerSpDocs, SpDocs.nRec, TmpIndexSpDocs)
            Ost := Ost - if(GetMarker(MarkerKol, TmpIndexSpDocs, FunKol)
                          , fEdIzm.ConvertToSecondEd(FunKol, SpDocs.cOtpEd, OE)
                          , 0.0);

          //******************************************************************
          // Вычитаем из отстатка помеченное количество в заменах
          //******************************************************************
           _LOOP SpDocs2
             if (SearchMarker(MarkerSpDocs, SpDocs2.nRec, TmpIndexSpDocs))
               Ost := Ost - if(GetMarker(MarkerKol, TmpIndexSpDocs, FunKol)
                             , fEdIzm.ConvertToSecondEd(FunKol, SpDocs2.cOtpEd, OE)
                             , 0.0);
        }
    }

  FunOst := if(f_FirstKolIsGreater(Ost, 0.0)
              , if(f_FirstKolIsGreater(Ost, TM_TempDescr.Sum[2]), TM_TempDescr.Sum[2], Ost)
              , 0.0);

  PopPos(#SpDocs);
}

//******************************************************************************

#doc
Окно ввода количества
#end
Window winGetPickKol 'Введите количество' (, , sci1Esc) EscClose, DoAccept, Gray;
  Show at (, 7,, 10);

Panel panGetPickKol

Screen scrGetPickKol1;
Fields
   d                             : [prSignsInKol], Skip;
   myKol ('Количество',, sci1Esc): [prSignsInKol], NoProtect;
<<
                            &Доступно .@@@@@@@@@@@@
&Введите количество по данной позиции .@@@@@@@@@@@@
>>
end;

Screen scrGetPickKol2;
Fields
  myKol ('Количество',, sci1Esc): [prSignsInKol], NoProtect;
<<

 Введите количество по данной позиции .@@@@@@@@@@@@
>>
end;

HandleEvent

cmCheckField:
  if ( ( CurField = #myKol ) AND NeedCheckOE AND ( KatOtpEd.Diskret = 1 ) AND ( Round(myKol) <> myKol ) )
    {
      Message('Отпускная единица не является делимой!');
      Abort;
    }

end;

end; // Panel panGetPickKol

HandleEvent

cmInit:
  {
    TempRec := SpDocs.nRec;
    d       := FunOst(TempRec);
    myKol   := 0;

    if ( wGetTune('Pick.ChkGrpIns') = 2 )
      SetFormat(scrGetPickKol2)
    else
      SetFormat(scrGetPickKol1);
  }

end; // of HandleEvent Window winSerach

end; // of Window winSerach

//******************************************************************************

Procedure MarkUnmarkZamen(mypos: comp);
{
  _LOOP SpDocs3 where (( mypos == SpDocs3.cDoc AND word(439) == SpDocs3.TiDk ))
    InvertMarker(MarkerSpDocsZam, SpDocs3.nRec);
}

//******************************************************************************
//-- Установить заголовок окна
//******************************************************************************
Procedure SetMyTitle;
{
  if OkMulti
    SetTitle('Групповой выбор спецификации документа (помечено: ' + string(GetMarkerCount(MarkerSpDocs)) + ')')
  else
    SetTitle('Выбор спецификации документа');
}

//******************************************************************************
Function PickKol: double;
{
  case wGetTune('Pick.ChkGrpIns') of
  //********************************
   0:
     {
       TempRec := SpDocs.nRec;
       d       := FunOst(TempRec);

       Result := if(KatOtpEd.Diskret = 1, Trunc(d), d);

       InsertMarker(MarkerKol, Result);
     }
  //********************************
   1:
     {
       NeedCheckOE := TRUE;

       if ( RunWindowModal(winGetPickKol) = cmCancel )
         myKol := 0;

       Result := if(f_FirstKolIsGreater(myKol, d)
                             , if(KatOtpEd.Diskret = 1, Trunc(d)    ,     d)
                             , if(KatOtpEd.Diskret = 1, Trunc(myKol), myKol));

       InsertMarker(MarkerKol, Result);
     }
  //********************************
   2:
     {
       Result := 0;

       InsertMarker(MarkerKol, Result);
     }
  //********************************
  end;
}

//******************************************************************************
//-- Отменить выделение
Procedure KillPick;
{
  ClearMarker(MarkerSpDocsZam);
  ClearMarker(MarkerSpDocs);
  ClearMarker(MarkerKol);

  update TM_Group1 set TM_Group1.PkdKol := 0, TM_Group1.PkdSum := 0;

  RereadRecord(#TM_Group);

  SetMyTitle;
}

//******************************************************************************
Procedure MySetFieldSpDocs;
{
  if ( not UKS_Used )
    {
      SetFieldVisible(#KatStroy.Name  , false);
      SetFieldVisible(#AddSumTune.Name, false);
    }

  if ( not Lic_ItemExists('SmetaDocs') )
    {
      SetFieldVisible(#SmetaMy  , false);
      SetFieldVisible(#SmetaSpMy, false);
    }
}

//******************************************************************************

TabbedSheet TOP tshMain
  Show at (,,, 16);
  Table TM_TempDescr;

Tree 1 brSpDocs1 'Без переноса замен' (, hcDogViewListPos, sci1EnInsTree)
  WideOffset, DottedLines, LinesAtRoot
;

Fields { Font = { Color = if (Picked = 'V', ColorMark, 0) } };
//******************************************************************************
  Picked               #3'V'
                       : [1], Skip, Centered, NoAutoSize;
//******************************************************************************
  SpDocs.Code          #3'п/н'
                       : [15], Protect, NoAutoSize;
//******************************************************************************
  SpDocsPr             #3'Тип'
                       : [3], Protect, Centered, NoAutoSize;
//******************************************************************************
  TM_TempDescr.GrName  #3'Группа'
                       : [15], Protect;
//******************************************************************************
  TM_TempDescr.Name    #3'Продукция'
                       : [20], Protect;
//******************************************************************************
  TM_TempDescr.BarKod  #3'Ном.номер' ('Номенклатурный номер / баркод')
                       : [10], Protect;
//******************************************************************************
  KatOtpEd.Name        #3'ЕдИзм'
                       : [5], Protect, Centered, NoAutoSize;
//******************************************************************************
  if(if(SpDocs.TiDk = 439, SpDocs4.Direct, SpDocs.Direct) = 1, '1->2', '2->1')
                       #3''
                       : [5], Protect, Centered, NoAutoSize;
//******************************************************************************
  TM_TempDescr.Koef    #3'Коэффициент'
                       : [11.2, '\2p[|-]3666666.88'], Protect, LessNull;
//******************************************************************************
  TM_TempDescr.Percent #3'Процент'
                       : [7.2, '\2p[|-]3666666.88'], Protect, LessNull;
//******************************************************************************
  TM_TempDescr.Sum[1]  #3'Количество'
                       : [10], [prSignsInKol], Protect, NoAutoSize;
//******************************************************************************
  PickedKol            #3'Выбрано'
                       : [10.3], Protect, NoAutoSize, LessNull;
//******************************************************************************
  TM_TempDescr.Sum[3]  #3'Цена' ('Цена в валюте')
                       : [10.2, '\2p[|-]36`666`666`666.88'], Protect, NoAutoSize;
//******************************************************************************
  sKlVal               #3'Вал.'
                       : [4], Protect, Centered, NoAutoSize, { Font = { Italic = TRUE } };
//******************************************************************************
  SaldTune.Name        #3'Объект ЦУ': [10], Protect, NoAutoSize;
  vsKau1               #3'КАУ 1'    : [12], Protect, NoAutoSize;
  vsKau2               #3'КАУ 2'    : [12], Protect, NoAutoSize;
  vsKau3               #3'КАУ 3'    : [12], Protect, NoAutoSize;
  vsKau4               #3'КАУ 4'    : [12], Protect, NoAutoSize;
  vsKau5               #3'КАУ 5'    : [12], Protect, NoAutoSize;
  vsKau6               #3'КАУ 6'    : [12], Protect, NoAutoSize;
  vsKau7               #3'КАУ 7'    : [12], Protect, NoAutoSize;
  vsKau8               #3'КАУ 8'    : [12], Protect, NoAutoSize;
  vsKau9               #3'КАУ 9'    : [12], Protect, NoAutoSize;
  vsKau10              #3'КАУ 10'   : [12], Protect, NoAutoSize;
//******************************************************************************
  SmetaMy              #3'Смета' ('Локальная смета: "Номер": "Наименование"',,)
                       : [20], Protect, PickButton;
//******************************************************************************
  SmetaSpMy            #3'Спецификация сметы' ('Спецификация сметы: "№ п/п" ("Код") "Наименование"',,)
                       : [20], Protect, PickButton;
//******************************************************************************
end; // Browse

Tree 1 brSpDocs1_1 'С переносом замен' (, hcDogViewListPos, sci1EnInsTree)
  WideOffset, DottedLines, LinesAtRoot
;

Fields { Font = { Color = if (Picked = 'V', ColorMark, 0) } };
//******************************************************************************
  Picked               #3'V'
                       : [1] , Skip, Centered, NoAutoSize;
//******************************************************************************
  SpDocs.Code          #3'п/н'
                       : [12], Protect, NoAutoSize;
//******************************************************************************
  SpDocsPr             #3'Тип'
                       : [3], Protect, Centered, NoAutoSize;
//******************************************************************************
  TM_TempDescr.GrName  #3'Группа'
                       : [15], Protect;
//******************************************************************************
  TM_TempDescr.Name    #3'Продукция'
                       : [20], Protect;
//******************************************************************************
  TM_TempDescr.BarKod  #3'Ном.номер' ('Номенклатурный номер / баркод')
                       : [10], Protect;
//******************************************************************************
  KatOtpEd.Name        #3'ЕдИзм'
                       : [5], Protect, Centered, NoAutoSize;
//******************************************************************************
  if(if(SpDocs.TiDk = 439, SpDocs4.Direct, SpDocs.Direct) = 1, '1->2', '2->1')
                       #3''
                       : [5], Protect, Centered, NoAutoSize;
//******************************************************************************
  SpDocs.Kol           #3'Количество'
                       : [10],[prSignsInKol], Protect, NoAutoSize;
//******************************************************************************
  PickedKol            #3'Выбрано'
                       : [10.3], Protect, NoAutoSize, LessNull;
//******************************************************************************
  SpDocs.Price         #3'Цена'
                       ('Цена в валюте')
                       : [10.2, '\2p[|-]36`666`666`666.88'], Protect
                       , NoAutoSize;
//******************************************************************************
  sKlVal               #3'Вал.'
                       : [4], Protect
                       , Centered, NoAutoSize, { Font = { Italic = TRUE } };
//******************************************************************************
  SaldTune.Name        #3'Объект ЦУ' ('',, sci1378Esc): [10], Protect, NoAutoSize;
  vsKau1               #3'КАУ 1'     ('',, sci1378Esc): [12], Protect, NoAutoSize;
  vsKau2               #3'КАУ 2'     ('',, sci1378Esc): [12], Protect, NoAutoSize;
  vsKau3               #3'КАУ 3'     ('',, sci1378Esc): [12], Protect, NoAutoSize;
  vsKau4               #3'КАУ 4'     ('',, sci1378Esc): [12], Protect, NoAutoSize;
  vsKau5               #3'КАУ 5'     ('',, sci1378Esc): [12], Protect, NoAutoSize;
  vsKau6               #3'КАУ 6'     ('',, sci1378Esc): [12], Protect, NoAutoSize;
  vsKau7               #3'КАУ 7'     ('',, sci1378Esc): [12], Protect, NoAutoSize;
  vsKau8               #3'КАУ 8'     ('',, sci1378Esc): [12], Protect, NoAutoSize;
  vsKau9               #3'КАУ 9'     ('',, sci1378Esc): [12], Protect, NoAutoSize;
  vsKau10              #3'КАУ 10'    ('',, sci1378Esc): [12], Protect, NoAutoSize;
//******************************************************************************
  SmetaMy              #3'Смета'
                       ('Локальная смета: "Номер": "Наименование"',,sci1378Esc)
                       : [20], Protect, PickButton;
//******************************************************************************
  SmetaSpMy            #3'Спецификация сметы'
                       ('Спецификация сметы: "№ п/п" ("Код") "Наименование"',,sci1378Esc)
                       : [20], Protect, PickButton;
//******************************************************************************
end; // Browse

Browse brSpDocs2 'Одиночный выбор' (, hcDogViewListPos, sci1EnEsc);
  Table TM_TempDescr;
Fields
//******************************************************************************
  SpDocs.Code          #3'п/н'
                       : [5], Protect, Centered, NoAutoSize;
//******************************************************************************
  SpDocsPr             #3'Тип'
                       : [3], Protect, Centered, NoAutoSize;
//******************************************************************************
  TM_TempDescr.GrName  #3'Группа'
                       : [15], Protect;
//******************************************************************************
  TM_TempDescr.Name    #3'Продукция'
                       : [20], Protect;
//******************************************************************************
  TM_TempDescr.BarKod  #3'Ном.номер' ('Номенклатурный номер / баркод')
                       : [10], Protect;
//******************************************************************************
  KatOtpEd.Name        #3'ЕдИзм'
                       : [5], Protect, Centered, NoAutoSize;
//******************************************************************************
  if(if(SpDocs.TiDk = 439, SpDocs4.Direct, SpDocs.Direct) = 1, '1->2', '2->1')
                       #3''
                       : [5], Protect, Centered, NoAutoSize;
//******************************************************************************
  SpDocs.Kol           #3'Количество'
                       : [10], [prSignsInKol], Protect, NoAutoSize;
//******************************************************************************
  SpDocs.Price         #3'Цена'
                       ('Цена в валюте')
                       : [10.2, '\2p[|-]36`666`666`666.88'], Protect
                       , NoAutoSize;
//******************************************************************************
  sKlVal               #3'Вал.'
                       : [4], Protect
                       , Centered, NoAutoSize, { Font = { Italic = TRUE } };
//******************************************************************************
  SaldTune.Name        #3'Объект ЦУ' ('',, sci1378Esc): [10], Protect, NoAutoSize;
  vsKau1               #3'КАУ 1'     ('',, sci1378Esc): [12], Protect, NoAutoSize;
  vsKau2               #3'КАУ 2'     ('',, sci1378Esc): [12], Protect, NoAutoSize;
  vsKau3               #3'КАУ 3'     ('',, sci1378Esc): [12], Protect, NoAutoSize;
  vsKau4               #3'КАУ 4'     ('',, sci1378Esc): [12], Protect, NoAutoSize;
  vsKau5               #3'КАУ 5'     ('',, sci1378Esc): [12], Protect, NoAutoSize;
  vsKau6               #3'КАУ 6'     ('',, sci1378Esc): [12], Protect, NoAutoSize;
  vsKau7               #3'КАУ 7'     ('',, sci1378Esc): [12], Protect, NoAutoSize;
  vsKau8               #3'КАУ 8'     ('',, sci1378Esc): [12], Protect, NoAutoSize;
  vsKau9               #3'КАУ 9'     ('',, sci1378Esc): [12], Protect, NoAutoSize;
  vsKau10              #3'КАУ 10'    ('',, sci1378Esc): [12], Protect, NoAutoSize;
//******************************************************************************
  SmetaMy              #3'Смета'
                       ('Локальная смета: "Номер": "Наименование"',, sci1378Esc)
                       : [20], Protect, PickButton;
//******************************************************************************
  SmetaSpMy            #3'Спецификация сметы'
                       ('Спецификация сметы: "№ п/п" ("Код") "Наименование"',, sci1378Esc)
                       : [20], Protect, PickButton;
//******************************************************************************
end; // Browse

Browse brSpDocs1_2 'Группировка' (, hcDogViewListPos, sci1EnIns);
  Table TM_Group;
Fields  { Font = { Color = if (TM_Group.PkdKol > 0, ColorMark, 0) } };
//******************************************************************************
  TM_Group.GrName  #3'Группа'       : [15], Protect;
  TM_Group.Name    #3'Наименование' : [25], Protect;
  TM_Group.BarKod  #3'Ном.номер'    : [12], Protect;
  TM_Group.EdIzm   #3'ЕдИзм'        : [ 5], Protect, Centered, NoAutoSize;
  TM_Group.Kol     #3'Количество'   : [10], Protect;
  TM_Group.Ostatok #3'Остаток'      : [10], Protect;
  TM_Group.Ostatok - TM_Group.PkdKol
                   #3'Доступно'     : [10], Protect;
  TM_Group.PkdKol  #3'Выбрано', #3'Кол-во': [10], Protect;
  TM_Group.PkdSum  #3'Выбрано', #3'Сумма' : [10, '\2p[|-]36`666`666`666.88'], Protect;
  TM_Group.sVal    #3'Вал.'         : [ 4], Protect, Centered, NoAutoSize, { Font = { Italic = TRUE } };
//******************************************************************************
end;

end; // TabbedSheet

//------------------------------------------------------------------------------
Screen scrSpDocs3 (, hcDogViewListPos, sci1EnEsc);
  Show at (, 17,,);
  Table TM_TempDescr;
Fields
//******************************************************************************
  TM_TempDescr.Sum[2]: [prSignsInKol], Skip
                     , { Font = { BackColor = ColorSysWhite } };
//******************************************************************************
  TM_TempDescr.Sum[4]: [11.2, '\2p[|-]36`666`666`666.88'], Skip
                     , { Font = { BackColor = ColorSysWhite } };
//******************************************************************************
  MoveCell.Name      : Skip, { Font = { BackColor = ColorSysWhite } };
//******************************************************************************
  ResOtgr.Name       : Skip, { Font = { BackColor = ColorSysWhite } };
//******************************************************************************
  SpShipment.Name    : Skip, { Font = { BackColor = ColorSysWhite } };
//******************************************************************************
  SpTipOtg.Name      : Skip, { Font = { BackColor = ColorSysWhite } };
//******************************************************************************
  SpWayMove.Name     : Skip, { Font = { BackColor = ColorSysWhite } };
//******************************************************************************
  SpDocs.ShipAddTerms: Skip, { Font = { BackColor = ColorSysWhite } };
//******************************************************************************
<<
                    `Остаток`.@@@@@@@@@@@@@@@@@@@@`Сумма`.@@@@@@@@@@@@@@@@@@@@
 `Единица подвижного состава`.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 `Ресурс отгрузки`.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 `Способ отгрузки`.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 `Базис`          .@@@@@@@@@@@@@@@@@@@@`Транспорт`.@@@@@@@@@@@@@@@@@@@@@@@@@@@
 `Дополнительно`  .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
>>
end;

Tree 1 scrSpDocs4 (, hcDogViewListPos, sci1EnInsTree)
  Show at (, 17,,) WideOffset, DottedLines, LinesAtRoot;
  Table TM_TempDescr;
Fields { Font = { Color = if (Picked = 'V', ColorMark, 0) } };
//******************************************************************************
  Picked               #3'V'
                       : [1] , Skip, Centered, NoAutoSize;
//******************************************************************************
  SpDocs.Code          #3'п/н'
                       : [12], Protect, NoAutoSize;
//******************************************************************************
  if(if(SpDocs.TiDk = 439, SpDocs4.Direct, SpDocs.Direct) = 1, '1->2', '2->1')
                       #3''
                       : [5], Protect, Centered, NoAutoSize;
//******************************************************************************
  SpDocs.Kol           #3'Количество'
                       : [10],[prSignsInKol], Protect, NoAutoSize;
//******************************************************************************
  TM_TempDescr.Sum[2]  #3'Остаток'
                       : [10],[prSignsInKol], Protect, NoAutoSize;
//******************************************************************************
  PickedKol            #3'Выбрано'
                       : [10.3], Protect, NoAutoSize, LessNull;
//******************************************************************************
  TM_TempDescr.Sum[2] - PickedKol
                       #3'Доступно'
                       : [10.3], Protect, NoAutoSize, LessNull;
//******************************************************************************
  SpDocs.Price         #3'Цена'
                       ('Цена в валюте')
                       : [10.2, '\2p[|-]36`666`666`666.88'], Protect
                       , NoAutoSize;
//******************************************************************************
  SaldTune.Name        #3'Объект ЦУ' ('',, sci1378Esc): [10], Protect, NoAutoSize;
  vsKau1               #3'КАУ 1'     ('',, sci1378Esc): [12], Protect, NoAutoSize;
  vsKau2               #3'КАУ 2'     ('',, sci1378Esc): [12], Protect, NoAutoSize;
  vsKau3               #3'КАУ 3'     ('',, sci1378Esc): [12], Protect, NoAutoSize;
  vsKau4               #3'КАУ 4'     ('',, sci1378Esc): [12], Protect, NoAutoSize;
  vsKau5               #3'КАУ 5'     ('',, sci1378Esc): [12], Protect, NoAutoSize;
  vsKau6               #3'КАУ 6'     ('',, sci1378Esc): [12], Protect, NoAutoSize;
  vsKau7               #3'КАУ 7'     ('',, sci1378Esc): [12], Protect, NoAutoSize;
  vsKau8               #3'КАУ 8'     ('',, sci1378Esc): [12], Protect, NoAutoSize;
  vsKau9               #3'КАУ 9'     ('',, sci1378Esc): [12], Protect, NoAutoSize;
  vsKau10              #3'КАУ 10'    ('',, sci1378Esc): [12], Protect, NoAutoSize;
//******************************************************************************
  SmetaMy              #3'Смета'
                       ('Локальная смета: "Номер": "Наименование"',,sci1378Esc)
                       : [20], Protect, PickButton;
//******************************************************************************
  SmetaSpMy            #3'Спецификация сметы'
                       ('Спецификация сметы: "№ п/п" ("Код") "Наименование"',,sci1378Esc)
                       : [20], Protect, PickButton;
//******************************************************************************
end; // Browse

!-------------------------------------------------------------------------------
Function GetCurTree: longint;
{
  GetCurTree := iCase(copyZamen; brSpDocs1_1, brSpDocs1, scrSpDocs4);
}

Procedure OneUnMarkPick;
var tmpDouble: double;
{
  DeleteMarker(MarkerSpDocs,SpDocs.nRec);

  if GetMarker(MarkerKol, IndexSpDocs, tmpDouble)
    {
      AtDeleteMarker(MarkerKol, IndexSpDocs);

      var w1: word;
      var c1, c2: comp;
      var dd: double;

      w1 := SpDocs.PrMC;
      c1 := SpDocs.cMcUsl;
      c2 := SpDocs.cOtpEd;
      dd := SpDocs.Price;

      update TM_Group1 where (( w1 == TM_Group1.PrMC   AND
                                c1 == TM_Group1.cMcUsl AND
                                c2 == TM_Group1.cOtpEd ))
        set TM_Group1.PkdKol := TM_Group1.PkdKol - tmpDouble
          , TM_Group1.PkdSum := TM_Group1.PkdSum - tmpDouble * dd;
    }

  if ( copyZamen <> 1 )
    MarkUnmarkZamen(SpDocs.nRec);

  _LOOP SpDocs3 // просмотр сопутствующих услуг
    if SearchMarker(MarkerSpDocs, SpDocs3.nRec, IndexSpDocs)
      {
        DeleteMarker(MarkerSpDocs, SpDocs3.nRec);

        if GetMarker(MarkerKol, IndexSpDocs, tmpDouble)
          AtDeleteMarker(MarkerKol, IndexSpDocs);

        if ( copyZamen <> 1 )
          MarkUnmarkZamen(SpDocs3.nRec);

        if ( GetFirst FastFirstRow TM_TempDescr1 where (( SpDocs3.nRec == TM_TempDescr1.cRec)) <> tsOk )
          {}

        // просмотр замен по сопутствующей услуге
        var mypos: comp; mypos := TM_TempDescr1.nRec;

        _LOOP TM_TempDescr1 where (( mypos     == TM_TempDescr1.cGroup AND
                                     word(439) == TM_TempDescr1.TiDk
                                  ))
          {
            DeleteMarker(MarkerSpDocs, TM_TempDescr1.cRec);

            if GetMarker(MarkerKol, IndexSpDocs, tmpDouble)
              AtDeleteMarker(MarkerKol, IndexSpDocs);
          }
      }
}
//-- пометить одну позицию
Function OneMarkPick: boolean;
var
  CurPos: comp;
  kk: double;
{
  OneMarkPick := FALSE;

  CurPos := SpDocs.nRec;

  InsertMarker(MarkerSpDocs, SpDocs.nRec);

  kk := PickKol;

  var w1: word;
  var c1, c2: comp;
  var dd: double;

  w1 := SpDocs.PrMC;
  c1 := SpDocs.cMcUsl;
  c2 := SpDocs.cOtpEd;
  dd := SpDocs.Price;

  update TM_Group1 where (( w1 == TM_Group1.PrMC   AND
                            c1 == TM_Group1.cMcUsl AND
                            c2 == TM_Group1.cOtpEd ))
    set TM_Group1.PkdKol := TM_Group1.PkdKol + kk
      , TM_Group1.PkdSum := TM_Group1.PkdSum + kk * dd;

  if ( copyZamen <> 1 )
    MarkUnmarkZamen(SpDocs.nRec);

  _LOOP TM_TempDescr1 where (( CurPos == TM_TempDescr1.cSpMc ))
    {
      InsertMarker(MarkerSpDocs, TM_TempDescr1.cRec);

      CurGroup := TM_TempDescr1.cSpMc;

      TreeJumpToRecord(GetCurTree, TM_TempDescr1.nRec);

      RescanPanel(#TM_TempDescr);

      PickKol;

      if ( copyZamen <> 1 )
        MarkUnmarkZamen(TM_TempDescr1.cRec);
    }

  OneMarkPick := TRUE;
}

Panel panSpDocs;
  Table TM_TempDescr;

HandleEvent

cmTreeTop:
  CurGroup := 0;

cmTreeUp:
  CurGroup := TM_TempDescr.cGroup;

cmTreeDown:
  CurGroup := TM_TempDescr.nRec;

cmTreeNodeType:
  {
    if ( TM_TempDescr.NotIsLeaf <= (1 - if(copyZamen = 1, 1, 0)) )
      if ( SpDocs.TiDk = 439 )
        TreeSetNodeType(GetCurTree, ntfText, #AddComp('L_DOGOVOR')if(SpDocs.cSpMC = 0, 'bmpGsSpDocsZamen', 'bmpGsSpDocsZamenMask'))
      else
        if ( SpDocs.cSpMc <> 0 )
          TreeSetNodeType(GetCurTree, ntfText, #AddComp('L_DOGOVOR')'bmpGsSpDocsSopUsl')
        else
          TreeSetNodeType(GetCurTree, 2)
    else
      if ( SpDocs.cSpMc <> 0 )
        if TreeNodeIsOpen(GetCurTree)
          TreeSetNodeType(GetCurTree, ntfOpen, #AddComp('L_DOGOVOR')'bmpGsSpDocsSopUslOpen')
        else
          TreeSetNodeType(GetCurTree, ntfClose, #AddComp('L_DOGOVOR')'bmpGsSpDocsSopUslClose');
  }

cmTreeNeedOwner:
  TreeJumpToRecord(GetCurTree, TM_TempDescr.cGroup);

end; // HandleEvent

end; // Panel

Procedure ChangeViewFormat;
{
  ClearMarker(MarkerSpDocs);
  ClearMarker(MarkerKol);
  ClearMarker(MarkerSpDocsZam);

  update TM_Group1 set TM_Group1.PkdKol := 0, TM_Group1.PkdSum := 0;

  RescanPanel(#TM_Group);

  CurGroup := 0;

  if ( GetFirst TM_TempDescr = tsOk )
    {}

  RescanPanel(#TM_TempDescr);

  if ( copyZamen = 1 )
    {
      CurCode := 1;

      ProcessCommand(cmTreeTop);

      if ( GetFirst TM_TempDescr = tsOk )
        {}

      TreeJumpToRecord(GetCurTree, TM_TempDescr.nRec);
    }
  else
    {
      CurCode := 0;

      ProcessCommand(cmTreeTop);

      if (GetFirst TM_TempDescr = tsOk )
        {}

      TreeJumpToRecord(GetCurTree, TM_TempDescr.nRec);
    }

  RescanPanel(#TM_TempDescr);
}

Procedure SetNameFields(wPrMC: word; pMcUsl, pGrMcUsl: comp);
{
  case wPrMC of
  //******************************************************************************
    1, 4, 5:
      if ( GetFirst FastFirstRow KatMC where (( pMcUsl == KatMC.nRec )) = tsOk )
        {
          TM_TempDescr.Name   := KatMC.Name;
          TM_TempDescr.BarKod := KatMC.BarKod;
        }
      else
        TM_TempDescr.Name := if(pMcUsl = 0, '', '? MC ' + string(pMCUsl));
  //******************************************************************************
    2, 3:
      if ( GetFirst FastFirstRow KatUsl where (( pMcUsl == KatUsl.nRec )) = tsOk )
        {
          TM_TempDescr.Name   := KatUsl.Name;
          TM_TempDescr.BarKod := KatUsl.Kod;
        }
      else
        TM_TempDescr.Name := if(pMcUsl = 0, '', '? Услуга ' + string(pMCUsl));
  //******************************************************************************
    10:
      if ( GetFirst FastFirstRow MaskMC where (( pMcUsl == MaskMC.nRec )) = tsOk )
        {
          TM_TempDescr.Name   := MaskMC.Name;
          TM_TempDescr.BarKod := MaskMC.BarKod;
        }
      else
        TM_TempDescr.Name := if(pMcUsl = 0, '', '? Шаблон MC ' + string(pMCUsl));
  //******************************************************************************
    20:
      if ( GetFirst FastFirstRow MaskUsl where (( pMcUsl == MaskUsl.nRec )) = tsOk )
        {
          TM_TempDescr.Name   := MaskUsl.Name;
          TM_TempDescr.BarKod := MaskUsl.Kod;
        }
      else
        TM_TempDescr.Name := if(pMcUsl = 0, '', '? Шаблон услуг ' + string(pMCUsl));
  //******************************************************************************
  end;

  case wPrMC of
  //******************************************************************************
    1, 4, 5, 10:
      if ( GetFirst FastFirstRow GroupMC where (( pGrMcUsl == GroupMC.nRec )) = tsOk )
        TM_TempDescr.GrName := GroupMC.Name
      else
        TM_TempDescr.GrName := if(pGrMcUsl = 0, '', '? Группа MC ' + string(pGrMCUsl));
  //******************************************************************************
    2, 3, 20:
      if ( GetFirst FastFirstRow GroupUsl where (( pGrMcUsl == GroupUsl.nRec )) = tsOk )
        TM_TempDescr.GrName := GroupUsl.Name
      else
        TM_TempDescr.GrName := if(pGrMcUsl = 0, '', '? Группа услуг ' + string(pGrMCUsl));
  //******************************************************************************
  end;
}

HandleEvent // Interface

cmInit:
  {
    if ( TiDkOwner <> 403 )
      {
        if ( GetFirst Dogovor where (( pDocOwner == Dogovor.nRec )) <> tsOK ) {}
      }
    else
      if ( GetFirst CalPlan where (( pDocOwner == CalPlan.nRec )) <> tsOK ) {}
        if ( GetFirst Dogovor where (( CalPlan.cDogovor == Dogovor.nRec )) <> tsOK ) {}

    if ( (not Lic_ItemExists('CEL_UCH')) or (not boGetTune('Oper.CelUch.ShowKAU')) )
      {
        SetFieldVisible(#SaldTune.Name, false);
        SetFieldVisible(#vsKau1, false);
        SetFieldVisible(#vsKau2, false);
        SetFieldVisible(#vsKau3, false);
        SetFieldVisible(#vsKau4, false);
        SetFieldVisible(#vsKau5, false);
        SetFieldVisible(#vsKau6, false);
        SetFieldVisible(#vsKau7, false);
        SetFieldVisible(#vsKau8, false);
        SetFieldVisible(#vsKau9, false);
        SetFieldVisible(#vsKau10, false);
      }

    CurGroup  := 0;
    copyZamen := 0;

    if OkMulti
      {
        if ( pCopyZam = 1 )
          copyZamen := 1;
      }

    MarkerSpDocs    := InitMarker('MSpDocs'   , 8, 100, 10, FALSE);
    MarkerKol       := InitMarker('MSpDocsKol', 8, 100, 10, FALSE);
    MarkerSpDocsZam := InitMarker('MSpDocsZam', 8, 100, 10, FALSE);

    ClearMarker(MarkerSpDocs);
    ClearMarker(MarkerKol);
    ClearMarker(MarkerSpDocsZam);

    SetFormat(if(OkMulti, GetCurTree, brSpDocs2));

    ChangeViewFormat;

    if OkMulti
      {
        SetTabbedSheetVisible(brSpDocs2, FALSE);

        case pCopyZam of
          1:
            {
              SetTabbedSheetVisible(brSpDocs1_1, FALSE);
!              SetTabbedSheetVisible(brSpDocs1_2, FALSE);
            }
          2: SetTabbedSheetVisible(brSpDocs1, FALSE);
        end;
      }
    else
      {
        SetTabbedSheetVisible(brSpDocs1  , FALSE);
        SetTabbedSheetVisible(brSpDocs1_1, FALSE);
        SetTabbedSheetVisible(brSpDocs1_2, FALSE);
      }

    if ( EmptyFlt > -1 )
      {
        PushBounds(tbSpDocs1);

        delete all TM_TempDescr;

        _LOOP SpDocs
          {
            if ( ( curSpDocs <> 0 ) AND ( curSpDocs <> SpDocs.nRec ) )
              Continue;

            if ( ( pDirect <> 0 ) AND ( SpDocs.Direct <> pDirect ) )
              Continue;

            if ( GetFirst TM_Group where (( SpDocs.PrMC   == TM_Group.PrMC   AND
                                            SpDocs.cMcUsl == TM_Group.cMcUsl AND
                                            SpDocs.cOtpEd == TM_Group.cOtpEd
                                         )) <> tsOk )
              {
                ClearBuffer(#TM_Group);

                TM_Group.nRec    := GetNextNrec(#TM_Group, 0);
                TM_Group.PrMC    := SpDocs.PrMC;
                TM_Group.cMcUsl  := SpDocs.cMcUsl;
                TM_Group.cOtpEd  := SpDocs.cOtpEd;
                TM_Group.Kol     := SpDocs.Kol;
                TM_Group.Ostatok := SpDocs.Ostatok / KatOtpEd.Koef;;
                TM_Group.Summa   := SpDocs.Summa;
                TM_Group.EdIzm   := KatOtpEd.Name;
                TM_Group.sVal    := sKlVal;

                case SpDocs.PrMC of
                //******************************************************************************
                  1, 4, 5:
                    {
                      if ( GetFirst FastFirstRow KatMC where (( SpDocs.cMcUsl == KatMC.nRec )) = tsOk )
                        {
                          TM_Group.Name   := KatMC.Name;
                          TM_Group.BarKod := KatMC.BarKod;
                        }
                      else
                        TM_Group.Name := if(SpDocs.cMcUsl = 0, '', '? MC ' + string(SpDocs.cMcUsl));

                      if ( GetFirst FastFirstRow GroupMC where (( SpDocs.cGrMcUsl == GroupMC.nRec )) = tsOk )
                        TM_Group.GrName := GroupMC.Name
                      else
                        TM_Group.GrName := if(SpDocs.cGrMcUsl = 0, '', '? Группа MC ' + string(SpDocs.cGrMcUsl));
                    }
                //******************************************************************************
                  2, 3:
                    {
                      if ( GetFirst FastFirstRow KatUsl where (( SpDocs.cMcUsl == KatUsl.nRec )) = tsOk )
                        {
                          TM_Group.Name   := KatUsl.Name;
                          TM_Group.BarKod := KatUsl.Kod;
                        }
                      else
                        TM_Group.Name := if(SpDocs.cMcUsl = 0, '', '? Услуга ' + string(SpDocs.cMcUsl));

                      if ( GetFirst FastFirstRow GroupUsl where (( SpDocs.cGrMcUsl == GroupUsl.nRec )) = tsOk )
                        TM_Group.GrName := GroupUsl.Name
                      else
                        TM_Group.GrName := if(SpDocs.cGrMcUsl = 0, '', '? Группа услуг ' + string(SpDocs.cGrMcUsl));
                    }
                end;

                insert current TM_Group;
              }
            else
                update current TM_Group set
                  TM_Group.Kol     := TM_Group.Kol     + SpDocs.Kol
                , TM_Group.Ostatok := TM_Group.Ostatok + SpDocs.Ostatok / KatOtpEd.Koef
                , TM_Group.Summa   := TM_Group.Summa   + SpDocs.Summa
                ;

            ClearBuffer(#TM_TempDescr);

            TM_TempDescr.nRec     := GetNextNrec(#TM_TempDescr, 0);
            TM_TempDescr.PrMC     := SpDocs.PrMC;
            TM_TempDescr.cRec     := SpDocs.nRec;
            TM_TempDescr.cSpMC    := SpDocs.cSpMC;
            TM_TempDescr.cGroup   := 0;
            TM_TempDescr.Sum[1]   := SpDocs.Kol;
            TM_TempDescr.Sum[2]   := SpDocs.Ostatok / KatOtpEd.Koef;
            TM_TempDescr.Sum[3]   := SpDocs.Price;
            TM_TempDescr.Sum[4]   := SpDocs.Summa;
            TM_TempDescr.TiDk     := SpDocs.TiDk;
            TM_TempDescr.Koef     := 1;
            TM_TempDescr.Percent  := 100;
            TM_TempDescr.cGrTable := TM_Group.nRec;

            SetNameFields(SpDocs.PrMC, SpDocs.cMCUSL, SpDocs.cGrMCUsl);

            insert current TM_TempDescr;

            var _N: comp; _N := TM_TempDescr.nRec;

            if ( RecordExists SpDocs2 = tsOk )
              {
                update current TM_TempDescr set TM_TempDescr.NotIsLeaf := 1;

                if ( (RecordExists SpDocs2 where (( word(439) == SpDocs2.TiDk
                                              AND SpDocs.nRec == SpDocs2.cDoc
                                              AND ( (SpDocs2.MinValue + SpDocs2.MaxValue) > 0 )
                                                 )) ) <> tsOk )
                  update SpDocs2 set SpDocs2.MinValue := 1, SpDocs2.MaxValue := 100;

                _LOOP SpDocs2 where (( SpDocs.nRec == SpDocs2.cDoc AND
                                       word(439)   == SpDocs2.TiDk AND
                                       comp(0)     == SpDocs2.cSpMC
                                    ))
                  {
                    ClearBuffer(#TM_TempDescr);

                    TM_TempDescr.nRec    := GetNextNrec(#TM_TempDescr, 0);
                    TM_TempDescr.Code    := 1;
                    TM_TempDescr.PrMC    := SpDocs2.PrMC;
                    TM_TempDescr.cRec    := SpDocs2.nRec;
                    TM_TempDescr.TiDk    := SpDocs2.TiDk;
                    TM_TempDescr.cGroup  := _N;
                    TM_TempDescr.Koef    := SpDocs2.MinValue;
                    TM_TempDescr.Percent := SpDocs2.MaxValue;

                    TM_TempDescr.Sum[1]  := fEdIzm.ConvertToSecondEd(SpDocs.Kol, SpDocs.cOtpEd, SpDocs2.cOtpEd);
                    TM_TempDescr.Sum[2]  := fEdIzm.ConvertToSecondEd(SpDocs.Ostatok / KatOtpEd.Koef, SpDocs.cOtpEd, SpDocs2.cOtpEd);
                    TM_TempDescr.Sum[3]  := fEdIzm.ConvSellSumToSecondEd(SpDocs.Price, SpDocs.cOtpEd, SpDocs2.cOtpEd);
                    TM_TempDescr.Sum[4]  := SpDocs.Summa;

                    TM_TempDescr.Sum[1]  := TM_TempDescr.Sum[1] * TM_TempDescr.Koef * TM_TempDescr.Percent / 100;
                    TM_TempDescr.Sum[2]  := TM_TempDescr.Sum[2] * TM_TempDescr.Koef * TM_TempDescr.Percent / 100;

                    SetNameFields(SpDocs2.PrMC, SpDocs2.cMCUSL, SpDocs2.cGrMCUsl);

                    if ( SpDocs2.PrMC < 10 )
                      insert current TM_TempDescr
                    else
                      if ( RecordExists SpDocs3 where (( SpDocs2.nRec == SpDocs3.cSpMC )) = tsOk )
                        {
                          TM_TempDescr.NotIsLeaf := 1;

                          insert current TM_TempDescr;

                          var _NN: comp;

                          _NN := TM_TempDescr.nRec;

                          _LOOP SpDocs3 where (( SpDocs2.nRec == SpDocs3.cSpMC ))
                            {
                              ClearBuffer(#TM_TempDescr);

                              TM_TempDescr.nRec    := GetNextNrec(#TM_TempDescr, 0);
                              TM_TempDescr.Code    := 1;
                              TM_TempDescr.PrMC    := SpDocs3.PrMC;
                              TM_TempDescr.cRec    := SpDocs3.nRec;
                              TM_TempDescr.TiDk    := SpDocs3.TiDk;
                              TM_TempDescr.cGroup  := _NN;

                              TM_TempDescr.Sum[1]  := fEdIzm.ConvertToSecondEd(SpDocs.Kol, SpDocs.cOtpEd, SpDocs3.cOtpEd);
                              TM_TempDescr.Sum[2]  := fEdIzm.ConvertToSecondEd(SpDocs.Ostatok / KatOtpEd.Koef, SpDocs.cOtpEd, SpDocs3.cOtpEd);
                              TM_TempDescr.Sum[3]  := fEdIzm.ConvSellSumToSecondEd(SpDocs.Price, SpDocs.cOtpEd, SpDocs3.cOtpEd);
                              TM_TempDescr.Sum[4]  := SpDocs.Summa;

                              TM_TempDescr.Sum[1]  := TM_TempDescr.Sum[1] * SpDocs2.MinValue * SpDocs2.MaxValue / 100;
                              TM_TempDescr.Sum[2]  := TM_TempDescr.Sum[2] * SpDocs2.MinValue * SpDocs2.MaxValue / 100;

                              SetNameFields(SpDocs3.PrMC, SpDocs3.cMCUSL, SpDocs3.cGrMCUsl);

                              insert current TM_TempDescr;
                            }
                        }
                  }
              }
          }

        _LOOP TM_TempDescr
          if ( GetFirst FastFirstRow TM_TempDescr1 where (( TM_TempDescr.cSpMC == TM_TempDescr1.cRec )) <> tsOk )
            update TM_TempDescr2 where (( TM_TempDescr.nRec == TM_TempDescr2.nRec )) set TM_TempDescr2.cSpMC := 0
          else
            {
              update TM_TempDescr2 where (( TM_TempDescr.nRec == TM_TempDescr2.nRec ))
                set TM_TempDescr2.cGroup := TM_TempDescr1.nRec;

              update TM_TempDescr1 where (( TM_TempDescr.cSpMC == TM_TempDescr1.cRec ))
                set TM_TempDescr1.NotIsLeaf := TM_TempDescr1.NotIsLeaf + 2;
            }

        ReSetBounds(#SpDocs);
        PushBounds(tbTD1);
        PushBounds(tbTD2);
      }

    if ( GetFirst TM_TempDescr <> tsOk )
      {}

    MySetFieldSpDocs;
    RereadRecord(#TM_TempDescr);
  }

cmDefault:
  {
    if ( NOT IsValid(#SpDocs) )
      {
        Abort;
        Exit;
      }

    if ( NOT OkMulti )
       p1 := SpDocs.nRec
    else
      {
        p1 := 0;

        if ( ( GetMarkerCount(MarkerSpDocs) = 0 ) AND IsValid(#SpDocs) )
          {
            if ( TM_TempDescr.cSpMC <> 0 )
              {
                Abort;
                Exit
              }

            if ( TM_TempDescr.TiDk = 439 )
              if not (if(GetFirst TM_TempDescr1 where (( TM_TempDescr.cGroup == TM_TempDescr1.nRec )) = tsOk
                       , TM_TempDescr1.cSpMC = 0
                       , FALSE))
                {
                  Abort;
                  Exit;
                }

            if ( NOT OneMarkPick )
              {
                Abort;
                Exit;
              }
          }

        if ( wGetTune('Pick.ChkGrpIns') = 2 )
          if ( RunWindowModal(winGetPickKol) <> cmCancel )
            {
              var i: longint;
              var tmpComp: comp;
              var tmpDouble: double;

              FOR(i := 0; i < GetMarkerCount(MarkerSpDocs); i := i + 1)
                if GetMarker(MarkerSpDocs, i, tmpComp)
                  if ( GetFirst FastFirstRow TM_TempDescr where (( tmpComp == TM_TempDescr.cRec )) = tsOk )
                    if ( GetFirst FastFirstRow SpDocs where (( tmpComp == SpDocs.nRec )) = tsOk )
                      {
                        tmpDouble := FunOst(tmpComp);

                        UpdateMarker(MarkerKol, i, if(myKol > tmpDouble
                                                    , if(KatOtpEd.Diskret = 1, Trunc(tmpDouble), tmpDouble)
                                                    , if(KatOtpEd.Diskret = 1, Trunc(myKol)    , myKol    )));
                      }
            }
      }
  }

cmDone:
  {
    DoneMarker(MarkerSpDocsZam, 'MSpDocsZam');
    DoneMarker(MarkerSpDocs   , 'MSpDocs'   );
    DoneMarker(MarkerKol      , 'MSpDocsKol');
  }

cmMarkUnMark:
  {
    if ( CurTable = #TM_Group )
      {
        if not IsValid(#TM_Group)
          Exit;

        TreeGetFirst(GetCurTree);

        do
          {
            if ( ( TM_TempDescr.cSpMc = 0 ) AND ( SpDocs.TiDk <> 439 ) )
              {
                RescanPanel(#TM_TempDescr);

                if SearchMarker(MarkerSpDocs, SpDocs.nRec, IndexSpDocs)
                  OneUnMarkPick
                else
                  OneMarkPick;
              }
          }
        While TreeGetNext(GetCurTree);
      }
    else
      {
        if not IsValid(#SpDocs)
          Exit;

        if ( ( TM_TempDescr.cSpMC <> 0 ) OR ( SpDocs.TiDk = 439 ) AND IsValid(#SpDocs3) )
          Exit;

        if ( IsValid(#SpDocs4) AND ( SpDocs.TiDk = 439 ) )
          if ( ( SpDocs4.cSpMC <> 0 ) AND NOT SearchMarker(MarkerSpDocs, SpDocs4.nRec, IndexSpDocs) )
            Exit;

        if SearchMarker(MarkerSpDocs, SpDocs.nRec, IndexSpDocs)
          OneUnMarkPick
        else
          OneMarkPick;
      }

    SetMyTitle;

    RedrawCurrentAndGo(GetCurrentFormat, TRUE);
    RereadRecord(#TM_Group);
  }

cmSelectall:
  {
    KillPick;

    if ( CurTable = #TM_Group )
      {
        PushPos(#TM_Group);

        _LOOP TM_Group
          {
            TreeGetFirst(GetCurTree);

            do
              {
                if ( ( TM_TempDescr.cSpMc = 0 ) AND ( SpDocs.TiDk <> 439 ) )
                  {
                    RescanPanel(#TM_TempDescr);
                    OneMarkPick;
                  }
              }
            While TreeGetNext(GetCurTree);
          }

        PopPos(#TM_Group);
      }
    else
      {
        TreeGetFirst(GetCurTree);

        do
          {
            if ( ( TM_TempDescr.cSpMc = 0 ) AND ( SpDocs.TiDk <> 439 ) )
              {
                RescanPanel(#TM_TempDescr);
                OneMarkPick;
              }
          }
        While TreeGetNext(GetCurTree);
      }

    SetMyTitle;
    RereadRecord;
    RescanPanel(#TM_TempDescr);
    RereadRecord(#TM_Group);
  }

cmUnSelectall:
  {
    if ( ( copyZamen = 2 ) and ( CurTable <> #TM_Group ) )
      {
        TreeGetFirst(GetCurTree);

        do
          {
            if ( ( TM_TempDescr.cSpMc = 0 ) AND ( SpDocs.TiDk <> 439 ) )
              {
                RescanPanel(#TM_TempDescr);
                if SearchMarker(MarkerSpDocs, SpDocs.nRec, IndexSpDocs)
                  OneUnMarkPick;
              }
          }
        While TreeGetNext(GetCurTree);
      }
    else
      KillPick;

    SetMyTitle;
    RescanPanel(#TM_TempDescr);
    RereadRecord;
    RereadRecord(#TM_Group);
  }

cmChangeTabbedSheetFormat:
  if OkMulti
    case Target of
    //*************
      brSpDocs1:
        {
          copyZamen := 1;
          OkMulti   := TRUE;
          SetFormat(scrSpDocs3);
          if not BoundActive(tbTD1)
            PushBounds(tbTD1);
        }
    //*************
      brSpDocs1_1:
        {
          copyZamen := 0;
          OkMulti   := TRUE;
          SetFormat(scrSpDocs3);
          if not BoundActive(tbTD1)
            PushBounds(tbTD1);
        }
    //*************
      brSpDocs1_2:
        {
          copyZamen := 2;
          OkMulti   := TRUE;
          SetFormat(scrSpDocs4);
          if not BoundActive(tbTD1_Gr)
            PushBounds(tbTD1_Gr);
        }
    //*************
      brSpDocs2:
        {
          copyZamen := 0;
          OkMulti   := FALSE;
          SetFormat(scrSpDocs3);
          if not BoundActive(tbTD1)
            PushBounds(tbTD1);
        }
    //*************
    end;

cmSetTabbedSheetFormat:
  ChangeViewFormat;

cmHotKeys:
{
  PutHotCommand(RunMenu('GetSomeSpDocs1mnu'));
}

cmIerarchy :
{
  RunInterface('EditMtr2Spec', 1, 0, word(coSpDocs), SpDocs.nRec);
}

end; // HandleEvent Interface

End. // Interface

#doc
Локальное меню главного окна интерфейса <link Interface L_Dogovor::GetSomeSpDocs1>L_Dogovor::GetSomeSpDocs1 - Выбор спецификации документов</link>
#end
GetSomeSpDocs1mnu Menu
{
-'Целевой учет', cmIerarchy, '', hcUKS_LokM_Chelev, 'Ctrl+U', kbCtrlU, sci1Esc;
}
