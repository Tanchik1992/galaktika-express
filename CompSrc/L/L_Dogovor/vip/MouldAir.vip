/*
 ╔═══════════════════════════════════════════════════════════════════════════╗
 ║                     (c) 1994,99 корпорация ГАЛАКТИКА                      ║
 ║ Проект        : ГАЛАКТИКА                                                 ║
 ║ Система       : Модуль Договора                                           ║
 ║ Версия        : 5.70                                                      ║
 ║ Назначение    : Ввод, редактирование и выбор типов документов             ║
 ║ Ответственный : Скороход Дмитрий Владимирович                             ║
 ║ Параметры     : да                                                        ║
 ╚═══════════════════════════════════════════════════════════════════════════╝
*/

#doc
Интерфейс ввода, редактирования и выбора типов документов
#end
Interface MouldAir''(,hcDocMouldAir_All,) EscClose, cyan;
show at (13,3,67,15);
Create View vMouldAir
var
  pMouldAir, Node, Owner   : comp;
  Markers, IndexNo       : LongInt;
  TreeFormat, ListFormat : LongInt;
  Loop, Rendering        : word;
  Niece, Widow, Uncle    : word;
  MyOrgName              : string[20];
  NameMarker             : string;
  isTree                 : boolean;
  ( picked, Farry, Wharf, Berth )
as select
  if( SearchMarker(Markers, MouldAir.NRec, IndexNo), '√', ' ' ),
  if( (MouldAir.State and 1) = 1, '√', ' ' ),
  if( (MouldAir.State and 2) = 2, '√', ' ' ),
  if( (MouldAir.State and 4) = 4, '√', ' ' )
from
  MouldAir
// where
// ((
//   MouldAir.cOrg     == KatOrg.NRec
// ))

bounds DrawTree  as
  Node            == MouldAir.cBack
;

Parameters Rendering, pMouldAir, NameMarker;
// Rendering
// 0 - групповой выбор
// 1 - единичный выбор
// 2 - интерфейс просмотра

form frmMouldAir('MouldAir.out','MouldAir') with novisual;

procedure WriteTitleCountMark;
{
  var TitleString : string;
  if( Rendering = 2 )
    TitleString := 'Просмотр типов документов';
  else
    TitleString := 'Выбор типа документа';

  if( Rendering = 0)
    if( GetMarkerCount(Markers) != 0 )
      TitleString := TitleString +
        ' (выбрано ' + string(GetMarkerCount(Markers)) + ')';
  SetTitle(TitleString);
}

Window Win1 'Редактирование типов документов' escclose;
  show at(13,3,67,15);
Screen Scr00(, hcDocMouldAir_All, sci178Esc);
Fields
  MouldAir.Name('Наименование документа'):NoProtect;
  MouldAir.Code('Код документа') : NoProtect;
  Niece('Характеризует методику использования'):NoProtect;
  Widow('Характеризует отчетность документа'):NoProtect;
  Uncle('Характеризует временные рамки действия документа'):NoProtect;
<<

 Наименование .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 Код  .@@@@@@@@@@@@@


  Документ          Отчетность      Срок действия
 (.) Общего назн. ` (.) Строгая   ` (.) Ограничен   `
 (.) Ограниченного` (.) Не строгая` (.) Не ограничен`

>>
End; // screen
/*
HandleEvent
cmCheckField:
  case (curfield) of
    #Niece, #Widow, #Uncle :
     if( (Niece != word(OldFieldValue))
     or (Widow != word(OldFieldValue))
     or (Uncle  != word(OldFieldValue)) )
      set MouldAir.State := 4 * Uncle + 2 * Widow + Niece;
  end;
end; // handleEvent
*/
end; // window

panel paMouldAir
browse aaaa (, hcDocMouldAir_All,sci1478EnIns);
  table MouldAir;
fields
  Picked  '': [1],skip;
  MouldAir.Code 'Код'('Код документа'):[11],protect;
  MouldAir.Name 'Наименование'('Наименование документа'):[30],protect;
  Farry('Характеризует методику использования'):[1],protect;
  Wharf('Характеризует отчетность документа'):[1],protect;
  Berth('Характеризует временные рамки действия документа'):[1],protect;
end;

browse bbbb (, hcDocMouldAir_All,sci1478EnEscA);
  table MouldAir;
fields
//  Picked  '': [1],skip;
  MouldAir.Code 'Код'('Код документа'):[11],protect;
  MouldAir.Name 'Наименование'('Наименование документа'):[32],protect;
  Farry('Характеризует методику использования'):[1],protect;
  Wharf('Характеризует отчетность документа'):[1],protect;
  Berth('Характеризует временные рамки действия документа'):[1],protect;
end;

tree cccc (,hcDocMouldAir_All,sci1478EnEscTreeI);
  table MouldAir;
fields
  MouldAir.Code'Код'('Код документа'):[11],protect;
  Picked  '': [1],skip;
  MouldAir.Name'Наименование'('Наименование документа'):[30], protect;
  Farry('Характеризует методику использования'):[1],protect;
  Wharf('Характеризует отчетность документа'):[1],protect;
  Berth('Характеризует временные рамки действия документа'):[1],protect;
end;

tree dddd (,hcDocMouldAir_All,sci1478EnEscTree);
  table MouldAir;
fields
  MouldAir.Code'Код'('Код документа'):[11],protect;
  MouldAir.Name'Наименование'('Наименование документа'):[32], protect;
  Farry('Характеризует методику использования'):[1],protect;
  Wharf('Характеризует отчетность документа'):[1],protect;
  Berth('Характеризует временные рамки действия документа'):[1],protect;
end;

HandleEvent
cmTreeTop:
  Node := 0;
cmTreeUp:
  Node := MouldAir.cBack;
cmTreeDown:
  Node := MouldAir.NRec;
cmTreeNodeType:
  if( not isValid(#MouldAir) )
    TreeSetNodeType(TreeFormat, 2);
cmTreeNeedOwner:
  TreeJumpToRecord(TreeFormat, MouldAir.cBack);

end; // handleevent
end; // panel
HandleEvent
cmInit:
{
  if( NameMarker = '' )
    NameMarker := 'MouldAir';
  if( Rendering = 0 )
    Markers := InitMarker(NameMarker, 8, 100, 10);

  var DateChanged : boolean;
  if( not ReadMydsk(isTree, 'MouldAirIsTree', DateChanged) )
    isTree := true;

  TreeFormat := if(Rendering = 0, cccc, dddd);
  ListFormat := if(Rendering = 0, aaaa, bbbb);

  if( isTree )
  {
    PushBounds(tbDrawTree);
    SetFormat(TreeFormat);
  }
  else
    SetFormat(ListFormat);

  PutCommand(cmValue1);


  WriteTitleCountMark;
}

cmDone:
{
  SaveMyDsk(isTree, 'MouldAirIsTree');
  if( Rendering = 0 )
    DoneMarker(Markers, NameMarker);
}

cmPositionChanged:
{
  set Niece := MouldAir.State and word(1);
  set Widow := (MouldAir.State and word(2)) shr 1;
  set Uncle := (MouldAir.State and word(4)) shr 2;
}

cmCheckField:
  case( curfield )of
    #Niece, #Widow, #Uncle :
     if( (Niece != word(OldFieldValue))
     or (Widow != word(OldFieldValue))
     or (Uncle  != word(OldFieldValue)) )
     {
       set MouldAir.State := 4 * Uncle + 2 * Widow + Niece;
     }
  end;


cmMarkUnMark:
{
  InvertMarker(Markers, MouldAir.NRec);
  var ccc : boolean;
  if( isTree )
    ccc := TreeGetNext(TreeFormat);
  else
    ccc := (GetNext MouldAir = tsOK)

  if( ccc )
    CallToNeighBours(cmPosDown, #MouldAir);

  ReScanPanel(#MouldAir);
  WriteTitleCountMark;
}

cmSelectAll:
{
  StartNewVisual( vtRotateVisual, vfTimer, 'Помечаю все', 1);
  PushPos(#MouldAir);
  if( isTree )
    PopBounds(tbDrawTree);
  for( Loop := getfirst MouldAir; Loop = tsOk; Loop := getnext MouldAir )
  {
    InsertMarker(Markers, MouldAir.NRec);
    if( not NextVisual )
      getlast MouldAir;
  }
  if( isTree )
    PushBounds(tbDrawTree);
  PopPos(#MouldAir);
  StopVisual('', 0);
  RescanPanel(#MouldAir);
  WriteTitleCountMark;
}

cmUnSelectAll:
{
  ClearMarker(Markers);
  RescanPanel(#MouldAir);
  WriteTitleCountMark;
}

cmInvertAll:
{
  StartNewVisual( vtRotateVisual, vfTimer, 'Инвертирую список', 1);
  PushPos(#MouldAir);
  if( isTree )
    PopBounds(tbDrawTree);
  for( Loop := getfirst MouldAir; Loop = tsOk; Loop := getnext MouldAir )
  {
    InvertMarker(Markers, MouldAir.NRec);
    if( not NextVisual )
      getlast MouldAir;
  }
  if( isTree )
    PushBounds(tbDrawTree);
  PopPos(#MouldAir);
  StopVisual( '', 0);
  RescanPanel(#MouldAir);
  WriteTitleCountMark;
}

cmEdit :
{
  RunWindow(Win1);
  ReDrawPanel(#MouldAir);
}

cmAddNewRec :
{
  if( isTree )
    if( TreeNodeIsOpen(TreeFormat) )
      Owner := MouldAir.NRec;
    else
      Owner := MouldAir.cBack;
  else
    Owner := 0;

  PutCommand(cmInsert);
  RunWindow(Win1);
  ReDrawPanel(#MouldAir);
}

cmSetDefault:
{
  ClearBuffer(#MouldAir);
  MouldAir.cBack := Owner;
  set Niece := 0;
  set Widow := 0;
  set Uncle := 0;
}

cmInsertRecord :
  insert current MouldAir;
cmUpdateRecord :
  update current MouldAir;
cmDeleteRecord :
  if( Message(''#3'Удалим?', Warning + YesNo) = cmYes )
  {
    var MouldAir5NRec, MouldAir5cBack : comp;
    MouldAir5NRec := MouldAir.NRec;
    MouldAir5cBack := MouldAir.cBack;

    PushPos(#MouldAir);
    update MouldAir where((MouldAir5NRec == MouldAir.cBack))
      set MouldAir.cBack := MouldAir5cBack;
    PopPos(#MouldAir);

    delete current MouldAir;
  }

cmDefault  :
{
  if( Rendering = 2 )
    Exit;

  if( CurWindow = Win1 )
    Exit;

  if( Rendering = 0 )
  {
    if( GetMarkerCount(Markers) = 0  )
      InsertMarker(Markers, MouldAir.NRec);
  }
  else
    pMouldAir := MouldAir.NRec;
  CloseInterface(cmOk);
}

cmAccording:
{
  if( isTree )
  {
    PopBounds(tbDrawTree);
    SetFormat(ListFormat);
  }
  else
  {
    if( MouldAir.cBack != Node )
    {
      pMouldAir := MouldAir.NRec;
      PutCommand(cmValue1);
    }
    PushBounds(tbDrawTree);
    SetFormat(TreeFormat);
  }
  isTree := not isTree;
}

cmValue1:
{
  if( pMouldAir = 0 )
    exit;

  if( getfirst MouldAir where((pMouldAir == MouldAir.NRec)) != tsOk )
    Exit;

  if( isTree )
  {
    Node := MouldAir.cBack;
    TreeJumpToRecord(TreeFormat, MouldAir.NRec);
  }

  ReScanPanel(#MouldAir);
}

cmPrintDoc:
{
  var
    goAway, rS : boolean;
  goAway := false;
  PushPos(#MouldAir);
  if( not isTree )
    PushBounds(tbDrawTree);

  StartNewVisual(vtIndicatorVisual, vfTimer + vfBreak + vfConfirm,
    ''#3'Печатаю...'#13#3, RecordsInTable(#MouldAir));
  // for( Loop := getfirst MouldAir; Loop = tsOk; Loop := getnext MouldAir )
  for( rS := TreeGetFirstEx(TreeFormat); rS; rS := TreeGetNextEx(TreeFormat) )
  {
    if( not nextVisual )
    {
      goAway := true;
      break;
    }

    frmMouldAir.PutEventById(feDoLoop, FCMouldAir_Loop1);
    frmMouldAir.write(TreeLevel(TreeFormat));
    frmMouldAir.write(LPadCh('', '.', TreeLevel(TreeFormat)) + MouldAir.Code);
    frmMouldAir.write(MouldAir.Code);
    frmMouldAir.write(MouldAir.Name);
    frmMouldAir.write(Farry);
    frmMouldAir.write(Wharf);
    frmMouldAir.write(Berth);
  }
  StopVisual('', 0);
  if( not isTree )
    PopBounds(tbDrawTree);
  PopPos(#MouldAir);
  if( (not frmMouldAir.Error) and (not goAway) )
    frmMouldAir.showFile('');
  else
    frmMouldAir.abortForm;
}


end; //HandleEvent

end. // Interface
