//********************************************************************************
//                                                        (c) корпорация Галактика
// Галактика 5.85 - логистика
// Выбор договора-соглашения-календарного плана (по Ctrl+F3)
//********************************************************************************
! Фильтры передаюся через DSK посредством параметра интерфейса DskParams,
! в который передается набор констант, соответствующих каждому фильтру
! (или группе фильтров), который нужно использовать. Т.е. в DSK не обяза-
! тельно определять значения ВСЕХ фильтров, а только тех, которые хотите
! использовать и в DskParams передать константу этого фильтра - признак
! того, что этот фильтр (или группу фильтров) нужно использовать.

!───────────────────┬───────────────────┬──────────────────────────────────────
!                   │                   │     НАИМЕНОВАНИЕ ПАРАМЕРТОВ В DSK
!     ФИЛЬТРЫ       │     КОНСТАНТЫ     ├───────────────────┬──────────────────
!                   │                   │МАСКА ПРИМЕНЯЕМОСТИ│ЗНАЧЕНИЕ ПАРАМЕТРА
!───────────────────┴───────────────────┴───────────────────┴──────────────────
!
!-- Группа 1 ------------------------------------------------------------------
! по группе дескр.    vcGetDog_DesGr      'GetDAK_DesGr_e'    'GetDAK_DesGr'   - string
! по дескр.           vcGetDog_Descr      'GetDAK_Descr_e'    'GetDAK_Descr'   - string
! по дате(dDoc,dInput)vcGetDog_Date       'GetDAK_Date_e'     'GetDAK_begDate' - date
!                                                             'GetDAK_endDate' - date
! по сроку действ.    vcGetDog_DateSrok   'GetDAK_DateSrok_e' 'GetDAK_begDateSrok' - date
!                                                             'GetDAK_endDateSrok' - date
!
!-- Группа 2 ------------------------------------------------------------------
! по собств. орг-ции  vcGetDog_MyOrg      'GetDAK_MyOrg_e'    'GetDAK_MyOrg'   - NRec
! по контрагенту (Гр) vcGetDog_Kontr      'GetDAK_Kontr_e'    'GetDAK_Kontr'   - NRec маркер 'MGetDocs_Kontr'
! по грузоотправителю vcGetDog_GruzFrom   (только для CalPlan)'GetDAK_GruzFrom'- NRec
! по грузополучателю  vcGetDog_GruzTo     (только для CalPlan)'GetDAK_GruzTo'  - NRec
! по плательщику (Гр) vcGetDog_Plat       'GetDAK_Plat_e'     'GetDAK_Plat'    - NRec маркер 'MGetDocs_Plat'
! по получателю  (Гр) vcGetDog_Pol        'GetDAK_Pol_e'      'GetDAK_Pol'     - NRec маркер 'MGetDocs_Pol'
! по валюте           vcGetDog_Valut      'GetDAK_Valut_e'    'GetDAK_Valut'   - NRec
!
!-- Группа 3 ------------------------------------------------------------------
! по программе        vcGetDog_Progr      'GetDAK_Progr_e'    'GetDAK_Progr'   - NRec
! по виду док.   (Гр) vcGetDog_VidDoc     'GetDAK_VidDoc_e'   'GetDAK_VidDoc'  - NRec маркер 'MKatVidD'
! по статусу (номеру) vcGetDog_Status     'GetDAK_Status_e'   'GetDAK_Status'  - NRec
! по KatNotes    (Гр) vcGetDog_KatStatus  'GetDAK_KatStatus_e''GetDAK_KatStatus' - NRec
!
!-- Группа 4 ------------------------------------------------------------------
! по договору         vcGetDog_Dogovor                        'GetDAK_Dogovor' - NRec
! по соглашению       vcGetDog_AppDog                         'GetDAK_AppDog'  - NRec
! по кал. плану       vcGetDog_CalPlan                        'GetDAK_CalPlan' - NRec
!
!-- Группа 5 ------------------------------------------------------------------
! наличие к.плана     vcGetDog_ExistKP - оставляет только те договоры и соглашения,
!                                        у которых есть КП
!──────────────────────────────────────────────────────────────────────────────
! Примечание: МАСКА ПРИМЕНЯЕМОСТИ: 0 - применять фильтр ко всем документам
!                                  1 - только к договорам
!                                  2 - только к соглашениям
!                                  4 - только к пунктам календарного плана
!
! (Гр) - возможен групповой фильтр. Если ЗНАЧЕНИЕ ПАРАМЕТРА = 0 или не задано
! то пытается читать из соответствующего маркера. В противном случае
! ЗНАЧЕНИЕ ПАРАМЕТРА воспринимается как NRec для одиночного фильтра.
!
! Пример заполнения DSK находится в setdsk.vpp - можно просто его скопировать
! в свой интерфейс и подставить нужные параметры

#include FltDog.rec  // TFilterDog

#doc
Интерфейс выбора договора-соглашения-пункта календарного плана (по Ctrl+F3)
#end
Interface GetDocs 'Выберите документы' (, hcKassOknoVibDok,) DoAccept, EscClose, Cyan;
  Show at (,, 121, 27);

#include gdocs0.vpp

//******************************************************************************

Function GetKAUField(pNum : integer) : string; Forward;

//******************************************************************************

Create View

Var
//--параметры
  pDogovor
, pAppDogovor
, pCalPlan  : comp;

  DskParams : longint;

  isBrowse  : boolean;
//--
  Node
, pNode     : comp;

  s_SimvRub : string;

  wIntMode  : word;

  // для маркера
  Marker_pRec
, Marker_pDogovor
, Marker_pAppDogovor
, Marker_pCalPlan
, lIndex             : longint;

As select
  if (( wIntMode = cgiMulti ) AND SearchMarker(Marker_pRec, SGetDocs.NRec, lIndex), '√', '')
    ( FieldName = Picked )

, if (SGetDocs.wDocType = 4, SGetDocs.cCalPlan, SGetDocs.nRec)
    ( FieldName = NRec4SpDocs )

, if (SpDocs.cGrMCUsl = 0, '',
    if ((SpDocs.prMC = 1) or (SpDocs.prMC = 4) or (SpDocs.prMC = 5),
        if(IsValid(tnGroupMC), GroupMC.Name, '? Группа МЦ ' + string(SpDocs.cGrMCUsl)),
    if ((SpDocs.prMC = 2) or (SpDocs.prMC = 3),
        if(IsValid(tnGroupUsl), GroupUsl.Name, '? Группа услуг ' + string(SpDocs.cGrMCUsl)), '')))
    ( FieldName = SpGrName )

, if (SpDocs.cMCUsl = 0,'',
    if ((SpDocs.prMC = 1) or (SpDocs.prMC = 4) or (SpDocs.prMC = 5),
        if(IsValid(tnKatMC2), KatMC2.Name, '? MC ' + string(SpDocs.cMCUsl)),
    if ((SpDocs.prMC = 2) or (SpDocs.prMC = 3),
        if(IsValid(tnKatUsl2), KatUsl2.Name, '? Услуга ' + string(SpDocs.cMCUsl)), '')))
    ( FieldName = SpObjName )

, if (SGetDocs.VidPlan = 100, '',
  if (((SGetDocs.Direct mod 2) = 1) and (SGetDocs.VidPlan <> 2) or
      ((SGetDocs.Direct mod 2) = 0) and (SGetDocs.VidPlan =  2), '1->2', '2->1'))
    ( FieldName = sDirect )

, if (IsValid(tnSGetDocs),
    if (SGetDocs.wDocType = 1,     // договор
      if (SGetDocs.cZamena = 0, 'Договор', 'Отм. Договор'),
      if (SGetDocs.wDocType = 2,   // соглашение
        if (SGetDocs.cZamena = 0, 'Уточн. Соглашение', 'Отм. Соглашение'),
        // календарный план SGetDocs.wDocType = 4
        if (SGetDocs.VidPlan = 100, 'КП обобщенный', if (SGetDocs.VidPlan = 1, 'КП мц/услуги', 'КП финансовый')))), '')
      ( FieldName = sDocType )

, if(IsValid(tnSmetaStroy), SmetaStroy.NoSmet + ' : ' + SmetaStroy.Name, '')
    ( FieldName = SmetaMy )

, if(IsValid(tnSmetaSpec), string(SmetaSpec.NPP) + ' (' + SmetaSpec.Code + ') ' + SmetaSpec.Name, '')
    ( FieldName = SmetaSpMy )

, GetKAUField(1)  ( FieldName = vsKau1 )
, GetKAUField(2)  ( FieldName = vsKau2 )
, GetKAUField(3)  ( FieldName = vsKau3 )
, GetKAUField(4)  ( FieldName = vsKau4 )
, GetKAUField(5)  ( FieldName = vsKau5 )
, GetKAUField(6)  ( FieldName = vsKau6 )
, GetKAUField(7)  ( FieldName = vsKau7 )
, GetKAUField(8)  ( FieldName = vsKau8 )
, GetKAUField(9)  ( FieldName = vsKau9 )
, GetKAUField(10) ( FieldName = vsKau10 )

From
  SGetDocs
, SpDocs
, KlVal
, KatOtpEd
, GroupMC
, GroupUsl
, KatNotes
, KatNotes KatNotesDog
, KatOrg
, KatMC    KatMC2
, KatUsl   KatUsl2
, SGetDocs SGetDocs2
, SGetDocs SGetDocs_s
, CalPlan
, CalPlan  PredPlan
, PlanPays PlanPaysAvan
, PlanPays PlanPaysAdd
, SpDocs   SpDocs439
, SpDocSmeta
, SmetaStroy
, SmetaSpec
, SpDocs   SpDocsSmet
, KatOtpEd KatOtpEdSmeta
, SaldTune
, SpecMTR

Where
((
//********************************************
    Node                 == SGetDocs.cOwner
AND SGetDocs.nRec        == SGetDocs_s.cOwner
AND SGetDocs.cOrg        == KatOrg.nRec
AND SGetDocs.cNote       == KatNotes.nRec
AND SGetDocs.cCalPlan    == CalPlan.nRec
AND CalPlan.cPredPlan    == PredPlan.nRec
AND SGetDocs.cCalPlan    == PlanPaysAvan.cCalPlan
AND word(1)              == PlanPaysAvan.VidPlat
AND SGetDocs.cCalPlan    == PlanPaysAdd.cCalPlan
AND word(2)              == PlanPaysAdd.VidPlat
//********************************************
AND word(399 + SGetDocs.wDocType)
                         == SpDocs.TiDk
AND NRec4SpDocs          == SpDocs.cDoc
//********************************************
AND SpDocs.cMCUsl        == KatMC2.nRec
AND SpDocs.cMCUsl        == KatUsl2.nRec
AND SpDocs.cGrMCUsl      == GroupMC.nRec
AND SpDocs.cGrMCUsl      == GroupUsl.nRec
AND SpDocs.cOtpEd        == KatOtpEd.nRec
AND SpDocs.cVal          == KlVal.nRec
AND word(439)            == SpDocs439.TiDk
AND SpDocs.nRec          == SpDocs439.cDoc
//********************************************
AND coSpDocs             == SpDocSmeta.coTable
AND SpDocs.nRec          == SpDocSmeta.cSpec
AND SpDocSmeta.cSmeta    == SmetaStroy.nRec
AND SpDocSmeta.cPosition == SmetaSpec.nRec
AND SpDocsSmet.cOtpEd    == KatOtpEdSmeta.nRec
//********************************************
AND coSpDocs             == SpecMTR.coTable
AND SpDocs.nRec          == SpecMTR.cSpec
AND SpecMTR.cSaldTune    == SaldTune.nRec
//********************************************
))

#include GetDocs.ord

;

Parameters
  pDogovor    // ссылка на договор
, pAppDogovor // ссылка на соглашение
, pCalPlan    // ссылка на ПКП
, DskParams   // параметры фильтрации
, wIntMode    // cgiMulti - множественный выбор (сохраняется в маркер)
;

#include ShowKau.vpp

//******************************************************************************

Function GetKAUField(pNum : integer) : string;
{
  GetKAUField := #ShowKau(if(pNum = 1, SaldTune.wObj, SaldTune.wKau[pNum - 1]), if(pNum = 1, SpecMTR.cObj, SpecMTR.cKau[pNum - 1]));
}

//******************************************************************************

#include gdocs2.vpp // на таблице в памяти

Procedure OneMarkPick(Buf : type$SGetDocs);
{
  InsertMarker(Marker_pRec       , Buf.nRec);
  InsertMarker(Marker_pDogovor   , Buf.cDogovor);
  InsertMarker(Marker_pAppDogovor, Buf.cAppDogovor);
  InsertMarker(Marker_pCalPlan   , Buf.cCalPlan);
}

Procedure KillPick;
{
  ClearMarker(Marker_pRec);
  ClearMarker(Marker_pDogovor);
  ClearMarker(Marker_pAppDogovor);
  ClearMarker(Marker_pCalPlan);
}

!------------------------------------------------------------------------------
Panel pSGetDocs;
  Table SGetDocs;

#ifdef ComponentVersion
ToolBar
    F_Common::tbBuhFilter
  , F_BuhRep::tbTreeControl
;
#else
ToolBar
    tbBuhFilter
  , tbTreeControl
;
#end
Tree 1 trTreeTables ('Выбор документа',, sci1EnEscTree);
  Show at (,,, 15);
Fields { Font = { Color = if(Picked = '√', ColorMark, 0) }};
  Picked          #3'√'                                        : [1], Skip, NoAutoSize;
  sDocType        #3'Документ'   ('Договор, соглашение или пункт календарного плана')
                                                               : [15], Protect, NoAutoSize;
  SGetDocs.DesGr  #3'Группа'     ('Код группы пользователей')       : [5], Protect, NoAutoSize, Centered;
  SGetDocs.Descr  #3'Дескр.'     ('Дескриптор(идентификатор) пользователя')      : [5], Protect, NoAutoSize, Centered;
  SGetDocs.dDoc   #3'Дата'
                , #3'заключения' ('Дата заключения договора/соглашения/пункта календарного плана')
                                                               : [10,'DD/MM/YYYY'], Protect, Centered, NoAutoSize;
  DateToStr(SGetDocs.dBeg, 'DD/MM/YYYY') + DateToStr(SGetDocs.dEnd, '-DD/MM/YYYY')
                  #3'Период исполнения'
                                 ('Период исполнения')         : [21,'DD/MM/YYYY'], Protect, Centered, NoAutoSize;
  SGetDocs.NoDoc_Ext #3'Номер'#13#3'входящий' ('Входящий номер')      : [10], Protect, NoAutoSize;
  SGetDocs.NoDoc     #3'Номер'#13#3'внутренний'('Внутренний номер')   : [10], Protect, NoAutoSize;
  KatOrg.Name     #3'Контрагент' ('Контрагент документа')      : [22], Protect;
  if(SGetDocs.VidPlan = 100, '', KatNotes.sName)
                  #3'Статус'
                , #3'документа'                                : [9], Protect, NoAutoSize, Centered;
  sDirect         #3'Вид'        ('"1->2" - документ на продажу; "2->1" - документ на закупку')
                                                               : [4], Protect, NoAutoSize, Centered;
  if(SGetDocs.VidPlan = 100, 0.0, SGetDocs.Summa )
                  #3'Сумма'      ('Общая (планируемая) сумма') : [18, '\2p[|-]3666`666`666`666.88'], Protect, NoAutoSize, LessNull;
  SGetDocs.DogVal #3'Вал.'                                     : [4], Skip, NoAutoSize, Centered, { Font = { Italic = true } };
end;

Browse brTables ('Выбор документа',, sci1EnEsc);
  Show at (,,, 15);
Fields { Font = { Color = if(Picked = '√', ColorMark, 0) }};
  Picked          #3'√'                                        : [1], Skip, NoAutoSize;
  sDocType        #3'Документ'   ('Договор, соглашение или пункт календарного плана')
                                                               : [15], Protect, NoAutoSize;
  SGetDocs.DesGr  #3'Группа'     ('Код группы пользователей')       : [5], Protect, NoAutoSize;
  SGetDocs.Descr  #3'Дескр.'     ('Дескриптор(идентификатор) пользователя')      : [5], Protect, NoAutoSize;
  SGetDocs.dDoc   #3'Дата'
               ,  #3'заключения' ('Дата заключения договора/соглашения/пункта календарного плана')
                                                               : [10,'DD/MM/YYYY'], Protect, Centered, NoAutoSize;
  DateToStr(SGetDocs.dBeg, 'DD/MM/YYYY') + DateToStr(SGetDocs.dEnd, '-DD/MM/YYYY')
                  #3'Период исполнения' ('Период исполнения')  : [21,'DD/MM/YYYY'], Protect, Centered, NoAutoSize;
  SGetDocs.NoDoc_Ext #3'Номер'#13#3'входящий' ('Входящий номер')      : [10], Protect, NoAutoSize;
  SGetDocs.NoDoc     #3'Номер'#13#3'внутренний'('Внутренний номер')   : [10], Protect, NoAutoSize;
  KatOrg.Name     #3'Контрагент' ('Контрагент документа')      : [22], Protect;
  if(SGetDocs.VidPlan = 100, '', KatNotes.Name)
                  #3'Статус'
                , #3'документа'                                : [9], Protect, NoAutoSize;
  sDirect         #3'Вид'        ('"1->2" - документ на продажу; "2->1" - документ на закупку')
                                                               : [4], Protect, NoAutoSize, Centered;
  if(SGetDocs.VidPlan = 100, 0.0, SGetDocs.Summa )
                  #3'Сумма'      ('Общая (планируемая) сумма') : [18, '\2p[|-]3666`666`666`666.88'], Protect, NoAutoSize, LessNull;
  SGetDocs.DogVal #3'Вал.'                                     : [4], Skip, NoAutoSize, Centered, { Font = { Italic = true } };
end;

Function GetDocTreeType : byte;
{
  if ( RecordExists SGetDocs_s <> tsOK )
    GetDocTreeType := ntfText
  else
    GetDocTreeType := if(TreeNodeIsOpen(trTreeTables), ntfOpen, ntfClose);
}

#define SHOW_NOTES_ICONS
#include DogIcons.vpp

HandleEvent

cmTreeTop:
  Node := 0;

cmTreeUp:
  Node := SGetDocs.cOwner;

cmTreeDown:
  Node := SGetDocs.nRec;

cmTreeNodeType:
  {
    var DocTreeType : byte;
    DocTreeType := GetDocTreeType;

    if ( SGetDocs.VidPlan = 100 )
      {
        TreeSetNodeType(trTreeTables, DocTreeType);
        Exit;
      }
    TreeSetNodeType(trTreeTables,
                    DocTreeType,
                    GetDocTreeIconEx(if(SGetDocs.wDocType = 1, word(400),
                                                               if(SGetDocs.wDocType = 2, word(401),word(403))),
                                     KatNotes.Status,
                                     DocTreeType,
                                     KatNotes.nRec));
  }

cmTreeNeedOwner:
  TreeJumpToRecord(trTreeTables,SGetDocs.cOwner);

end; // HandleEvent

end; // Panel;
!------

Panel pSpDocs;
  Table SpDocs;

Tree 3 brSpecifDocs (,, sci1Esc);
  Show at (, 16,,);
Fields
  SpDocs.Code     #3'п/н'           ('Номер позиции спецификации') : [4], Protect, Centered;
  SpDocs.PrMC     #3''              ('Признак МЦ или услуги')      : [3], Skip, Centered, NoAutoSize,
    [LIST 1 'Т', 'У','УП','ДС','ГП'];
  SpGrName        #3'Группа'        ('Группа МЦ/услуг')            : [10], Protect;
  SpObjName       #3'Наименование'  ('Наименование МЦ/услуги')     : [25], Protect;
  KatOtpEd.Abbr   #3'ЕдИзм'         ('Наименование отпускной единицы измерения')
                                                                   : [5], Protect, NoAutoSize, Centered
                                                                        , { Font = { Italic = true } };
  SpDocs.Kol      #3'Количество'    ('Количество МЦ/услуг')        : [12, '\3p[|-]3666`666`666.888'], Protect, NoAutoSize;
  SpDocs.Price    #3'Цена'          ('Цена за единицу МЦ/услуги')  : [15, '\2p[|-]36`666`666`666`666.88'], Protect, NoAutoSize;
  SpDocs.Summa    #3'Сумма'         ('Сумма по позиции')           : [16, '\2p[|-]36`666`666`666`666.88'], Protect, NoAutoSize;
  SaldTune.Name   #3'Объект ЦУ': [10], Protect, NoAutoSize;
  vsKau1          #3'КАУ 1'    : [12], Protect, NoAutoSize;
  vsKau2          #3'КАУ 2'    : [12], Protect, NoAutoSize;
  vsKau3          #3'КАУ 3'    : [12], Protect, NoAutoSize;
  vsKau4          #3'КАУ 4'    : [12], Protect, NoAutoSize;
  vsKau5          #3'КАУ 5'    : [12], Protect, NoAutoSize;
  vsKau6          #3'КАУ 6'    : [12], Protect, NoAutoSize;
  vsKau7          #3'КАУ 7'    : [12], Protect, NoAutoSize;
  vsKau8          #3'КАУ 8'    : [12], Protect, NoAutoSize;
  vsKau9          #3'КАУ 9'    : [12], Protect, NoAutoSize;
  vsKau10         #3'КАУ 10'   : [12], Protect, NoAutoSize;
  SmetaMy         #3'Смета'         ('Локальная смета: "Номер" : "Наименование"')
                                                                   : [20], Protect, NoAutoSize;
  SmetaSpMy       #3'Спецификация сметы'
                                    ('Спецификация сметы: "№ п/п" ("Код") "Наименование"')
                                                                   : [20], Protect, NoAutoSize;
end;

HandleEvent

cmTreeNodeType:
  TreeSetNodeType(brSpecifDocs, 2, if(RecordExists SpDocs439 = tsOk, #AddComp('L_DOGOVOR')'bmpGsSpDocsZamen', ''));

end;

end; // Panel
!------------------------------------------------------------------------------

Screen scrFinPKPAvan (,, sci1Esc);
  Show at (, 16,,);
  Table CalPlan;
Fields
  'авансовые'        : Skip, { Font = { Bold = true } };
  CalPlan.RunOK      : [LIST 'необязательные', 'обязательные'], Skip, { Font = { Bold = true } };
  PlanPaysAvan.Summa : [17.2, '\2p[|-]366`666`666`666.88'], Skip, { Font = { Bold = true } };
  CalPlan.SumNDS     : [17.2, '\2p[|-]366`666`666`666.88'], Skip, { Font = { Bold = true } };
  PlanPaysAvan.dFrom : [, 'DD/MM/YYYY'], Skip, { Font = { Bold = true } };
  PlanPaysAvan.dTo   : [, 'DD/MM/YYYY'], Skip, { Font = { Bold = true } };
<<

 `Вид платежей`.@@@@@@@@@@@@@@@@ `Признак` .@@@@@@@@@@@@@@@@@@@@@@
 `На сумму`    .@@@@@@@@@@@@@@@@ `В т.ч. налоги` .@@@@@@@@@@@@@@@@
 `Выполнить с `.@@@@@@@@@@@ `по` .@@@@@@@@@@@
>>
end;

!------------------------------------------------------------------------------

Screen scrFinPKPAdd (,, sci1Esc);
  Show at (, 16,,);
  Table CalPlan;
Fields
  'по факту'        : Skip, { Font = { Bold = true } };
  CalPlan.RunOK     : [LIST 'необязательные', 'обязательные'], Skip, { Font = { Bold = true } };
  PlanPaysAdd.Summa : [17.2, '\2p[|-]366`666`666`666.88'], Skip, { Font = { Bold = true } };
  CalPlan.SumNDS    : [17.2, '\2p[|-]366`666`666`666.88'], Skip, { Font = { Bold = true } };
  PlanPaysAdd.nDays : Skip, { Font = { Bold = true } };
  '№ ' + PredPlan.NoDoc + ' от ' + DateToStr(PredPlan.dInput, 'DD/MM/YYYYг.')
                    : Skip, { Font = { Bold = true } };
<<

 `Вид платежей`.@@@@@@@@@@@@@@@@ `Признак` .@@@@@@@@@@@@@@@@@@@@@@
 `На сумму`    .@@@@@@@@@@@@@@@@ `В т.ч. налоги` .@@@@@@@@@@@@@@@@
 `В течение `  .@@@@ дней`после выполнения`.@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
>>
end;

!------------------------------------------------------------------------------

Screen scrCommonPKP (,, sci1Esc);
  Show at (, 16,,);
<<
>>
end;

!------------------------------------------------------------------------------

Panel panSGetDocs;
  Table SGetDocs;

HandleEvent

cmPositionChanged:
  {
    case SGetDocs.VidPlan of
      2:
        SetFormat(if(RecordExists PlanPaysAvan = tsOK, scrFinPKPAvan, scrFinPKPAdd));
      100:
        SetFormat(scrCommonPKP);
    else
        SetFormat(brSpecifDocs);
    end;
  }

end;
end;

HandleEvent // Interface

cmInit:
  {
    SetOrder(tiByDate);
    SetColumnSorting(trTreeTables, #SGetDocs.dDoc, 1);

    Marker_pRec        := InitMarker ('GetDocsPick_cRec'       , 8, 100, 10, FALSE);
    Marker_pDogovor    := InitMarker ('GetDocsPick_cDogovor'   , 8, 100, 10, FALSE);
    Marker_pAppDogovor := InitMarker ('GetDocsPick_cAppDogovor', 8, 100, 10, FALSE);
    Marker_pCalPlan    := InitMarker ('GetDocsPick_cCalPlan'   , 8, 100, 10, FALSE);

    KillPick;

    if ( wIntMode = cgiMulti ) // множественный выбор
      {
        SetHelpAndStatusContext(trTreeTables, -1, sci14EnInsTree, 0);
        SetHelpAndStatusContext(brTables    , -1, sci14EnInsEsc , 0);
      }
    else
      SetFieldVisible(#Picked, FALSE);

    InitDocIconsArray;

    s_SimvRub := sGetTune('NDE.SimvRub');

    ReSetBounds(#SGetDocs);

    SetDisabledDogStatus;

    Init_DSK_Params;

    if ( not MakeTree )
      {
        Abort;
        Exit;
      }

    if ( not Lic_ItemExists('SmetaDocs') )
      {
        ClearFieldState(#SmetaMy,   sfVisible);
        ClearFieldState(#SmetaSpMy, sfVisible);
      }

    var isSelect : word;

    if (
        ( (DskParams and vcGetDog_isSelect) = 0 )
         OR // для позиционирования на нужный документ
        ( not ReadMyDsk(isSelect, 'GetDAK_isSelect', true) )
       )
      {
        if ( ( GetFirst SGetDocs where (( pCalPlan == SGetDocs.cCalPlan )) <> tsOk ) OR ( pCalPlan = 0 ) )
          if ( ( GetFirst SGetDocs where (( pAppDogovor == SGetDocs.nRec )) <> tsOk ) OR ( pAppDogovor = 0 ) )
            if ( ( GetFirst SGetDocs where (( pDogovor == SGetDocs.nRec )) <> tsOk ) OR ( pDogovor = 0 ) )
              {
                var tRec : comp;
                ReadMyDsk(tRec, 'Last_SGetDocs_NRec', true);

                if ( GetFirst SGetDocs where (( tRec == SGetDocs.nRec )) <> tsOk )
                  {
                  }
              }
      }
    else
      {
        if ( isSelect = 4 )
          if ( ( GetFirst SGetDocs where (( pCalPlan == SGetDocs.cCalPlan )) <> tsOk ) or ( pCalPlan = 0 ) )
            isSelect := 2;
!-----------------------
        if ( isSelect = 2 )
          if ( ( GetFirst SGetDocs where (( pAppDogovor == SGetDocs.nRec )) <> tsOk ) or ( pAppDogovor = 0 ) )
            isSelect := 1;
!-----------------------
        if ( isSelect = 1 )
          if ( ( GetFirst SGetDocs where (( pDogovor == SGetDocs.nRec )) <> tsOk ) or ( pDogovor = 0 ) )
            {
              var tRec : comp;
              ReadMyDsk(tRec, 'Last_SGetDocs_NRec', true);

              if ( GetFirst SGetDocs where (( tRec == SGetDocs.nRec )) <> tsOk )
                {
                }
            }
      }

    pNode := SGetDocs.nRec;

    SetBounds(#SGetDocs);

    isBrowse := false;
    SelectField(#SGetDocs.NoDoc);
    TreeGetLast(trTreeTables);
    TreeJumpToRecord(trTreeTables,pNode); // в зависимости от фикса атлантиса
  }

cmDefault:
  {
    if isBrowse
      {
        isBrowse := false;
        var _nrec : comp;
        _nrec := SGetDocs.nRec;
        SetBounds(#SGetDocs);
        TreeJumpToRecord (trTreeTables,_nrec);
        SetFormat(trTreeTables);
        Abort;
        Exit;
      }

    if ( SGetDocs.VidPlan = 100 )
      {
        message('Нельзя выбрать обобщенный календарный план !', Warning + CancelButton);
        Abort;
        Exit;
      }

    if ( wIntMode = cgiMulti )
      if (GetMarkerCount(Marker_pRec) = 0)
        OneMarkPick(SGetDocs.Buffer);

    pDogovor    := SGetDocs.cDogovor;
    pAppDogovor := SGetDocs.cAppDogovor;
    pCalPlan    := SGetDocs.cCalPlan;

    SaveMyDsk(pDogovor, 'Last_SGetDocs_NRec');
  } // cmDefault

cmMarkUnMark:
  {
    var IndexNo : LongInt;

    if (SearchMarker (Marker_pRec, SGetDocs.NRec,  IndexNo))
      {
        AtDeleteMarker(Marker_pRec       , IndexNo);
        AtDeleteMarker(Marker_pDogovor   , IndexNo);
        AtDeleteMarker(Marker_pAppDogovor, IndexNo);
        AtDeleteMarker(Marker_pCalPlan   , IndexNo);
      }
    else
      OneMarkPick(SGetDocs.Buffer);

    if ( isBrowse )
      {
        TreeGetNext(trTreeTables);
        RescanPanel(#SGetDocs);
      }
    else
      {
        #ifdef ATL51
        RedrawCurrentAndGo(GetCurrentFormat, true);
        #else
        if ( GetNext SGetDocs = tsOk )
          CallToNeighbours(cmPosDown, #SGetDocs);
        RescanPanel(#SGetDocs);
        #end
      }
  }

cmSelectAll:
  {
    KillPick;

    _loop SGetDocs2
      OneMarkPick(SGetDocs2.Buffer);

    RereadRecord(#SGetDocs);
  }

cmUnSelectAll:
  {
    KillPick;
    RescanPanel(#SGetDocs);
  }

cmFilterSave: // <Alt+B>
  {
    var OldDskParams: word;
    var pCurPos: comp;

    OldDskParams := DskParams;

    pNode   := Node;
    pCurPos := SGetDocs.nRec;

    if ( RunInterface('BegFil', word(4), double(0), word(0), DskParams) <> cmCancel )
      {
        delete all SGetDocs;
        ReSetBounds(#SGetDocs);
        Init_DSK_Params;
        MakeTree;
        Node := 0;
        TreeGetFirst(trTreeTables);
        if ( GetFirst SGetDocs = tsOK )
          SetBounds(#SGetDocs);
        else
          {
            message('Нет документов, удовлетворяющих фильтру!', Information);
            DskParams := OldDskParams;
            delete all SGetDocs;
            ReSetBounds(#SGetDocs);
            Init_DSK_Params;
            MakeTree;
            Node := 0;
            SetBounds(#SGetDocs);
            set Node := pNode;
            TreeJumpToRecord(trTreeTables, pCurPos);
          }
      }
    RescanPanel(#SGetDocs);
  }

cmOpenSearch:
  {
    if (
        (
         ( CurField = #SGetDocs.dDoc )
          OR
         ( CurField = #SGetDocs.NoDoc )
        )
         AND
        ( not isBrowse )
       )
      {
        isBrowse := true;
        ReSetBounds(#SGetDocs);
        SetFormat(brTables);
      }
  }

cmCloseSearch:
  if isBrowse
    {
      isBrowse := false;
      var _nrec : comp;
      Node  := SGetDocs.cOwner;
      _nrec := SGetDocs.nRec;
      SetBounds(#SGetDocs);
      TreeJumpToRecord (trTreeTables,_nrec);
      SetFormat(trTreeTables);
    }

cmShowAll: // Раскрыть все ветки
  {
    if isBrowse
      Exit;

    var sav_NRec : comp;
    sav_NRec := SGetDocs.nRec;

    if ( TreeGetFirst(trTreeTables) )
      do
        TreeOpenNode(trTreeTables);
      while TreeGetNext(trTreeTables);

    TreeJumpToRecord(trTreeTables,sav_NRec);

    ReScanPanel(#SGetDocs);
  }

cmHideAll: // Свернуть все ветки
  {
    if isBrowse
      Exit;

    var sav_NRec : comp;

    while ( SGetDocs.cOwner <> 0 ) do
      TreeJumpToRecord(trTreeTables,SGetDocs.cOwner);

    sav_NRec := SGetDocs.nRec;

    if ( TreeGetFirst(trTreeTables) )
      do
        TreeCloseNode(trTreeTables);
      while TreeGetNext(trTreeTables);

    TreeJumpToRecord(trTreeTables,sav_NRec);

    ReScanPanel(#SGetDocs);
  }

cmValue10:
  {
    var c1, c2: comp;

    c1 := SGetDocs.cDogovor;
    c2 := SGetDocs.cAppDogovor;

    SaveMyDsk(c1, 'GetDAK_Dogovor');

    var R : TFilterDog;
    R.Filter := 0;

    RunInterface('GetDocs2', c1, c2, longint(vcGetDog_Zamena+vcGetDog_Dogovor), R);
  }

cmHotKeys:
  PutHotCommand(RunMenu('mnuGetDocs'));

cmDone:
  {
    DoneMarker(Marker_pRec       , 'GetDocsPick_cRec');
    DoneMarker(Marker_pDogovor   , 'GetDocsPick_cDogovor');
    DoneMarker(Marker_pAppDogovor, 'GetDocsPick_cAppDogovor');
    DoneMarker(Marker_pCalPlan   , 'GetDocsPick_cCalPlan');
  }

#include GetDocs.han

end; // HandleEvent Interface

end. // Interface

#doc
Локальное меню главного окна интерфейса <link Interface L_Dogovor::GetDocs>L_Dogovor::GetDocs - Выбор договора/соглашения/ПКП</link>
#end
mnuGetDocs Menu
{
  - 'Установка фильтров', cmFilterSave, 'Установить/снять фильтр по договорам',, 'Alt+B', kbAltB, sci1Esc;
-----------;
  - 'Отчет о ходе исполнения договора', cmValue10, 'Отчет о ходе исполнения договора', hcdg_oper_otchet,,, sci1Esc;
-----------;
  - 'Раскрыть все ветки', cmShowAll, 'Разворачивает все дерево документов',, 'Ctrl+''+''', kbCtrlGrayPlus , sci1Esc;
  - 'Свернуть все ветки', cmHideAll, 'Сворачивает все дерево документов'  ,, 'Ctrl+''-''', kbCtrlGrayMinus, sci1Esc;
}
